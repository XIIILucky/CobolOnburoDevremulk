      >>IMP(ACU-CBLFLAGS=-Sa)
      * D:\asya\acugt.ytl\otel\Copylib\TChart.def - ActiveX control definitions 
      * This is a 32-bit control
      * Generated by axdefgen version 9.2.5
      * Generated: Saturday, November 04, 2023
      * Typelib..: C:\acucorp\acucbl701\acugt\bin\activex\TeeChart7.ocx
           
           OBJECT @TeeChart
           
      * Constants for Chart panel bevel
           
      * EPanelBevel
           CLASS @EPanelBevel
               CLSID, 779302C0-2E43-4131-B0DB-A9AE827745C2
               NAME, "EPanelBevel"
      * "long bvNone"
               ENUMERATOR, @bvNone, 0
      * "long bvLowered"
               ENUMERATOR, @bvLowered, 1
      * "long bvRaised"
               ENUMERATOR, @bvRaised, 2
           
      * Constants for Chart panel border
           
      * EBorderStyle
           CLASS @EBorderStyle
               CLSID, 7EA8E41F-C51F-4897-9E05-E938A249F732
               NAME, "EBorderStyle"
      * "long bsNone"
               ENUMERATOR, @bsNone, 0
      * "long bsSingle"
               ENUMERATOR, @bsSingle, 1
           
      * Constants for drag & drop
           
      * EDragMode
           CLASS @EDragMode
               CLSID, 3E98EACF-4909-4FE5-8703-D41C124E782F
               NAME, "EDragMode"
      * "long dmManual"
               ENUMERATOR, @dmManual, 0
      * "long dmAutomatic"
               ENUMERATOR, @dmAutomatic, 1
           
      * Constants for Pen style options
           
      * EChartPenStyle
           CLASS @EChartPenStyle
               CLSID, 5876F1D3-1737-49FB-8557-3B2494473282
               NAME, "EChartPenStyle"
      * "long psSolid"
               ENUMERATOR, @psSolid, 0
      * "long psDash"
               ENUMERATOR, @psDash, 1
      * "long psDot"
               ENUMERATOR, @psDot, 2
      * "long psDashDot"
               ENUMERATOR, @psDashDot, 3
      * "long psDashDotDot"
               ENUMERATOR, @psDashDotDot, 4
      * "long psClear"
               ENUMERATOR, @psClear, 5
      * "long psInsideFrame"
               ENUMERATOR, @psInsideFrame, 6
      * "long psSmallDots"
               ENUMERATOR, @psSmallDots, 7
           
      * Constants for Chart Legend options
           
      * ELegendStyle
           CLASS @ELegendStyle
               CLSID, C09BC60F-EDA3-40BE-BFF8-0BAEA73867E7
               NAME, "ELegendStyle"
      * "long lsAuto"
               ENUMERATOR, @lsAuto, 0
      * "long lsSeries"
               ENUMERATOR, @lsSeries, 1
      * "long lsValues"
               ENUMERATOR, @lsValues, 2
      * "long lsLastValues"
               ENUMERATOR, @lsLastValues, 3
           
      * Constants for mouse events
           
      * EMouseButton
           CLASS @EMouseButton
               CLSID, 7C599A73-55B8-4FC6-9A4D-1F179E3DF972
               NAME, "EMouseButton"
      * "long mbLeft"
               ENUMERATOR, @mbLeft, 1
      * "long mbRight"
               ENUMERATOR, @mbRight, 2
      * "long mbMiddle"
               ENUMERATOR, @mbMiddle, 4
           
      * Constants for Chart drag and drop
           
      * EDragState
           CLASS @EDragState
               CLSID, 94A37D04-55B2-4AA0-B96E-9CD5EF43F715
               NAME, "EDragState"
      * "long dsDragEnter"
               ENUMERATOR, @dsDragEnter, 0
      * "long dsDragLeave"
               ENUMERATOR, @dsDragLeave, 1
      * "long dsDragMove"
               ENUMERATOR, @dsDragMove, 2
           
      * Constants for Chart Panel Gradient
           
      * EGradientDirection
           CLASS @EGradientDirection
               CLSID, C718EDE6-20AF-4D3B-B540-8EEA7970E87B
               NAME, "EGradientDirection"
      * "long gdTopBottom"
               ENUMERATOR, @gdTopBottom, 0
      * "long gdBottomTop"
               ENUMERATOR, @gdBottomTop, 1
      * "long gdLeftRight"
               ENUMERATOR, @gdLeftRight, 2
      * "long gdRightLeft"
               ENUMERATOR, @gdRightLeft, 3
      * "long gdFromCenter"
               ENUMERATOR, @gdFromCenter, 4
      * "long gdFromTopLeft"
               ENUMERATOR, @gdFromTopLeft, 5
      * "long gdFromBottomLeft"
               ENUMERATOR, @gdFromBottomLeft, 6
      * "long gdRadial"
               ENUMERATOR, @gdRadial, 7
           
      * Constants for Chart Axis Labels styles
           
      * EAxisLabelStyle
           CLASS @EAxisLabelStyle
               CLSID, 59403201-304A-4511-8EB8-ABEDFC250199
               NAME, "EAxisLabelStyle"
      * "long talAuto"
               ENUMERATOR, @talAuto, 0
      * "long talNone"
               ENUMERATOR, @talNone, 1
      * "long talValue"
               ENUMERATOR, @talValue, 2
      * "long talMark"
               ENUMERATOR, @talMark, 3
      * "long talText"
               ENUMERATOR, @talText, 4
           
      * Constants for Chart horizontal axis
           
      * EHorizontalAxis
           CLASS @EHorizontalAxis
               CLSID, 598F049B-4A36-4A7D-967C-BE4BC2281863
               NAME, "EHorizontalAxis"
      * "long aTopAxis"
               ENUMERATOR, @aTopAxis, 0
      * "long aBottomAxis"
               ENUMERATOR, @aBottomAxis, 1
      * "long aBothHorizAxis"
               ENUMERATOR, @aBothHorizAxis, 2
      * "long aCustomHorizAxis"
               ENUMERATOR, @aCustomHorizAxis, 3
           
      * Constants for Brush styles
           
      * EBrushStyle
           CLASS @EBrushStyle
               CLSID, 42B89B44-FD58-4425-9FD8-7AEA1D9C40DC
               NAME, "EBrushStyle"
      * "long bsSolid"
               ENUMERATOR, @bsSolid, 0
      * "long bsClear"
               ENUMERATOR, @bsClear, 1
      * "long bsHorizontal"
               ENUMERATOR, @bsHorizontal, 2
      * "long bsVertical"
               ENUMERATOR, @bsVertical, 3
      * "long bsFDiagonal"
               ENUMERATOR, @bsFDiagonal, 4
      * "long bsBDiagonal"
               ENUMERATOR, @bsBDiagonal, 5
      * "long bsCross"
               ENUMERATOR, @bsCross, 6
      * "long bsDiagCross"
               ENUMERATOR, @bsDiagCross, 7
      * "long bsFill80"
               ENUMERATOR, @bsFill80, 8
      * "long bsFill60"
               ENUMERATOR, @bsFill60, 9
      * "long bsFill40"
               ENUMERATOR, @bsFill40, 10
      * "long bsFill20"
               ENUMERATOR, @bsFill20, 11
      * "long bsFill10"
               ENUMERATOR, @bsFill10, 12
      * "long bsZigZag"
               ENUMERATOR, @bsZigZag, 13
      * "long bsVertSmall"
               ENUMERATOR, @bsVertSmall, 14
      * "long bsHorizSmall"
               ENUMERATOR, @bsHorizSmall, 15
      * "long bsDiagSmall"
               ENUMERATOR, @bsDiagSmall, 16
      * "long bsBackDiagSmall"
               ENUMERATOR, @bsBackDiagSmall, 17
      * "long bsCrossSmall"
               ENUMERATOR, @bsCrossSmall, 18
      * "long bsBackCrossSmall"
               ENUMERATOR, @bsBackCrossSmall, 19
           
      * Constants for Area Series
           
      * EMultiArea
           CLASS @EMultiArea
               CLSID, 6BF4E449-39B2-41A2-A1A4-7A18543D91E3
               NAME, "EMultiArea"
      * "long maNone"
               ENUMERATOR, @maNone, 0
      * "long maStacked"
               ENUMERATOR, @maStacked, 1
      * "long maStacked100"
               ENUMERATOR, @maStacked100, 2
           
      * Constants for Bar and Horizontal Bar Series
           
      * EMultiBar
           CLASS @EMultiBar
               CLSID, 09050F8F-5857-4F7D-8BB5-C8D46CF65DD5
               NAME, "EMultiBar"
      * "long mbNone"
               ENUMERATOR, @mbNone, 0
      * "long mbSide"
               ENUMERATOR, @mbSide, 1
      * "long mbStacked"
               ENUMERATOR, @mbStacked, 2
      * "long mbStacked100"
               ENUMERATOR, @mbStacked100, 3
      * "long mbSideAll"
               ENUMERATOR, @mbSideAll, 4
      * "long mbSelfStack"
               ENUMERATOR, @mbSelfStack, 5
           
      * Constants for Series Marks styles
           
      * EMarkStyle
           CLASS @EMarkStyle
               CLSID, 8C60D75F-8ADB-485B-BDFE-383FE866A2E4
               NAME, "EMarkStyle"
      * "long smsValue"
               ENUMERATOR, @smsValue, 0
      * "long smsPercent"
               ENUMERATOR, @smsPercent, 1
      * "long smsLabel"
               ENUMERATOR, @smsLabel, 2
      * "long smsLabelPercent"
               ENUMERATOR, @smsLabelPercent, 3
      * "long smsLabelValue"
               ENUMERATOR, @smsLabelValue, 4
      * "long smsLegend"
               ENUMERATOR, @smsLegend, 5
      * "long smsPercentTotal"
               ENUMERATOR, @smsPercentTotal, 6
      * "long smsLabelPercentTotal"
               ENUMERATOR, @smsLabelPercentTotal, 7
      * "long smsXValue"
               ENUMERATOR, @smsXValue, 8
      * "long smsXY"
               ENUMERATOR, @smsXY, 9
           
      * Constants for Bar Series styles
           
      * EBarStyle
           CLASS @EBarStyle
               CLSID, 4A967BEA-7902-451D-A1FE-280936E031AF
               NAME, "EBarStyle"
      * "long bsRectangle"
               ENUMERATOR, @bsRectangle, 0
      * "long bsPyramid"
               ENUMERATOR, @bsPyramid, 1
      * "long bsInvPyramid"
               ENUMERATOR, @bsInvPyramid, 2
      * "long bsCilinder"
               ENUMERATOR, @bsCilinder, 3
      * "long bsEllipse"
               ENUMERATOR, @bsEllipse, 4
      * "long bsArrow"
               ENUMERATOR, @bsArrow, 5
      * "long bsRectGradient"
               ENUMERATOR, @bsRectGradient, 6
      * "long bsCone"
               ENUMERATOR, @bsCone, 7
      * "long bsBevel"
               ENUMERATOR, @bsBevel, 8
           
      * Constants for chart scrolling
           
      * EChartScroll
           CLASS @EChartScroll
               CLSID, 9F26CDD2-03A3-4CB4-A144-702911F64BA0
               NAME, "EChartScroll"
      * "long pmNone"
               ENUMERATOR, @pmNone, 0
      * "long pmHorizontal"
               ENUMERATOR, @pmHorizontal, 1
      * "long pmVertical"
               ENUMERATOR, @pmVertical, 2
      * "long pmBoth"
               ENUMERATOR, @pmBoth, 3
           
      * Constants for Chart Legend Alignment
           
      * ELegendAlignment
           CLASS @ELegendAlignment
               CLSID, D3DA7561-2DDC-4F36-88BF-6F5941C55195
               NAME, "ELegendAlignment"
      * "long laLeft"
               ENUMERATOR, @laLeft, 0
      * "long laRight"
               ENUMERATOR, @laRight, 1
      * "long laTop"
               ENUMERATOR, @laTop, 2
      * "long laBottom"
               ENUMERATOR, @laBottom, 3
           
      * Constants for Chart Legend TextStyle
           
      * ELegendTextStyle
           CLASS @ELegendTextStyle
               CLSID, F61F7757-51F5-4E4F-B2D7-01CF19AB73C4
               NAME, "ELegendTextStyle"
      * "long ltsPlain"
               ENUMERATOR, @ltsPlain, 0
      * "long ltsLeftValue"
               ENUMERATOR, @ltsLeftValue, 1
      * "long ltsRightValue"
               ENUMERATOR, @ltsRightValue, 2
      * "long ltsLeftPercent"
               ENUMERATOR, @ltsLeftPercent, 3
      * "long ltsRightPercent"
               ENUMERATOR, @ltsRightPercent, 4
      * "long ltsXValue"
               ENUMERATOR, @ltsXValue, 5
      * "long ltsValue"
               ENUMERATOR, @ltsValue, 6
      * "long ltsPercent"
               ENUMERATOR, @ltsPercent, 7
      * "long ltsXAndValue"
               ENUMERATOR, @ltsXAndValue, 8
      * "long ltsXAndPercent"
               ENUMERATOR, @ltsXAndPercent, 9
           
      * Constants for Axis type
           
      * EAxisType
           CLASS @EAxisType
               CLSID, 87F60E66-35F3-4910-AC4E-969396881348
               NAME, "EAxisType"
      * "long atLeft"
               ENUMERATOR, @atLeft, 0
      * "long atTop"
               ENUMERATOR, @atTop, 1
      * "long atRight"
               ENUMERATOR, @atRight, 2
      * "long atBottom"
               ENUMERATOR, @atBottom, 3
      * "long atDepth"
               ENUMERATOR, @atDepth, 4
      * "long atCustom"
               ENUMERATOR, @atCustom, 5
           
      * Constants for date-time Axis Increment
           
      * EDateTimeStep
           CLASS @EDateTimeStep
               CLSID, 2C059786-C790-412F-B219-091AE7AFF136
               NAME, "EDateTimeStep"
      * "long dtOneMicrosecond"
               ENUMERATOR, @dtOneMicrosecond, 0
      * "long dtOneMillisecond"
               ENUMERATOR, @dtOneMillisecond, 1
      * "long dtOneSecond"
               ENUMERATOR, @dtOneSecond, 2
      * "long dtFiveSeconds"
               ENUMERATOR, @dtFiveSeconds, 3
      * "long dtTenSeconds"
               ENUMERATOR, @dtTenSeconds, 4
      * "long dtFifteenSeconds"
               ENUMERATOR, @dtFifteenSeconds, 5
      * "long dtThirtySeconds"
               ENUMERATOR, @dtThirtySeconds, 6
      * "long dtOneMinute"
               ENUMERATOR, @dtOneMinute, 7
      * "long dtFiveMinutes"
               ENUMERATOR, @dtFiveMinutes, 8
      * "long dtTenMinutes"
               ENUMERATOR, @dtTenMinutes, 9
      * "long dtFifteenMinutes"
               ENUMERATOR, @dtFifteenMinutes, 10
      * "long dtThirtyMinutes"
               ENUMERATOR, @dtThirtyMinutes, 11
      * "long dtOneHour"
               ENUMERATOR, @dtOneHour, 12
      * "long dtTwoHours"
               ENUMERATOR, @dtTwoHours, 13
      * "long dtSixHours"
               ENUMERATOR, @dtSixHours, 14
      * "long dtTwelveHours"
               ENUMERATOR, @dtTwelveHours, 15
      * "long dtOneDay"
               ENUMERATOR, @dtOneDay, 16
      * "long dtTwoDays"
               ENUMERATOR, @dtTwoDays, 17
      * "long dtThreeDays"
               ENUMERATOR, @dtThreeDays, 18
      * "long dtOneWeek"
               ENUMERATOR, @dtOneWeek, 19
      * "long dtHalfMonth"
               ENUMERATOR, @dtHalfMonth, 20
      * "long dtOneMonth"
               ENUMERATOR, @dtOneMonth, 21
      * "long dtTwoMonths"
               ENUMERATOR, @dtTwoMonths, 22
      * "long dtThreeMonths"
               ENUMERATOR, @dtThreeMonths, 23
      * "long dtFourMonths"
               ENUMERATOR, @dtFourMonths, 24
      * "long dtSixMonths"
               ENUMERATOR, @dtSixMonths, 25
      * "long dtOneYear"
               ENUMERATOR, @dtOneYear, 26
      * "long dtNone"
               ENUMERATOR, @dtNone, 27
           
      * Constants for JPEG export
           
      * EJPEGPerformance
           CLASS @EJPEGPerformance
               CLSID, 74F6835C-282E-42DC-9163-E4B8DD7059D2
               NAME, "EJPEGPerformance"
      * "long jpegBestQuality"
               ENUMERATOR, @jpegBestQuality, 0
      * "long jpegBestSpeed"
               ENUMERATOR, @jpegBestSpeed, 1
           
      * Global constants
           
      * EConstants
           CLASS @EConstants
               CLSID, 83BDC5E1-6455-4060-BC40-630BA3666642
               NAME, "EConstants"
      * "long clTeeColor"
               ENUMERATOR, @clTeeColor, 536870912
      * "long clNone"
               ENUMERATOR, @clNone, 536870911
           
      * Constants for Function types
           
      * EFunctionType
           CLASS @EFunctionType
               CLSID, 4EAB5343-2780-49D9-83AF-EA90CA4EAA26
               NAME, "EFunctionType"
      * "long tfCopy"
               ENUMERATOR, @tfCopy, 0
      * "long tfAdd"
               ENUMERATOR, @tfAdd, 1
      * "long tfSubtract"
               ENUMERATOR, @tfSubtract, 2
      * "long tfMultiply"
               ENUMERATOR, @tfMultiply, 3
      * "long tfDivide"
               ENUMERATOR, @tfDivide, 4
      * "long tfAverage"
               ENUMERATOR, @tfAverage, 5
      * "long tfHigh"
               ENUMERATOR, @tfHigh, 6
      * "long tfLow"
               ENUMERATOR, @tfLow, 7
      * "long tfMovavg"
               ENUMERATOR, @tfMovavg, 8
      * "long tfExpavg"
               ENUMERATOR, @tfExpavg, 9
      * "long tfMomentum"
               ENUMERATOR, @tfMomentum, 10
      * "long tfCurveFit"
               ENUMERATOR, @tfCurveFit, 11
      * "long tfRSI"
               ENUMERATOR, @tfRSI, 12
      * "long tfTrend"
               ENUMERATOR, @tfTrend, 13
      * "long tfStdDeviation"
               ENUMERATOR, @tfStdDeviation, 14
      * "long tfCumulative"
               ENUMERATOR, @tfCumulative, 15
      * "long tfCount"
               ENUMERATOR, @tfCount, 16
      * "long tfExpTrend"
               ENUMERATOR, @tfExpTrend, 17
      * "long tfExpMovAvg"
               ENUMERATOR, @tfExpMovAvg, 18
      * "long tfMomentumDiv"
               ENUMERATOR, @tfMomentumDiv, 19
      * "long tfRMS"
               ENUMERATOR, @tfRMS, 20
      * "long tfMACD"
               ENUMERATOR, @tfMACD, 21
      * "long tfStochastic"
               ENUMERATOR, @tfStochastic, 22
      * "long tfBollinger"
               ENUMERATOR, @tfBollinger, 23
      * "long tfADX"
               ENUMERATOR, @tfADX, 24
      * "long tfSmoothing"
               ENUMERATOR, @tfSmoothing, 25
      * "long tfCustom"
               ENUMERATOR, @tfCustom, 26
      * "long tfCompress"
               ENUMERATOR, @tfCompress, 27
      * "long tfCrossPoints"
               ENUMERATOR, @tfCrossPoints, 28
      * "long tfCLV"
               ENUMERATOR, @tfCLV, 29
      * "long tfOBV"
               ENUMERATOR, @tfOBV, 30
      * "long tfCCI"
               ENUMERATOR, @tfCCI, 31
      * "long tfPVO"
               ENUMERATOR, @tfPVO, 32
      * "long tfPerformance"
               ENUMERATOR, @tfPerformance, 33
      * "long tfMode"
               ENUMERATOR, @tfMode, 34
      * "long tfMedian"
               ENUMERATOR, @tfMedian, 35
      * "long tfCorrelation"
               ENUMERATOR, @tfCorrelation, 36
      * "long tfVariance"
               ENUMERATOR, @tfVariance, 37
      * "long tfPerimeter"
               ENUMERATOR, @tfPerimeter, 38
      * "long tfDownSampleFun"
               ENUMERATOR, @tfDownSampleFun, 39
           
      * Constants for Shape Series XYStyle
           
      * EShapeXYStyle
           CLASS @EShapeXYStyle
               CLSID, 2D19F024-CFD7-4A98-A50E-769FDB0E0173
               NAME, "EShapeXYStyle"
      * "long xysPixels"
               ENUMERATOR, @xysPixels, 0
      * "long xysAxis"
               ENUMERATOR, @xysAxis, 1
      * "long xysAxisOrigin"
               ENUMERATOR, @xysAxisOrigin, 2
           
      * Constants for Candle Series Style
           
      * ECandleStyle
           CLASS @ECandleStyle
               CLSID, FE74859A-E302-4948-9088-95979156CF3F
               NAME, "ECandleStyle"
      * "long csCandleStick"
               ENUMERATOR, @csCandleStick, 0
      * "long csCandleBar"
               ENUMERATOR, @csCandleBar, 1
      * "long csOpenClose"
               ENUMERATOR, @csOpenClose, 2
      * "long csLine"
               ENUMERATOR, @csLine, 3
           
      * Constants for Error Bar Series width
           
      * EErrorWidthUnits
           CLASS @EErrorWidthUnits
               CLSID, B16F0571-EF7F-4677-8A05-084D76DE971C
               NAME, "EErrorWidthUnits"
      * "long ewuPercent"
               ENUMERATOR, @ewuPercent, 0
      * "long ewuPixels"
               ENUMERATOR, @ewuPixels, 1
           
      * Constants for Series Values order
           
      * EValueListOrder
           CLASS @EValueListOrder
               CLSID, B9E98696-4F5F-4AF9-919A-91949D469E6D
               NAME, "EValueListOrder"
      * "long loNone"
               ENUMERATOR, @loNone, 0
      * "long loAscending"
               ENUMERATOR, @loAscending, 1
      * "long loDescending"
               ENUMERATOR, @loDescending, 2
           
      * Constants for Shape Series style
           
      * EShapeStyle
           CLASS @EShapeStyle
               CLSID, 69DA49DD-D921-4607-99F5-44DE47EB5257
               NAME, "EShapeStyle"
      * "long chasRectangle"
               ENUMERATOR, @chasRectangle, 0
      * "long chasCircle"
               ENUMERATOR, @chasCircle, 1
      * "long chasVertLine"
               ENUMERATOR, @chasVertLine, 2
      * "long chasHorizLine"
               ENUMERATOR, @chasHorizLine, 3
      * "long chasTriangle"
               ENUMERATOR, @chasTriangle, 4
      * "long chasInvertTriangle"
               ENUMERATOR, @chasInvertTriangle, 5
      * "long chasLine"
               ENUMERATOR, @chasLine, 6
      * "long chasDiamond"
               ENUMERATOR, @chasDiamond, 7
      * "long chasCube"
               ENUMERATOR, @chasCube, 8
      * "long chasCross"
               ENUMERATOR, @chasCross, 9
      * "long chasDiagCross"
               ENUMERATOR, @chasDiagCross, 10
      * "long chasStar"
               ENUMERATOR, @chasStar, 11
      * "long chasPyramid"
               ENUMERATOR, @chasPyramid, 12
      * "long chasInvertPyramid"
               ENUMERATOR, @chasInvertPyramid, 13
           
      * Constants for Series type
           
      * ESeriesClass
           CLASS @ESeriesClass
               CLSID, 9416C9C0-EA0E-46BD-85B4-F1E35D71D8D4
               NAME, "ESeriesClass"
      * "long scLine"
               ENUMERATOR, @scLine, 0
      * "long scBar"
               ENUMERATOR, @scBar, 1
      * "long scHorizBar"
               ENUMERATOR, @scHorizBar, 2
      * "long scArea"
               ENUMERATOR, @scArea, 3
      * "long scPoint"
               ENUMERATOR, @scPoint, 4
      * "long scPie"
               ENUMERATOR, @scPie, 5
      * "long scFastLine"
               ENUMERATOR, @scFastLine, 6
      * "long scShape"
               ENUMERATOR, @scShape, 7
      * "long scGantt"
               ENUMERATOR, @scGantt, 8
      * "long scBubble"
               ENUMERATOR, @scBubble, 9
      * "long scArrow"
               ENUMERATOR, @scArrow, 10
      * "long scCandle"
               ENUMERATOR, @scCandle, 11
      * "long scPolar"
               ENUMERATOR, @scPolar, 12
      * "long scSurface"
               ENUMERATOR, @scSurface, 13
      * "long scVolume"
               ENUMERATOR, @scVolume, 14
      * "long scErrorBar"
               ENUMERATOR, @scErrorBar, 15
      * "long scBezier"
               ENUMERATOR, @scBezier, 16
      * "long scContour"
               ENUMERATOR, @scContour, 17
      * "long scError"
               ENUMERATOR, @scError, 18
      * "long scPoint3D"
               ENUMERATOR, @scPoint3D, 19
      * "long scRadar"
               ENUMERATOR, @scRadar, 20
      * "long scClock"
               ENUMERATOR, @scClock, 21
      * "long scWindRose"
               ENUMERATOR, @scWindRose, 22
      * "long scBar3D"
               ENUMERATOR, @scBar3D, 23
      * "long scImageBar"
               ENUMERATOR, @scImageBar, 24
      * "long scDonut"
               ENUMERATOR, @scDonut, 25
      * "long scTriSurface"
               ENUMERATOR, @scTriSurface, 26
      * "long scBox"
               ENUMERATOR, @scBox, 27
      * "long scHorizBox"
               ENUMERATOR, @scHorizBox, 28
      * "long scHistogram"
               ENUMERATOR, @scHistogram, 29
      * "long scColorGrid"
               ENUMERATOR, @scColorGrid, 30
      * "long scBarJoin"
               ENUMERATOR, @scBarJoin, 31
      * "long scHighLow"
               ENUMERATOR, @scHighLow, 32
      * "long scWaterfall"
               ENUMERATOR, @scWaterfall, 33
      * "long scSmith"
               ENUMERATOR, @scSmith, 34
      * "long scPyramid"
               ENUMERATOR, @scPyramid, 35
      * "long scMap"
               ENUMERATOR, @scMap, 36
      * "long scHorizLine"
               ENUMERATOR, @scHorizLine, 37
      * "long scFunnel"
               ENUMERATOR, @scFunnel, 38
      * "long scCalendar"
               ENUMERATOR, @scCalendar, 39
      * "long scHorizArea"
               ENUMERATOR, @scHorizArea, 40
      * "long scPointFigure"
               ENUMERATOR, @scPointFigure, 41
      * "long scGauge"
               ENUMERATOR, @scGauge, 42
      * "long scVector3D"
               ENUMERATOR, @scVector3D, 43
      * "long scTower"
               ENUMERATOR, @scTower, 44
      * "long scPolarBar"
               ENUMERATOR, @scPolarBar, 45
      * "long scBubble3D"
               ENUMERATOR, @scBubble3D, 46
      * "long scHorizHistogram"
               ENUMERATOR, @scHorizHistogram, 47
      * "long scVolumePipe"
               ENUMERATOR, @scVolumePipe, 48
           
      * Constants for paper orientation
           
      * EPrinterOrientation
           CLASS @EPrinterOrientation
               CLSID, CA272DFB-537D-4196-8F27-27AD1813A001
               NAME, "EPrinterOrientation"
      * "long poPortrait"
               ENUMERATOR, @poPortrait, 0
      * "long poLandscape"
               ENUMERATOR, @poLandscape, 1
           
      * Constants for Series Pointer Style
           
      * EPointerStyle
           CLASS @EPointerStyle
               CLSID, 98589ED0-8840-4FA5-8F58-9773358F548E
               NAME, "EPointerStyle"
      * "long psRectangle"
               ENUMERATOR, @psRectangle, 0
      * "long psCircle"
               ENUMERATOR, @psCircle, 1
      * "long psTriangle"
               ENUMERATOR, @psTriangle, 2
      * "long psDownTriangle"
               ENUMERATOR, @psDownTriangle, 3
      * "long psCross"
               ENUMERATOR, @psCross, 4
      * "long psDiagCross"
               ENUMERATOR, @psDiagCross, 5
      * "long psStar"
               ENUMERATOR, @psStar, 6
      * "long psDiamond"
               ENUMERATOR, @psDiamond, 7
      * "long psSmallDot"
               ENUMERATOR, @psSmallDot, 8
      * "long psNothing"
               ENUMERATOR, @psNothing, 9
      * "long psLeftTriangle"
               ENUMERATOR, @psLeftTriangle, 10
      * "long psRightTriangle"
               ENUMERATOR, @psRightTriangle, 11
           
      * Constants for Curve Fitting function
           
      * ETypeFitting
           CLASS @ETypeFitting
               CLSID, 9FEB6BE1-F943-48DA-9F20-FC23592C7535
               NAME, "ETypeFitting"
      * "long cfPolynomial"
               ENUMERATOR, @cfPolynomial, 0
      * "long cfLogarithmic"
               ENUMERATOR, @cfLogarithmic, 1
      * "long cfExponential"
               ENUMERATOR, @cfExponential, 2
           
      * Constants for Chart background image
           
      * EBackImageMode
           CLASS @EBackImageMode
               CLSID, 3FC09C68-A4E7-4C40-BFED-9A56BCF1E90A
               NAME, "EBackImageMode"
      * "long pbmStretch"
               ENUMERATOR, @pbmStretch, 0
      * "long pbmTile"
               ENUMERATOR, @pbmTile, 1
      * "long pbmCenter"
               ENUMERATOR, @pbmCenter, 2
           
      * Constants for text alignment
           
      * ETextAlignment
           CLASS @ETextAlignment
               CLSID, D867150F-8283-4D04-B7E4-497054904EF1
               NAME, "ETextAlignment"
      * "long aLeft"
               ENUMERATOR, @aLeft, 0
      * "long aRight"
               ENUMERATOR, @aRight, 1
      * "long aCenter"
               ENUMERATOR, @aCenter, 2
           
      * Constants for Chart vertical Axis
           
      * EVerticalAxis
           CLASS @EVerticalAxis
               CLSID, D2A679CC-00CF-49E9-AC9D-4D488CB16D32
               NAME, "EVerticalAxis"
      * "long aLeftAxis"
               ENUMERATOR, @aLeftAxis, 0
      * "long aRightAxis"
               ENUMERATOR, @aRightAxis, 1
      * "long aBothVertAxis"
               ENUMERATOR, @aBothVertAxis, 2
      * "long aCustomVertAxis"
               ENUMERATOR, @aCustomVertAxis, 3
           
      * Constants for mouse and keyboard events
           
      * EShiftState
           CLASS @EShiftState
               CLSID, 15786E56-B16C-4CBB-857E-A90A80170C3D
               NAME, "EShiftState"
      * "long ssShift"
               ENUMERATOR, @ssShift, 1
      * "long ssAlt"
               ENUMERATOR, @ssAlt, 2
      * "long ssCtrl"
               ENUMERATOR, @ssCtrl, 4
      * "long ssNone"
               ENUMERATOR, @ssNone, 0
           
      * Constants for Chart Header and Footer text alignment
           
      * ETitleAlignment
           CLASS @ETitleAlignment
               CLSID, 30A4907D-D03B-4D15-9C9D-7474AD6C68EF
               NAME, "ETitleAlignment"
      * "long taLeftJustify"
               ENUMERATOR, @taLeftJustify, 0
      * "long taRightJustify"
               ENUMERATOR, @taRightJustify, 1
      * "long taCenter"
               ENUMERATOR, @taCenter, 2
           
      * Dual Dispatch interface for TeeChart Pro Activex Control
           
      * ITChart
           CLASS @ITChart
               CLSID, E95AD73C-AE6B-4EFB-B1BB-28E94EFF52EA
               NAME, "ITChart"
      *[Class: @ITChart] Aspect
      * General Chart viewing properties
               PROPERTY-GET, 1, @Aspect
                       RETURNING "IAspect*", TYPE 9
      *[Class: @ITChart] Axis
      * Access to the 4 axes
               PROPERTY-GET, 2, @Axis
                       RETURNING "IAxes*", TYPE 9
      *[Class: @ITChart] Canvas
      * Drawing attributes and functions
               PROPERTY-GET, 3, @Canvas
                       RETURNING "ICanvas*", TYPE 9
      *[Class: @ITChart] ClipPoints
      * Restrict the drawing of Series points to within Chart boundaries
               PROPERTY-GET, 4, @ClipPoints
                       RETURNING "boolean", TYPE 11
      *[Class: @ITChart] ClipPoints
      * Restrict the drawing of Series points to within Chart boundaries
               PROPERTY-PUT, 4, @ClipPoints,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITChart] Cursor
      * Defines the Chart cursor
               PROPERTY-GET, 5, @Cursor
                       RETURNING "short", TYPE 2
      *[Class: @ITChart] Cursor
      * Defines the Chart cursor
               PROPERTY-PUT, 5, @Cursor,
                   "short (Property_Value)", TYPE 2
      *[Class: @ITChart] DragCursor
      * Changes the cursor image presented when the control is being dragged.
               PROPERTY-GET, 6, @DragCursor
                       RETURNING "short", TYPE 2
      *[Class: @ITChart] DragCursor
      * Changes the cursor image presented when the control is being dragged.
               PROPERTY-PUT, 6, @DragCursor,
                   "short (Property_Value)", TYPE 2
      *[Class: @ITChart] DragMode
      * Controls when the user can drag the control.
               PROPERTY-GET, 7, @DragMode
                       RETURNING "EDragMode", TYPE 3
      *[Class: @ITChart] DragMode
      * Controls when the user can drag the control.
               PROPERTY-PUT, 7, @DragMode,
                   "EDragMode (Property_Value)", TYPE 3
      *[Class: @ITChart] Enabled
      * Enables/Disables the TChart.
               PROPERTY-GET, 8, @Enabled
                       RETURNING "boolean", TYPE 11
      *[Class: @ITChart] Enabled
      * Enables/Disables the TChart.
               PROPERTY-PUT, 8, @Enabled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITChart] Export
      * Chart exporting methods
               PROPERTY-GET, 9, @Export
                       RETURNING "IExport*", TYPE 9
      *[Class: @ITChart] Footer
      * Chart Footer text and attributes
               PROPERTY-GET, 10, @Footer
                       RETURNING "ITitles*", TYPE 9
      *[Class: @ITChart] Frame
      * Pen used to draw a frame around chart axis
               PROPERTY-GET, 11, @Frame
                       RETURNING "IPen*", TYPE 9
      *[Class: @ITChart] Header
      * Chart Header text and attributes
               PROPERTY-GET, 22, @Header
                       RETURNING "ITitles*", TYPE 9
      *[Class: @ITChart] Height
      * Height of overall Chart panel
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @ITChart] Height
      * Height of overall Chart panel
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITChart] Import
      * Chart importing methods
               PROPERTY-GET, 13, @Import
                       RETURNING "IImport*", TYPE 9
      *[Class: @ITChart] Left
      * Left position of overall Chart panel
               PROPERTY-GET, 14, @Left
                       RETURNING "long", TYPE 3
      *[Class: @ITChart] Left
      * Left position of overall Chart panel
               PROPERTY-PUT, 14, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITChart] Legend
      * Rectangle of Series Titles or Values
               PROPERTY-GET, 15, @Legend
                       RETURNING "ILegend*", TYPE 9
      *[Class: @ITChart] Page
      * Page formatting of multipage Charts
               PROPERTY-GET, 16, @Page
                       RETURNING "IPage*", TYPE 9
      *[Class: @ITChart] Panel
      * Access to Chart Panel attributes
               PROPERTY-GET, 17, @Panel
                       RETURNING "IPanel*", TYPE 9
      *[Class: @ITChart] Printer
      * Chart printing methods and properties
               PROPERTY-GET, 18, @Printer
                       RETURNING "IPrinter*", TYPE 9
      *[Class: @ITChart] Scroll
      * Properties to control Chart scroll
               PROPERTY-GET, 19, @Scroll
                       RETURNING "IScroll*", TYPE 9
      *[Class: @ITChart] aSeries
      * Deprecated. To support prior versions only - Access Series Collection
               PROPERTY-GET, 20, @aSeries,
                   "long" @SeriesIndex, TYPE 3
                       RETURNING "ISeries*", TYPE 9
      *[Class: @ITChart] SeriesCount
      * Number of Series in Chart
               PROPERTY-GET, 21, @SeriesCount
                       RETURNING "long", TYPE 3
      *[Class: @ITChart] Top
      * Overall Chart Panel Top position
               PROPERTY-GET, 23, @Top
                       RETURNING "long", TYPE 3
      *[Class: @ITChart] Top
      * Overall Chart Panel Top position
               PROPERTY-PUT, 23, @Top,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITChart] Visible
      * Controls the visibility of the control at runtime.
               PROPERTY-GET, 24, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @ITChart] Visible
      * Controls the visibility of the control at runtime.
               PROPERTY-PUT, 24, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITChart] Walls
      * The Chart bounding box sides
               PROPERTY-GET, 25, @Walls
                       RETURNING "IWalls*", TYPE 9
      *[Class: @ITChart] Width
      * Overall Chart Panel Width
               PROPERTY-GET, 26, @Width
                       RETURNING "long", TYPE 3
      *[Class: @ITChart] Width
      * Overall Chart Panel Width
               PROPERTY-PUT, 26, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITChart] Zoom
      * Properties to control Chart zoom
               PROPERTY-GET, 27, @Zoom
                       RETURNING "IZoom*", TYPE 9
      *[Class: @ITChart] AboutBox
      * About TeeChart Pro Activex...
               METHOD, -552, @AboutBox
      *[Class: @ITChart] AddSeries
      * Adds a new Series to the Chart
               METHOD, 28, @AddSeries,
                   "ESeriesClass" @SeriesClass, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ITChart] ChangeSeriesType
      * Changes an existing Series from one type to another
               METHOD, 29, @ChangeSeriesType,
                   "long" @SeriesIndex, TYPE 3,
                   "ESeriesClass" @NewSeriesType, TYPE 3
      *[Class: @ITChart] CloneSeries
      * Duplicates a Series and values
               METHOD, 30, @CloneSeries,
                   "long" @SourceSeriesIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ITChart] Draw
      * Draws Chart on a custom Windows handle DC (device context)
               METHOD, 31, @Draw,
                   "long" @DC, TYPE 3,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @ITChart] ExchangeSeries
      * Interchanges Series Z positions
               METHOD, 32, @ExchangeSeries,
                   "long" @Series1, TYPE 3,
                   "long" @Series2, TYPE 3
      *[Class: @ITChart] GetDateTimeStep
      * Returns the corresponding floating value for a DateTimeStep constant
               METHOD, 33, @GetDateTimeStep,
                   "EDateTimeStep" @DateTimeStep, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ITChart] GetFreeSeriesColor
      * Gets as yet unused Series Color from Default Color Palette
               METHOD, 34, @GetFreeSeriesColor,
                   "boolean" @CheckBackgroundColor, TYPE 11
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITChart] GetLabelsSeries
      * Series associated with Axis for labelling
               METHOD, 35, @GetLabelsSeries,
                   "EAxisType" @DestAxis, TYPE 3
                       RETURNING "ISeries*", TYPE 9
      *[Class: @ITChart] IsFreeSeriesColor
      * TRUE if AColor is not used by a Series
               METHOD, 36, @IsFreeSeriesColor,
                   "OLE_COLOR" @AColor, TYPE 19,
                   "boolean" @CheckBackgroundColor, TYPE 11
                       RETURNING "boolean", TYPE 11
      *[Class: @ITChart] RemoveAllSeries
      * Removes all Series from Chart
               METHOD, 37, @RemoveAllSeries
      *[Class: @ITChart] RemoveSeries
      * Removes SeriesIndexth Series from the Chart
               METHOD, 38, @RemoveSeries,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @ITChart] Repaint
      * Forces Chart screen update
               METHOD, 39, @Repaint
      *[Class: @ITChart] SeriesTitleLegend
      * Returns the Series title for the Legend
               METHOD, 40, @SeriesTitleLegend,
                   "long" @ASeriesIndex, TYPE 3
                       RETURNING "BSTR", TYPE 8
      *[Class: @ITChart] ShowEditor
      * Runs the Chart editor dialog
               METHOD, 41, @ShowEditor,
                   "long" @SeriesIndex, TYPE 3
                       OPTIONAL 1
      *[Class: @ITChart] StopMouse
      * Call to stop processing mouse clicks in OnClick... events
               METHOD, 42, @StopMouse
      *[Class: @ITChart] TimerEnabled
      * Enables/Disables the TChart timer.
               PROPERTY-GET, 43, @TimerEnabled
                       RETURNING "boolean", TYPE 11
      *[Class: @ITChart] TimerEnabled
      * Enables/Disables the TChart timer.
               PROPERTY-PUT, 43, @TimerEnabled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITChart] TimerInterval
      * Sets the timer interval (milliseconds).
               PROPERTY-GET, 44, @TimerInterval
                       RETURNING "long", TYPE 3
      *[Class: @ITChart] TimerInterval
      * Sets the timer interval (milliseconds).
               PROPERTY-PUT, 44, @TimerInterval,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITChart] AutoRepaint
      * Permits disable of Chart Repaint
               PROPERTY-GET, 45, @AutoRepaint
                       RETURNING "boolean", TYPE 11
      *[Class: @ITChart] AutoRepaint
      * Permits disable of Chart Repaint
               PROPERTY-PUT, 45, @AutoRepaint,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITChart] EditOneSeries
      * Edit Indexth Chart Series
               METHOD, 46, @EditOneSeries,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @ITChart] Environment
      * TeeChart environment variables
               PROPERTY-GET, 47, @Environment
                       RETURNING "IEnvironment*", TYPE 9
      *[Class: @ITChart] ChartLink
      * For internal use to connect to other Tee controls
               PROPERTY-GET, 48, @ChartLink
                       RETURNING "long", TYPE 3
      *[Class: @ITChart] MousePosition
      * Returns the current mouse position in pixels relative to the Chart panel 
               PROPERTY-GET, 49, @MousePosition
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @ITChart] ChartRect
      * Permits location of Chart painted output within Chart Panel
               METHOD, 50, @ChartRect,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @ITChart] Tools
      * Accesses Tool attributes.
               PROPERTY-GET, 51, @Tools
                       RETURNING "IToolList*", TYPE 9
      *[Class: @ITChart] SubHeader
      * Chart SubHeader text and attributes.
               PROPERTY-GET, 52, @SubHeader
                       RETURNING "ITitles*", TYPE 9
      *[Class: @ITChart] SubFooter
      * Chart SubFooter text and attributes.
               PROPERTY-GET, 53, @SubFooter
                       RETURNING "ITitles*", TYPE 9
      *[Class: @ITChart] ClearChart
      * Clears Chart of all data and modifications
               METHOD, 55, @ClearChart
      *[Class: @ITChart] RefreshData
      * Refreshes the Series Data
               METHOD, 54, @RefreshData
      *[Class: @ITChart] Series
      * Access the Chart Series Collection
               METHOD, 56, @Series,
                   "long" @SeriesIndex, TYPE 3
                       RETURNING "ISeries*", TYPE 9
      *[Class: @ITChart] ShowThemesEditor
      * Show Theme Editor
               METHOD, 201, @ShowThemesEditor
      *[Class: @ITChart] SetTheme
      * Apply Theme to Chart
               METHOD, 202, @SetTheme,
                   "EChartTheme" @aTheme, TYPE 3,
                   "EColorPalette" @aPalette, TYPE 3
      *[Class: @ITChart] ApplyPalette
      * Apply Predefined Color Palette
               METHOD, 203, @ApplyPalette,
                   "EColorPalette" @paletteIndex, TYPE 3
      *[Class: @ITChart] ApplyCustomPalette
      * Apply Custom Color Palette
               METHOD, 204, @ApplyCustomPalette,
                   "VARIANT" @colorArray, TYPE 12
      *[Class: @ITChart] SeriesList
      * Chart SeriesList and atributes
               PROPERTY-GET, 205, @SeriesList
                       RETURNING "ISeriesList*", TYPE 9
      *[Class: @ITChart] Hint
               PROPERTY-GET, 206, @Hint
                       RETURNING "BSTR", TYPE 8
      *[Class: @ITChart] Hint
               PROPERTY-PUT, 206, @Hint,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ITChart] ShowHint
               PROPERTY-GET, 207, @ShowHint
                       RETURNING "boolean", TYPE 11
      *[Class: @ITChart] ShowHint
               PROPERTY-PUT, 207, @ShowHint,
                   "boolean (Property_Value)", TYPE 11
           
      * Events interface for TeeChart Pro Activex Control
           
      * ITChartEvents
           CLASS @ITChartEvents
               CLSID, 4A7A617A-4BF1-4A01-B9B5-36D937882795
               NAME, "ITChartEvents"
      *[Class: @ITChartEvents] OnAfterDraw
      * Called when chart has finished drawing. Use to custom draw.
               METHOD, 1, @OnAfterDraw
      *[Class: @ITChartEvents] OnBeforeDrawSeries
      * Called before Series are displayed (after axis are shown)
               METHOD, 29, @OnBeforeDrawSeries
      *[Class: @ITChartEvents] OnBeforeDrawAxes
      * Called before Axes are displayed
               METHOD, 30, @OnBeforeDrawAxes
      *[Class: @ITChartEvents] OnClick
      * Called when mouse clicking the Chart
               METHOD, 3, @OnClick
      *[Class: @ITChartEvents] OnClickAxis
      * Called when mouse clicking near a Chart axis
               METHOD, 4, @OnClickAxis,
                   "long" @Axis, TYPE 3,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnClickBackground
      * Called when mouse is clicked on an empty background Chart area
               METHOD, 5, @OnClickBackground,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnClickLegend
      * Called when mouse clicking the Chart Legend
               METHOD, 6, @OnClickLegend,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnClickSeries
      * Called when mouse clicking a Series point
               METHOD, 7, @OnClickSeries,
                   "long" @SeriesIndex, TYPE 3,
                   "long" @ValueIndex, TYPE 3,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnDblClick
      * Called when double clicking a Chart
               METHOD, 8, @OnDblClick
      *[Class: @ITChartEvents] OnDragDrop
      * Occurs when the user drops an object being dragged.
               METHOD, 9, @OnDragDrop,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnDragOver
      * Occurs when the user drags an object over a TChart.
               METHOD, 10, @OnDragOver,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "EDragState" @State, TYPE 3,
                   "boolean*" @Accept, TYPE 16395
      *[Class: @ITChartEvents] OnEndDrag
      * Occurs when the dragging of an object ends, either by dropping the 
               METHOD, 11, @OnEndDrag,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnEnter
      * Called when mouse cursor goes into Chart
               METHOD, 12, @OnEnter
      *[Class: @ITChartEvents] OnExit
      * Called when mouse cursor moves out of Chart
               METHOD, 13, @OnExit
      *[Class: @ITChartEvents] OnGetAxisLabel
      * Use to specify custom axis label's text
               METHOD, 14, @OnGetAxisLabel,
                   "long" @Axis, TYPE 3,
                   "long" @SeriesIndex, TYPE 3,
                   "long" @ValueIndex, TYPE 3,
                   "BSTR*" @LabelText, TYPE 16392
      *[Class: @ITChartEvents] OnGetLegendRect
      * Use to specify Legend dimensions and position
               METHOD, 16, @OnGetLegendRect,
                   "long*" @Left, TYPE 16387,
                   "long*" @Top, TYPE 16387,
                   "long*" @Right, TYPE 16387,
                   "long*" @Bottom, TYPE 16387
      *[Class: @ITChartEvents] OnGetNextAxisLabel
      * Called when axis are drawing. Use to specify custom axis labels
               METHOD, 18, @OnGetNextAxisLabel,
                   "long" @Axis, TYPE 3,
                   "long" @LabelIndex, TYPE 3,
                   "double*" @LabelValue, TYPE 16389,
                   "boolean*" @MoreLabels, TYPE 16395
      *[Class: @ITChartEvents] OnMouseDown
      * Called when user presses mouse button
               METHOD, 19, @OnMouseDown,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnMouseMove
      * Called while user is moving the mouse
               METHOD, 20, @OnMouseMove,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnMouseUp
      * Called when user depresses mouse button
               METHOD, 21, @OnMouseUp,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnPageChange
      * Called when Chart.Page.Current changes
               METHOD, 22, @OnPageChange
      *[Class: @ITChartEvents] OnResize
      * Called when Chart is resized
               METHOD, 23, @OnResize
      *[Class: @ITChartEvents] OnScroll
      * Called when Chart is scrolled
               METHOD, 24, @OnScroll
      *[Class: @ITChartEvents] OnStartDrag
      * Occurs when the user begins to drag the control or an object it contains 
               METHOD, 25, @OnStartDrag
      *[Class: @ITChartEvents] OnUndoZoom
      * Called when Chart is unzoomed (drag from bottom/right to top/left)
               METHOD, 26, @OnUndoZoom
      *[Class: @ITChartEvents] OnZoom
      * Called when Chart is zoomed (draw from top/left to bottom/right)
               METHOD, 27, @OnZoom
      *[Class: @ITChartEvents] OnAllowScroll
      * Use to allow or cancel manual mouse scrolling
               METHOD, 2, @OnAllowScroll,
                   "EAxisType" @Axis, TYPE 3,
                   "double*" @AMin, TYPE 16389,
                   "double*" @AMax, TYPE 16389,
                   "boolean*" @AllowScroll, TYPE 16395
      *[Class: @ITChartEvents] OnGetLegendPos
      * Use to specify each Legend item position
               METHOD, 15, @OnGetLegendPos,
                   "long" @ItemIndex, TYPE 3,
                   "long*" @X, TYPE 16387,
                   "long*" @Y, TYPE 16387,
                   "long*" @XColor, TYPE 16387
      *[Class: @ITChartEvents] OnGetLegendText
      * Use to specify each Legend item text
               METHOD, 17, @OnGetLegendText,
                   "long" @LegendStyle, TYPE 3,
                   "long" @ValueIndex, TYPE 3,
                   "BSTR*" @LegendText, TYPE 16392
      *[Class: @ITChartEvents] OnDatabaseRecord
      * Called after a database record has been retrieved and added to Series
               METHOD, 28, @OnDatabaseRecord,
                   "long" @SeriesIndex, TYPE 3,
                   "long" @Index, TYPE 3,
                   "boolean*" @StopRetrieve, TYPE 16395
      *[Class: @ITChartEvents] OnTimer
      * Called at every TimerInterval / TimerEnabled
               METHOD, 31, @OnTimer
      *[Class: @ITChartEvents] OnGetSeriesMark
      * Offers access to modify Point's Mark Text
               METHOD, 32, @OnGetSeriesMark,
                   "long" @SeriesIndex, TYPE 3,
                   "long" @ValueIndex, TYPE 3,
                   "BSTR*" @MarkText, TYPE 16392
      *[Class: @ITChartEvents] OnGetSeriesPointerStyle
      * Offers access to modify Pointer.Style
               METHOD, 33, @OnGetSeriesPointerStyle,
                   "long" @SeriesIndex, TYPE 3,
                   "long" @ValueIndex, TYPE 3,
                   "EPointerStyle*" @AStyle, TYPE 16387
      *[Class: @ITChartEvents] OnGetSeriesContourLevel
      * Use to set each Level value for a Contour Series
               METHOD, 34, @OnGetSeriesContourLevel,
                   "long" @SeriesIndex, TYPE 3,
                   "long" @LevelIndex, TYPE 3,
                   "double*" @LevelValue, TYPE 16389,
                   "OLE_COLOR*" @LevelColor, TYPE 16403
      *[Class: @ITChartEvents] OnBeforeDrawChart
      * Called before Walls are displayed
               METHOD, 39, @OnBeforeDrawChart
      *[Class: @ITChartEvents] OnSeriesBeforeDrawValues
      * Called just before Chart Series are painted
               METHOD, 36, @OnSeriesBeforeDrawValues,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @ITChartEvents] OnSeriesAfterDrawValues
      * Called just after Chart Series are painted
               METHOD, 35, @OnSeriesAfterDrawValues,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @ITChartEvents] OnMarkTipToolGetText
      * Modify ToolTip item text
               METHOD, 37, @OnMarkTipToolGetText,
                   "long" @Tool, TYPE 3,
                   "BSTR*" @Text, TYPE 16392
      *[Class: @ITChartEvents] OnCursorToolChange
      * Called when Tool moved
               METHOD, 40, @OnCursorToolChange,
                   "long" @Tool, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "double" @XVal, TYPE 5,
                   "double" @YVal, TYPE 5,
                   "long" @Series, TYPE 3,
                   "long" @ValueIndex, TYPE 3
      *[Class: @ITChartEvents] OnDrawLineToolLineDrag
      * Called when DrawLine Tool line is dragged
               METHOD, 41, @OnDrawLineToolLineDrag
      *[Class: @ITChartEvents] OnDrawLineToolNewLine
      * Called when new DrawLine Tool line is drawn
               METHOD, 42, @OnDrawLineToolNewLine
      *[Class: @ITChartEvents] OnDrawLineToolDraggedLine
      * Called when DrawLine Tool line has been dragged
               METHOD, 43, @OnDrawLineToolDraggedLine
      *[Class: @ITChartEvents] OnDrawLineToolSelectLine
      * Called when DrawLine Tool line selected
               METHOD, 44, @OnDrawLineToolSelectLine
      *[Class: @ITChartEvents] OnCalendarSeriesChange
      * Called when Calender Series cell focus is changed
               METHOD, 38, @OnCalendarSeriesChange,
                   "long" @Series, TYPE 3,
                   "double" @Value, TYPE 5
      *[Class: @ITChartEvents] OnSeriesBeforeAdd
      * Called before adding a Series point
               METHOD, 45, @OnSeriesBeforeAdd,
                   "long" @SeriesIndex, TYPE 3,
                   "boolean*" @MoreValues, TYPE 16395
      *[Class: @ITChartEvents] OnMouseEnterSeries
      * Event called when mouse cursor "enters" into any point of the series
               METHOD, 201, @OnMouseEnterSeries,
                   "long" @SeriesIndex, TYPE 3
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnMouseLeaveSeries
      * Event called when mouse cursor "leaves" (exists) from any point of the 
               METHOD, 202, @OnMouseLeaveSeries,
                   "long" @SeriesIndex, TYPE 3
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnSeriesContourBeforeDrawLevel
      * Called just before drawing each level segments.
               METHOD, 203, @OnSeriesContourBeforeDrawLevel,
                   "long" @SeriesIndex, TYPE 3,
                   "long" @LevelIndex, TYPE 3
      *[Class: @ITChartEvents] OnSeriesAnimationToolStep
      * Called at each animation step.
               METHOD, 204, @OnSeriesAnimationToolStep,
                   "long" @Tool, TYPE 3,
                   "long" @Step, TYPE 3
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnGanttToolDragBar
               METHOD, 205, @OnGanttToolDragBar,
                   "long" @Tool, TYPE 3,
                   "long" @GanttBar, TYPE 3
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnGanttToolResizeBar
               METHOD, 206, @OnGanttToolResizeBar,
                   "long" @Tool, TYPE 3,
                   "long" @GanttBar, TYPE 3,
                   "EGanttToolPartBar" @BarPart, TYPE 3
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnFunctionCalculate
      * The StartX property determines the first "X" value to use, and the 
               METHOD, 207, @OnFunctionCalculate,
                   "long" @SeriesIndex, TYPE 3,
                   "double" @X, TYPE 5,
                   "double*" @Y, TYPE 16389
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnCompressFunctionGetDate
      * Called by the compression function to give the application the 
               METHOD, 208, @OnCompressFunctionGetDate,
                   "long" @FunctionSeriesIndex, TYPE 3,
                   "long" @SourceSeriesIndex, TYPE 3,
                   "long" @ValueIndex, TYPE 3,
                   "DATE*" @D, TYPE 16391
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnGaugeChange
      * Called when the gauge Value property is changed.
               METHOD, 209, @OnGaugeChange,
                   "long" @SeriesIndex, TYPE 3
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnNearestToolChange
      * Triggers when Nearest Point changes
               METHOD, 210, @OnNearestToolChange
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnBeforePrint
      * Event called just before print
               METHOD, 211, @OnBeforePrint
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnKeyDown
      * Triggered on keydown when Chart has focus
               METHOD, 212, @OnKeyDown,
                   "long" @KeyCode, TYPE 3,
                   "EShiftState" @Shift, TYPE 3
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnKeyUp
      * Triggered on keyup when Chart has focus
               METHOD, 213, @OnKeyUp,
                   "long" @KeyCode, TYPE 3,
                   "EShiftState" @Shift, TYPE 3
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnLegendScrollBarToolScrolled
      * Triggered when the Legend scroll bar is scrolled
               METHOD, 214, @OnLegendScrollBarToolScrolled
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnSurfaceNearestToolSelectCell
      * Triggered moving the mouse over the series
               METHOD, 215, @OnSurfaceNearestToolSelectCell
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnDrawAxisLabel
      * On Draw axis label event
               METHOD, 216, @OnDrawAxisLabel,
                   "long" @Axis, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "BSTR*" @LabelText, TYPE 16392
      *[Class: @ITChartEvents] OnLegendDrawSymbol
               METHOD, 217, @OnLegendDrawSymbol,
                   "long" @Series, TYPE 3,
                   "long" @ValueIndex, TYPE 3,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @ITChartEvents] OnColorBandToolClick
      * Click event for ColorBand Tool
               METHOD, 218, @OnColorBandToolClick,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnRotateToolRotate
      * Triggered when the Chart is rotated
               METHOD, 219, @OnRotateToolRotate
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnColorLineToolBeginDragLine
      * Triggered when the ColorLine es starting to drag
               METHOD, 220, @OnColorLineToolBeginDragLine
      *[Class: @ITChartEvents] OnColorLineToolDragLine
      * Triggered while the ColorLine tool is dragged
               METHOD, 221, @OnColorLineToolDragLine
      *[Class: @ITChartEvents] OnColorLineToolEndDragLine
      * Triggered when the ColorLineTool end the drag
               METHOD, 222, @OnColorLineToolEndDragLine
      *[Class: @ITChartEvents] OnDragPointToolDragPoint
      * Triggered when a Point is Dragged.
               METHOD, 223, @OnDragPointToolDragPoint,
                   "long" @Index, TYPE 3
      *[Class: @ITChartEvents] OnDrawLineToolSelecting
      * Triggered when a Line is selected
               METHOD, 224, @OnDrawLineToolSelecting,
                   "long" @Index, TYPE 3,
                   "boolean" @AllowSelect, TYPE 11
      *[Class: @ITChartEvents] OnSelectorToolDragged
      * Triggered when Selector Tools is dragged
               METHOD, 225, @OnSelectorToolDragged
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnSelectorToolDragging
      * Triggered when Selector Tool is dragging
               METHOD, 226, @OnSelectorToolDragging
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnSelectorToolResized
      * Triggered when Selector Tool is resized
               METHOD, 227, @OnSelectorToolResized
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnSelectorToolResizing
      * Triggered when Selector Tool is resizing
               METHOD, 228, @OnSelectorToolResizing
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnSelectorToolSelected
      * Triggered when Selector Tool is selected
               METHOD, 229, @OnSelectorToolSelected
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnAnnotationToolClick
      * Called when mouse clicking the Annotation tool
               METHOD, 230, @OnAnnotationToolClick,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITChartEvents] OnRectangleToolDragging
      * Called when Rectangle is dragged
               METHOD, 231, @OnRectangleToolDragging
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnRectangleToolResizing
      * Called when Rectangle is Resized
               METHOD, 232, @OnRectangleToolResizing
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITChartEvents] OnRectangleToolClick
      * Called when Rectangle is Clicked
               METHOD, 233, @OnRectangleToolClick,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
           
      * TeeChart Pro Activex control v7
           
      *** Primary Interface ***
           
      * TChart
           CLASS @TChart
               CLSID, FAB9B41C-87D6-474D-AB7E-F07D78F2422E
               NAME, "TChart"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "ITChart"
               DEFAULT-SOURCE, "4A7A617A-4BF1-4A01-B9B5-36D937882795"
      *[Class: @TChart] Aspect
      * General Chart viewing properties
               PROPERTY-GET, 1, @Aspect
                       RETURNING "IAspect*", TYPE 9
      *[Class: @TChart] Axis
      * Access to the 4 axes
               PROPERTY-GET, 2, @Axis
                       RETURNING "IAxes*", TYPE 9
      *[Class: @TChart] Canvas
      * Drawing attributes and functions
               PROPERTY-GET, 3, @Canvas
                       RETURNING "ICanvas*", TYPE 9
      *[Class: @TChart] ClipPoints
      * Restrict the drawing of Series points to within Chart boundaries
               PROPERTY-GET, 4, @ClipPoints
                       RETURNING "boolean", TYPE 11
      *[Class: @TChart] ClipPoints
      * Restrict the drawing of Series points to within Chart boundaries
               PROPERTY-PUT, 4, @ClipPoints,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TChart] Cursor
      * Defines the Chart cursor
               PROPERTY-GET, 5, @Cursor
                       RETURNING "short", TYPE 2
      *[Class: @TChart] Cursor
      * Defines the Chart cursor
               PROPERTY-PUT, 5, @Cursor,
                   "short (Property_Value)", TYPE 2
      *[Class: @TChart] DragCursor
      * Changes the cursor image presented when the control is being dragged.
               PROPERTY-GET, 6, @DragCursor
                       RETURNING "short", TYPE 2
      *[Class: @TChart] DragCursor
      * Changes the cursor image presented when the control is being dragged.
               PROPERTY-PUT, 6, @DragCursor,
                   "short (Property_Value)", TYPE 2
      *[Class: @TChart] DragMode
      * Controls when the user can drag the control.
               PROPERTY-GET, 7, @DragMode
                       RETURNING "EDragMode", TYPE 3
      *[Class: @TChart] DragMode
      * Controls when the user can drag the control.
               PROPERTY-PUT, 7, @DragMode,
                   "EDragMode (Property_Value)", TYPE 3
      *[Class: @TChart] Enabled
      * Enables/Disables the TChart.
               PROPERTY-GET, 8, @Enabled
                       RETURNING "boolean", TYPE 11
      *[Class: @TChart] Enabled
      * Enables/Disables the TChart.
               PROPERTY-PUT, 8, @Enabled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TChart] Export
      * Chart exporting methods
               PROPERTY-GET, 9, @Export
                       RETURNING "IExport*", TYPE 9
      *[Class: @TChart] Footer
      * Chart Footer text and attributes
               PROPERTY-GET, 10, @Footer
                       RETURNING "ITitles*", TYPE 9
      *[Class: @TChart] Frame
      * Pen used to draw a frame around chart axis
               PROPERTY-GET, 11, @Frame
                       RETURNING "IPen*", TYPE 9
      *[Class: @TChart] Header
      * Chart Header text and attributes
               PROPERTY-GET, 22, @Header
                       RETURNING "ITitles*", TYPE 9
      *[Class: @TChart] Height
      * Height of overall Chart panel
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @TChart] Height
      * Height of overall Chart panel
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @TChart] Import
      * Chart importing methods
               PROPERTY-GET, 13, @Import
                       RETURNING "IImport*", TYPE 9
      *[Class: @TChart] Left
      * Left position of overall Chart panel
               PROPERTY-GET, 14, @Left
                       RETURNING "long", TYPE 3
      *[Class: @TChart] Left
      * Left position of overall Chart panel
               PROPERTY-PUT, 14, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @TChart] Legend
      * Rectangle of Series Titles or Values
               PROPERTY-GET, 15, @Legend
                       RETURNING "ILegend*", TYPE 9
      *[Class: @TChart] Page
      * Page formatting of multipage Charts
               PROPERTY-GET, 16, @Page
                       RETURNING "IPage*", TYPE 9
      *[Class: @TChart] Panel
      * Access to Chart Panel attributes
               PROPERTY-GET, 17, @Panel
                       RETURNING "IPanel*", TYPE 9
      *[Class: @TChart] Printer
      * Chart printing methods and properties
               PROPERTY-GET, 18, @Printer
                       RETURNING "IPrinter*", TYPE 9
      *[Class: @TChart] Scroll
      * Properties to control Chart scroll
               PROPERTY-GET, 19, @Scroll
                       RETURNING "IScroll*", TYPE 9
      *[Class: @TChart] aSeries
      * Deprecated. To support prior versions only - Access Series Collection
               PROPERTY-GET, 20, @aSeries,
                   "long" @SeriesIndex, TYPE 3
                       RETURNING "ISeries*", TYPE 9
      *[Class: @TChart] SeriesCount
      * Number of Series in Chart
               PROPERTY-GET, 21, @SeriesCount
                       RETURNING "long", TYPE 3
      *[Class: @TChart] Top
      * Overall Chart Panel Top position
               PROPERTY-GET, 23, @Top
                       RETURNING "long", TYPE 3
      *[Class: @TChart] Top
      * Overall Chart Panel Top position
               PROPERTY-PUT, 23, @Top,
                   "long (Property_Value)", TYPE 3
      *[Class: @TChart] Visible
      * Controls the visibility of the control at runtime.
               PROPERTY-GET, 24, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @TChart] Visible
      * Controls the visibility of the control at runtime.
               PROPERTY-PUT, 24, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TChart] Walls
      * The Chart bounding box sides
               PROPERTY-GET, 25, @Walls
                       RETURNING "IWalls*", TYPE 9
      *[Class: @TChart] Width
      * Overall Chart Panel Width
               PROPERTY-GET, 26, @Width
                       RETURNING "long", TYPE 3
      *[Class: @TChart] Width
      * Overall Chart Panel Width
               PROPERTY-PUT, 26, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @TChart] Zoom
      * Properties to control Chart zoom
               PROPERTY-GET, 27, @Zoom
                       RETURNING "IZoom*", TYPE 9
      *[Class: @TChart] AboutBox
      * About TeeChart Pro Activex...
               METHOD, -552, @AboutBox
      *[Class: @TChart] AddSeries
      * Adds a new Series to the Chart
               METHOD, 28, @AddSeries,
                   "ESeriesClass" @SeriesClass, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @TChart] ChangeSeriesType
      * Changes an existing Series from one type to another
               METHOD, 29, @ChangeSeriesType,
                   "long" @SeriesIndex, TYPE 3,
                   "ESeriesClass" @NewSeriesType, TYPE 3
      *[Class: @TChart] CloneSeries
      * Duplicates a Series and values
               METHOD, 30, @CloneSeries,
                   "long" @SourceSeriesIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @TChart] Draw
      * Draws Chart on a custom Windows handle DC (device context)
               METHOD, 31, @Draw,
                   "long" @DC, TYPE 3,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @TChart] ExchangeSeries
      * Interchanges Series Z positions
               METHOD, 32, @ExchangeSeries,
                   "long" @Series1, TYPE 3,
                   "long" @Series2, TYPE 3
      *[Class: @TChart] GetDateTimeStep
      * Returns the corresponding floating value for a DateTimeStep constant
               METHOD, 33, @GetDateTimeStep,
                   "EDateTimeStep" @DateTimeStep, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @TChart] GetFreeSeriesColor
      * Gets as yet unused Series Color from Default Color Palette
               METHOD, 34, @GetFreeSeriesColor,
                   "boolean" @CheckBackgroundColor, TYPE 11
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @TChart] GetLabelsSeries
      * Series associated with Axis for labelling
               METHOD, 35, @GetLabelsSeries,
                   "EAxisType" @DestAxis, TYPE 3
                       RETURNING "ISeries*", TYPE 9
      *[Class: @TChart] IsFreeSeriesColor
      * TRUE if AColor is not used by a Series
               METHOD, 36, @IsFreeSeriesColor,
                   "OLE_COLOR" @AColor, TYPE 19,
                   "boolean" @CheckBackgroundColor, TYPE 11
                       RETURNING "boolean", TYPE 11
      *[Class: @TChart] RemoveAllSeries
      * Removes all Series from Chart
               METHOD, 37, @RemoveAllSeries
      *[Class: @TChart] RemoveSeries
      * Removes SeriesIndexth Series from the Chart
               METHOD, 38, @RemoveSeries,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @TChart] Repaint
      * Forces Chart screen update
               METHOD, 39, @Repaint
      *[Class: @TChart] SeriesTitleLegend
      * Returns the Series title for the Legend
               METHOD, 40, @SeriesTitleLegend,
                   "long" @ASeriesIndex, TYPE 3
                       RETURNING "BSTR", TYPE 8
      *[Class: @TChart] ShowEditor
      * Runs the Chart editor dialog
               METHOD, 41, @ShowEditor,
                   "long" @SeriesIndex, TYPE 3
                       OPTIONAL 1
      *[Class: @TChart] StopMouse
      * Call to stop processing mouse clicks in OnClick... events
               METHOD, 42, @StopMouse
      *[Class: @TChart] TimerEnabled
      * Enables/Disables the TChart timer.
               PROPERTY-GET, 43, @TimerEnabled
                       RETURNING "boolean", TYPE 11
      *[Class: @TChart] TimerEnabled
      * Enables/Disables the TChart timer.
               PROPERTY-PUT, 43, @TimerEnabled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TChart] TimerInterval
      * Sets the timer interval (milliseconds).
               PROPERTY-GET, 44, @TimerInterval
                       RETURNING "long", TYPE 3
      *[Class: @TChart] TimerInterval
      * Sets the timer interval (milliseconds).
               PROPERTY-PUT, 44, @TimerInterval,
                   "long (Property_Value)", TYPE 3
      *[Class: @TChart] AutoRepaint
      * Permits disable of Chart Repaint
               PROPERTY-GET, 45, @AutoRepaint
                       RETURNING "boolean", TYPE 11
      *[Class: @TChart] AutoRepaint
      * Permits disable of Chart Repaint
               PROPERTY-PUT, 45, @AutoRepaint,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TChart] EditOneSeries
      * Edit Indexth Chart Series
               METHOD, 46, @EditOneSeries,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @TChart] Environment
      * TeeChart environment variables
               PROPERTY-GET, 47, @Environment
                       RETURNING "IEnvironment*", TYPE 9
      *[Class: @TChart] ChartLink
      * For internal use to connect to other Tee controls
               PROPERTY-GET, 48, @ChartLink
                       RETURNING "long", TYPE 3
      *[Class: @TChart] MousePosition
      * Returns the current mouse position in pixels relative to the Chart panel 
               PROPERTY-GET, 49, @MousePosition
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @TChart] ChartRect
      * Permits location of Chart painted output within Chart Panel
               METHOD, 50, @ChartRect,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @TChart] Tools
      * Accesses Tool attributes.
               PROPERTY-GET, 51, @Tools
                       RETURNING "IToolList*", TYPE 9
      *[Class: @TChart] SubHeader
      * Chart SubHeader text and attributes.
               PROPERTY-GET, 52, @SubHeader
                       RETURNING "ITitles*", TYPE 9
      *[Class: @TChart] SubFooter
      * Chart SubFooter text and attributes.
               PROPERTY-GET, 53, @SubFooter
                       RETURNING "ITitles*", TYPE 9
      *[Class: @TChart] ClearChart
      * Clears Chart of all data and modifications
               METHOD, 55, @ClearChart
      *[Class: @TChart] RefreshData
      * Refreshes the Series Data
               METHOD, 54, @RefreshData
      *[Class: @TChart] Series
      * Access the Chart Series Collection
               METHOD, 56, @Series,
                   "long" @SeriesIndex, TYPE 3
                       RETURNING "ISeries*", TYPE 9
      *[Class: @TChart] ShowThemesEditor
      * Show Theme Editor
               METHOD, 201, @ShowThemesEditor
      *[Class: @TChart] SetTheme
      * Apply Theme to Chart
               METHOD, 202, @SetTheme,
                   "EChartTheme" @aTheme, TYPE 3,
                   "EColorPalette" @aPalette, TYPE 3
      *[Class: @TChart] ApplyPalette
      * Apply Predefined Color Palette
               METHOD, 203, @ApplyPalette,
                   "EColorPalette" @paletteIndex, TYPE 3
      *[Class: @TChart] ApplyCustomPalette
      * Apply Custom Color Palette
               METHOD, 204, @ApplyCustomPalette,
                   "VARIANT" @colorArray, TYPE 12
      *[Class: @TChart] SeriesList
      * Chart SeriesList and atributes
               PROPERTY-GET, 205, @SeriesList
                       RETURNING "ISeriesList*", TYPE 9
      *[Class: @TChart] Hint
               PROPERTY-GET, 206, @Hint
                       RETURNING "BSTR", TYPE 8
      *[Class: @TChart] Hint
               PROPERTY-PUT, 206, @Hint,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @TChart] ShowHint
               PROPERTY-GET, 207, @ShowHint
                       RETURNING "boolean", TYPE 11
      *[Class: @TChart] ShowHint
               PROPERTY-PUT, 207, @ShowHint,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TChart] OnAfterDraw
      * Called when chart has finished drawing. Use to custom draw.
               EVENT, 1, @TChartOnAfterDraw
      *            No Parameters
      *[Class: @TChart] OnBeforeDrawSeries
      * Called before Series are displayed (after axis are shown)
               EVENT, 29, @TChartOnBeforeDrawSeries
      *            No Parameters
      *[Class: @TChart] OnBeforeDrawAxes
      * Called before Axes are displayed
               EVENT, 30, @TChartOnBeforeDrawAxes
      *            No Parameters
      *[Class: @TChart] OnClick
      * Called when mouse clicking the Chart
               EVENT, 3, @TChartOnClick
      *            No Parameters
      *[Class: @TChart] OnClickAxis
      * Called when mouse clicking near a Chart axis
               EVENT, 4, @TChartOnClickAxis
      *            5 Parameters
      *                "long Axis"
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnClickBackground
      * Called when mouse is clicked on an empty background Chart area
               EVENT, 5, @TChartOnClickBackground
      *            4 Parameters
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnClickLegend
      * Called when mouse clicking the Chart Legend
               EVENT, 6, @TChartOnClickLegend
      *            4 Parameters
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnClickSeries
      * Called when mouse clicking a Series point
               EVENT, 7, @TChartOnClickSeries
      *            6 Parameters
      *                "long SeriesIndex"
      *                "long ValueIndex"
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnDblClick
      * Called when double clicking a Chart
               EVENT, 8, @TChartOnDblClick
      *            No Parameters
      *[Class: @TChart] OnDragDrop
      * Occurs when the user drops an object being dragged.
               EVENT, 9, @TChartOnDragDrop
      *            2 Parameters
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnDragOver
      * Occurs when the user drags an object over a TChart.
               EVENT, 10, @TChartOnDragOver
      *            4 Parameters
      *                "long X"
      *                "long Y"
      *                "EDragState State"
      *                "boolean* Accept"
      *[Class: @TChart] OnEndDrag
      * Occurs when the dragging of an object ends, either by dropping the 
               EVENT, 11, @TChartOnEndDrag
      *            2 Parameters
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnEnter
      * Called when mouse cursor goes into Chart
               EVENT, 12, @TChartOnEnter
      *            No Parameters
      *[Class: @TChart] OnExit
      * Called when mouse cursor moves out of Chart
               EVENT, 13, @TChartOnExit
      *            No Parameters
      *[Class: @TChart] OnGetAxisLabel
      * Use to specify custom axis label's text
               EVENT, 14, @TChartOnGetAxisLabel
      *            4 Parameters
      *                "long Axis"
      *                "long SeriesIndex"
      *                "long ValueIndex"
      *                "BSTR* LabelText"
      *[Class: @TChart] OnGetLegendRect
      * Use to specify Legend dimensions and position
               EVENT, 16, @TChartOnGetLegendRect
      *            4 Parameters
      *                "long* Left"
      *                "long* Top"
      *                "long* Right"
      *                "long* Bottom"
      *[Class: @TChart] OnGetNextAxisLabel
      * Called when axis are drawing. Use to specify custom axis labels
               EVENT, 18, @TChartOnGetNextAxisLabel
      *            4 Parameters
      *                "long Axis"
      *                "long LabelIndex"
      *                "double* LabelValue"
      *                "boolean* MoreLabels"
      *[Class: @TChart] OnMouseDown
      * Called when user presses mouse button
               EVENT, 19, @TChartOnMouseDown
      *            4 Parameters
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnMouseMove
      * Called while user is moving the mouse
               EVENT, 20, @TChartOnMouseMove
      *            3 Parameters
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnMouseUp
      * Called when user depresses mouse button
               EVENT, 21, @TChartOnMouseUp
      *            4 Parameters
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnPageChange
      * Called when Chart.Page.Current changes
               EVENT, 22, @TChartOnPageChange
      *            No Parameters
      *[Class: @TChart] OnResize
      * Called when Chart is resized
               EVENT, 23, @TChartOnResize
      *            No Parameters
      *[Class: @TChart] OnScroll
      * Called when Chart is scrolled
               EVENT, 24, @TChartOnScroll
      *            No Parameters
      *[Class: @TChart] OnStartDrag
      * Occurs when the user begins to drag the control or an object it contains 
               EVENT, 25, @TChartOnStartDrag
      *            No Parameters
      *[Class: @TChart] OnUndoZoom
      * Called when Chart is unzoomed (drag from bottom/right to top/left)
               EVENT, 26, @TChartOnUndoZoom
      *            No Parameters
      *[Class: @TChart] OnZoom
      * Called when Chart is zoomed (draw from top/left to bottom/right)
               EVENT, 27, @TChartOnZoom
      *            No Parameters
      *[Class: @TChart] OnAllowScroll
      * Use to allow or cancel manual mouse scrolling
               EVENT, 2, @TChartOnAllowScroll
      *            4 Parameters
      *                "EAxisType Axis"
      *                "double* AMin"
      *                "double* AMax"
      *                "boolean* AllowScroll"
      *[Class: @TChart] OnGetLegendPos
      * Use to specify each Legend item position
               EVENT, 15, @TChartOnGetLegendPos
      *            4 Parameters
      *                "long ItemIndex"
      *                "long* X"
      *                "long* Y"
      *                "long* XColor"
      *[Class: @TChart] OnGetLegendText
      * Use to specify each Legend item text
               EVENT, 17, @TChartOnGetLegendText
      *            3 Parameters
      *                "long LegendStyle"
      *                "long ValueIndex"
      *                "BSTR* LegendText"
      *[Class: @TChart] OnDatabaseRecord
      * Called after a database record has been retrieved and added to Series
               EVENT, 28, @TChartOnDatabaseRecord
      *            3 Parameters
      *                "long SeriesIndex"
      *                "long Index"
      *                "boolean* StopRetrieve"
      *[Class: @TChart] OnTimer
      * Called at every TimerInterval / TimerEnabled
               EVENT, 31, @TChartOnTimer
      *            No Parameters
      *[Class: @TChart] OnGetSeriesMark
      * Offers access to modify Point's Mark Text
               EVENT, 32, @TChartOnGetSeriesMark
      *            3 Parameters
      *                "long SeriesIndex"
      *                "long ValueIndex"
      *                "BSTR* MarkText"
      *[Class: @TChart] OnGetSeriesPointerStyle
      * Offers access to modify Pointer.Style
               EVENT, 33, @TChartOnGetSeriesPointerStyle
      *            3 Parameters
      *                "long SeriesIndex"
      *                "long ValueIndex"
      *                "EPointerStyle* AStyle"
      *[Class: @TChart] OnGetSeriesContourLevel
      * Use to set each Level value for a Contour Series
               EVENT, 34, @TChartOnGetSeriesContourLevel
      *            4 Parameters
      *                "long SeriesIndex"
      *                "long LevelIndex"
      *                "double* LevelValue"
      *                "OLE_COLOR* LevelColor"
      *[Class: @TChart] OnBeforeDrawChart
      * Called before Walls are displayed
               EVENT, 39, @TChartOnBeforeDrawChart
      *            No Parameters
      *[Class: @TChart] OnSeriesBeforeDrawValues
      * Called just before Chart Series are painted
               EVENT, 36, @TChartOnSeriesBeforeDrawValues
      *            1 Parameter
      *                "long SeriesIndex"
      *[Class: @TChart] OnSeriesAfterDrawValues
      * Called just after Chart Series are painted
               EVENT, 35, @TChartOnSeriesAfterDrawValues
      *            1 Parameter
      *                "long SeriesIndex"
      *[Class: @TChart] OnMarkTipToolGetText
      * Modify ToolTip item text
               EVENT, 37, @TChartOnMarkTipToolGetText
      *            2 Parameters
      *                "long Tool"
      *                "BSTR* Text"
      *[Class: @TChart] OnCursorToolChange
      * Called when Tool moved
               EVENT, 40, @TChartOnCursorToolChange
      *            7 Parameters
      *                "long Tool"
      *                "long X"
      *                "long Y"
      *                "double XVal"
      *                "double YVal"
      *                "long Series"
      *                "long ValueIndex"
      *[Class: @TChart] OnDrawLineToolLineDrag
      * Called when DrawLine Tool line is dragged
               EVENT, 41, @TChartOnDrawLineToolLineDrag
      *            No Parameters
      *[Class: @TChart] OnDrawLineToolNewLine
      * Called when new DrawLine Tool line is drawn
               EVENT, 42, @TChartOnDrawLineToolNewLine
      *            No Parameters
      *[Class: @TChart] OnDrawLineToolDraggedLine
      * Called when DrawLine Tool line has been dragged
               EVENT, 43, @TChartOnDrawLineToolDraggedLine
      *            No Parameters
      *[Class: @TChart] OnDrawLineToolSelectLine
      * Called when DrawLine Tool line selected
               EVENT, 44, @TChartOnDrawLineToolSelectLine
      *            No Parameters
      *[Class: @TChart] OnCalendarSeriesChange
      * Called when Calender Series cell focus is changed
               EVENT, 38, @TChartOnCalendarSeriesChange
      *            2 Parameters
      *                "long Series"
      *                "double Value"
      *[Class: @TChart] OnSeriesBeforeAdd
      * Called before adding a Series point
               EVENT, 45, @TChartOnSeriesBeforeAdd
      *            2 Parameters
      *                "long SeriesIndex"
      *                "boolean* MoreValues"
      *[Class: @TChart] OnMouseEnterSeries
      * Event called when mouse cursor "enters" into any point of the series
               EVENT, 201, @TChartOnMouseEnterSeries
      *            1 Parameter
      *                "long SeriesIndex"
      *[Class: @TChart] OnMouseLeaveSeries
      * Event called when mouse cursor "leaves" (exists) from any point of the 
               EVENT, 202, @TChartOnMouseLeaveSeries
      *            1 Parameter
      *                "long SeriesIndex"
      *[Class: @TChart] OnSeriesContourBeforeDrawLevel
      * Called just before drawing each level segments.
               EVENT, 203, @TChartOnSeriesContourBeforeDrawLevel
      *            2 Parameters
      *                "long SeriesIndex"
      *                "long LevelIndex"
      *[Class: @TChart] OnSeriesAnimationToolStep
      * Called at each animation step.
               EVENT, 204, @TChartOnSeriesAnimationToolStep
      *            2 Parameters
      *                "long Tool"
      *                "long Step"
      *[Class: @TChart] OnGanttToolDragBar
               EVENT, 205, @TChartOnGanttToolDragBar
      *            2 Parameters
      *                "long Tool"
      *                "long GanttBar"
      *[Class: @TChart] OnGanttToolResizeBar
               EVENT, 206, @TChartOnGanttToolResizeBar
      *            3 Parameters
      *                "long Tool"
      *                "long GanttBar"
      *                "EGanttToolPartBar BarPart"
      *[Class: @TChart] OnFunctionCalculate
      * The StartX property determines the first "X" value to use, and the 
               EVENT, 207, @TChartOnFunctionCalculate
      *            3 Parameters
      *                "long SeriesIndex"
      *                "double X"
      *                "double* Y"
      *[Class: @TChart] OnCompressFunctionGetDate
      * Called by the compression function to give the application the 
               EVENT, 208, @TChartOnCompressFunctionGetDate
      *            4 Parameters
      *                "long FunctionSeriesIndex"
      *                "long SourceSeriesIndex"
      *                "long ValueIndex"
      *                "DATE* D"
      *[Class: @TChart] OnGaugeChange
      * Called when the gauge Value property is changed.
               EVENT, 209, @TChartOnGaugeChange
      *            1 Parameter
      *                "long SeriesIndex"
      *[Class: @TChart] OnNearestToolChange
      * Triggers when Nearest Point changes
               EVENT, 210, @TChartOnNearestToolChange
      *            No Parameters
      *[Class: @TChart] OnBeforePrint
      * Event called just before print
               EVENT, 211, @TChartOnBeforePrint
      *            No Parameters
      *[Class: @TChart] OnKeyDown
      * Triggered on keydown when Chart has focus
               EVENT, 212, @TChartOnKeyDown
      *            2 Parameters
      *                "long KeyCode"
      *                "EShiftState Shift"
      *[Class: @TChart] OnKeyUp
      * Triggered on keyup when Chart has focus
               EVENT, 213, @TChartOnKeyUp
      *            2 Parameters
      *                "long KeyCode"
      *                "EShiftState Shift"
      *[Class: @TChart] OnLegendScrollBarToolScrolled
      * Triggered when the Legend scroll bar is scrolled
               EVENT, 214, @TChartOnLegendScrollBarToolScrolled
      *            No Parameters
      *[Class: @TChart] OnSurfaceNearestToolSelectCell
      * Triggered moving the mouse over the series
               EVENT, 215, @TChartOnSurfaceNearestToolSelectCell
      *            No Parameters
      *[Class: @TChart] OnDrawAxisLabel
      * On Draw axis label event
               EVENT, 216, @TChartOnDrawAxisLabel
      *            4 Parameters
      *                "long Axis"
      *                "long X"
      *                "long Y"
      *                "BSTR* LabelText"
      *[Class: @TChart] OnLegendDrawSymbol
               EVENT, 217, @TChartOnLegendDrawSymbol
      *            6 Parameters
      *                "long Series"
      *                "long ValueIndex"
      *                "long Left"
      *                "long Top"
      *                "long Right"
      *                "long Bottom"
      *[Class: @TChart] OnColorBandToolClick
      * Click event for ColorBand Tool
               EVENT, 218, @TChartOnColorBandToolClick
      *            4 Parameters
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnRotateToolRotate
      * Triggered when the Chart is rotated
               EVENT, 219, @TChartOnRotateToolRotate
      *            No Parameters
      *[Class: @TChart] OnColorLineToolBeginDragLine
      * Triggered when the ColorLine es starting to drag
               EVENT, 220, @TChartOnColorLineToolBeginDragLine
      *            No Parameters
      *[Class: @TChart] OnColorLineToolDragLine
      * Triggered while the ColorLine tool is dragged
               EVENT, 221, @TChartOnColorLineToolDragLine
      *            No Parameters
      *[Class: @TChart] OnColorLineToolEndDragLine
      * Triggered when the ColorLineTool end the drag
               EVENT, 222, @TChartOnColorLineToolEndDragLine
      *            No Parameters
      *[Class: @TChart] OnDragPointToolDragPoint
      * Triggered when a Point is Dragged.
               EVENT, 223, @TChartOnDragPointToolDragPoint
      *            1 Parameter
      *                "long Index"
      *[Class: @TChart] OnDrawLineToolSelecting
      * Triggered when a Line is selected
               EVENT, 224, @TChartOnDrawLineToolSelecting
      *            2 Parameters
      *                "long Index"
      *                "boolean AllowSelect"
      *[Class: @TChart] OnSelectorToolDragged
      * Triggered when Selector Tools is dragged
               EVENT, 225, @TChartOnSelectorToolDragged
      *            No Parameters
      *[Class: @TChart] OnSelectorToolDragging
      * Triggered when Selector Tool is dragging
               EVENT, 226, @TChartOnSelectorToolDragging
      *            No Parameters
      *[Class: @TChart] OnSelectorToolResized
      * Triggered when Selector Tool is resized
               EVENT, 227, @TChartOnSelectorToolResized
      *            No Parameters
      *[Class: @TChart] OnSelectorToolResizing
      * Triggered when Selector Tool is resizing
               EVENT, 228, @TChartOnSelectorToolResizing
      *            No Parameters
      *[Class: @TChart] OnSelectorToolSelected
      * Triggered when Selector Tool is selected
               EVENT, 229, @TChartOnSelectorToolSelected
      *            No Parameters
      *[Class: @TChart] OnAnnotationToolClick
      * Called when mouse clicking the Annotation tool
               EVENT, 230, @TChartOnAnnotationToolClick
      *            4 Parameters
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TChart] OnRectangleToolDragging
      * Called when Rectangle is dragged
               EVENT, 231, @TChartOnRectangleToolDragging
      *            No Parameters
      *[Class: @TChart] OnRectangleToolResizing
      * Called when Rectangle is Resized
               EVENT, 232, @TChartOnRectangleToolResizing
      *            No Parameters
      *[Class: @TChart] OnRectangleToolClick
      * Called when Rectangle is Clicked
               EVENT, 233, @TChartOnRectangleToolClick
      *            4 Parameters
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
           
      * Drawing properties for frames and borders
           
      * IPen
           CLASS @IPen
               CLSID, 0206366D-7EF5-493A-AD64-92AE71E5D9E3
               NAME, "IPen"
      *[Class: @IPen] Color
      * Pen color
               PROPERTY-GET, 1, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IPen] Color
      * Pen color
               PROPERTY-PUT, 1, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IPen] Width
      * Pen width in pixels
               PROPERTY-GET, 2, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IPen] Width
      * Pen width in pixels
               PROPERTY-PUT, 2, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPen] Style
      * Pen style (solid, dash, dot, etc)
               PROPERTY-GET, 3, @Style
                       RETURNING "EChartPenStyle", TYPE 3
      *[Class: @IPen] Style
      * Pen style (solid, dash, dot, etc)
               PROPERTY-PUT, 3, @Style,
                   "EChartPenStyle (Property_Value)", TYPE 3
      *[Class: @IPen] Visible
      * Use / don't use this pen for drawing
               PROPERTY-GET, 4, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IPen] Visible
      * Use / don't use this pen for drawing
               PROPERTY-PUT, 4, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPen] EndStyle
      * Pen end detail style
               PROPERTY-GET, 5, @EndStyle
                       RETURNING "EPenEndStyle", TYPE 3
      *[Class: @IPen] EndStyle
      * Pen end detail style
               PROPERTY-PUT, 5, @EndStyle,
                   "EPenEndStyle (Property_Value)", TYPE 3
      *[Class: @IPen] ShowEditor
      * Shows a dialog to modify the current pen properties.
               METHOD, 201, @ShowEditor
      *[Class: @IPen] SmallSpace
               PROPERTY-GET, 202, @SmallSpace
                       RETURNING "long", TYPE 3
      *[Class: @IPen] SmallSpace
               PROPERTY-PUT, 202, @SmallSpace,
                   "long (Property_Value)", TYPE 3
           
      * Drawing filling properties
           
      * IBrush
           CLASS @IBrush
               CLSID, 7BAEFFF9-1361-46E7-9DFA-F90FF3C7E12C
               NAME, "IBrush"
      *[Class: @IBrush] Color
      * The color used to fill drawing shapes
               PROPERTY-GET, 1, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IBrush] Color
      * The color used to fill drawing shapes
               PROPERTY-PUT, 1, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IBrush] Style
      * The pattern style used to fill drawing shapes
               PROPERTY-GET, 2, @Style
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @IBrush] Style
      * The pattern style used to fill drawing shapes
               PROPERTY-PUT, 2, @Style,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @IBrush] LoadImage
      * Defines the image to be displayed as pattern for Brush area
               METHOD, 14, @LoadImage,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IBrush] AssignImage
      * Assign bitmap to Brush
               METHOD, 16, @AssignImage,
                   "long" @ImageHandle, TYPE 3
      *[Class: @IBrush] ClearImage
      * Clears the Brush image
               METHOD, 4, @ClearImage
      *[Class: @IBrush] ShowEditor
      * Shows a dialog to modify the current brush properties.
               METHOD, 201, @ShowEditor
           
      * Text collection for Chart Header,Footer and ShapeSeries
           
      * IStrings
           CLASS @IStrings
               CLSID, 7274F370-5842-4893-AA89-88DF48C4CAFB
               NAME, "IStrings"
      *[Class: @IStrings] ControlDefault
               PROPERTY-GET, 0, @ControlDefault,
                   "long" @Index, TYPE 3
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IStrings] ControlDefault
               PROPERTY-PUT, 0, @ControlDefault,
                   "long" @Index, TYPE 3,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IStrings] Count
      * Number of items in text collection
               METHOD, 1, @Count
                       RETURNING "long", TYPE 3
      *[Class: @IStrings] Item
      * Returns the text of Index item
               PROPERTY-GET, 2, @Item,
                   "long" @Index, TYPE 3
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IStrings] Item
      * Returns the text of Index item
               PROPERTY-PUT, 2, @Item,
                   "long" @Index, TYPE 3,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IStrings] Remove
      * Deletes Index text string from collection
               METHOD, 3, @Remove,
                   "long" @Index, TYPE 3
      *[Class: @IStrings] Clear
      * Removes all text items from collection
               METHOD, 4, @Clear
      *[Class: @IStrings] Add
      * Adds a new text item to collection
               METHOD, 5, @Add,
                   "VARIANT" @AItem, TYPE 12
                       RETURNING "long", TYPE 3
      *[Class: @IStrings] _NewEnum
               METHOD, -4, @_NewEnum
                       RETURNING "IUnknown*", TYPE 13
           
      * Chart custom drawing properties and methods
           
      * ICanvas
           CLASS @ICanvas
               CLSID, 41B85406-2390-4F28-9175-390DCB24DA8A
               NAME, "ICanvas"
      *[Class: @ICanvas] Brush
      * Color and pattern style to fill drawings
               PROPERTY-GET, 1, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ICanvas] Pen
      * Color, width and style of drawing lines
               PROPERTY-GET, 2, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICanvas] LineTo
      * Will draw a line from the present Pen position to the new co-ordinates
               METHOD, 3, @LineTo,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ICanvas] MoveTo
      * will move the Canvas cursor to the co-ordinate defined
               METHOD, 4, @MoveTo,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ICanvas] Rectangle
      * Will draw a rectangle between the defined co-ordinates
               METHOD, 5, @Rectangle,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @ICanvas] Font
      * The font attributes for TextOut and RotateLabel methods
               PROPERTY-GET, 6, @Font
                       RETURNING "IChartFont*", TYPE 9
      *[Class: @ICanvas] Arc
      * will draw an arc in the rectangle defined by the 4 co-ordinates
               METHOD, 7, @Arc,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @X2, TYPE 3,
                   "long" @Y2, TYPE 3,
                   "long" @X3, TYPE 3,
                   "long" @Y3, TYPE 3,
                   "long" @X4, TYPE 3,
                   "long" @Y4, TYPE 3
      *[Class: @ICanvas] Ellipse
      * will draw an ellipse between the 4 rectangle co-ordinates
               METHOD, 8, @Ellipse,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @X2, TYPE 3,
                   "long" @Y2, TYPE 3
      *[Class: @ICanvas] TextOut
      * Outputs Text at XY position using current Font attributes
               METHOD, 9, @TextOut,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "BSTR" @Text, TYPE 8
      *[Class: @ICanvas] TextHeight
      * Vertical size in pixels of the string "St" parameter
               METHOD, 10, @TextHeight,
                   "BSTR" @SomeText, TYPE 8
                       RETURNING "long", TYPE 3
      *[Class: @ICanvas] TextWidth
      * Horizontal size in pixels of string "St" parameter
               METHOD, 11, @TextWidth,
                   "BSTR" @SomeText, TYPE 8
                       RETURNING "long", TYPE 3
      *[Class: @ICanvas] ClipRectangle
      * Creates a clipping region in the Chart rectangle
               METHOD, 37, @ClipRectangle,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @ICanvas] UnClipRectangle
      * Removes any clipping region applied to Chart Canvas
               METHOD, 80, @UnClipRectangle
      *[Class: @ICanvas] RotateLabel
      * Draws a text string at specified xy coordinates with RotDegree rotation 
               METHOD, 70, @RotateLabel,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "BSTR" @St, TYPE 8,
                   "long" @RotDegree, TYPE 3
      *[Class: @ICanvas] IsScreenHighColor
      * Returns TRUE if video mode color depth > 256 colors
               METHOD, 47, @IsScreenHighColor
                       RETURNING "boolean", TYPE 11
      *[Class: @ICanvas] Top
      * Returns the chart top position in pixels
               PROPERTY-GET, 12, @Top
                       RETURNING "long", TYPE 3
      *[Class: @ICanvas] Left
      * Returns the chart left position in pixels
               PROPERTY-GET, 13, @Left
                       RETURNING "long", TYPE 3
      *[Class: @ICanvas] Width
      * Returns the chart bounding width in pixels
               PROPERTY-GET, 14, @Width
                       RETURNING "long", TYPE 3
      *[Class: @ICanvas] Height
      * Returns the chart bounding height in pixels
               PROPERTY-GET, 15, @Height
                       RETURNING "long", TYPE 3
      *[Class: @ICanvas] BackMode
      * Enables BackColor or for patterned brushes
               PROPERTY-GET, 16, @BackMode
                       RETURNING "ECanvasBackMode", TYPE 3
      *[Class: @ICanvas] BackMode
      * Enables BackColor or for patterned brushes
               PROPERTY-PUT, 16, @BackMode,
                   "ECanvasBackMode (Property_Value)", TYPE 3
      *[Class: @ICanvas] BackColor
      * Back Color when using non solid Brushes
               PROPERTY-GET, 17, @BackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICanvas] BackColor
      * Back Color when using non solid Brushes
               PROPERTY-PUT, 17, @BackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICanvas] SupportsFullRotation
      * Determine if Canvas can do rotation and elevation of more than 90 
               PROPERTY-GET, 18, @SupportsFullRotation
                       RETURNING "boolean", TYPE 11
      *[Class: @ICanvas] UseBuffer
      * Set buffered display
               PROPERTY-GET, 19, @UseBuffer
                       RETURNING "boolean", TYPE 11
      *[Class: @ICanvas] UseBuffer
      * Set buffered display
               PROPERTY-PUT, 19, @UseBuffer,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICanvas] Pie3D
      * Draw 3D Pie Slice
               METHOD, 20, @Pie3D,
                   "long" @XCenter, TYPE 3,
                   "long" @YCenter, TYPE 3,
                   "long" @XRadius, TYPE 3,
                   "long" @YRadius, TYPE 3,
                   "long" @Z0, TYPE 3,
                   "long" @Z1, TYPE 3,
                   "double" @StartAngle, TYPE 5,
                   "double" @EndAngle, TYPE 5,
                   "boolean" @DarkSides, TYPE 11,
                   "boolean" @DrawSides, TYPE 11
      *[Class: @ICanvas] LineWithZ
      * Draw Line in Z plane
               METHOD, 22, @LineWithZ,
                   "long" @X0, TYPE 3,
                   "long" @Y0, TYPE 3,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] MoveTo3D
      * Will move the Canvas cursor to the 3D co-ordinate defined
               METHOD, 23, @MoveTo3D,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] LineTo3D
      * Will draw a line from the present Pen position to the new 3D 
               METHOD, 24, @LineTo3D,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] Plane3D
      * Rectangle from (X0,Y0,Z0) to (X1,Y1,Z1)
               METHOD, 25, @Plane3D,
                   "long" @X0, TYPE 3,
                   "long" @Y0, TYPE 3,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @Z0, TYPE 3,
                   "long" @Z1, TYPE 3
      *[Class: @ICanvas] ZLine3D
      * Draws Line X,Y between two Z planes Z0 and Z1
               METHOD, 26, @ZLine3D,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "long" @Z0, TYPE 3,
                   "long" @Z1, TYPE 3
      *[Class: @ICanvas] RotateLabel3D
      * Draws a 3D rotated label at XYZ position. Depends on TextAlign 
               METHOD, 27, @RotateLabel3D,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "long" @Z, TYPE 3,
                   "BSTR" @St, TYPE 8,
                   "long" @RotDegree, TYPE 3
      *[Class: @ICanvas] TextAlign
      * Sets the alignment used when displaying text using TextOut or TextOut3D
               PROPERTY-GET, 28, @TextAlign
                       RETURNING "ECanvasTextAlign", TYPE 3
      *[Class: @ICanvas] TextAlign
      * Sets the alignment used when displaying text using TextOut or TextOut3D
               PROPERTY-PUT, 28, @TextAlign,
                   "ECanvasTextAlign (Property_Value)", TYPE 3
      *[Class: @ICanvas] VertLine3D
      * Draws vertical line from Top to Bottom at X on Z plane
               METHOD, 29, @VertLine3D,
                   "long" @X, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] HorizLine3D
      * Draws Horizontal Line from Left to Right at Y on Z plane
               METHOD, 30, @HorizLine3D,
                   "long" @Left, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Y, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] Cylinder
      * Draws cylinder
               METHOD, 31, @Cylinder,
                   "boolean" @Vertical, TYPE 11,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "long" @Z0, TYPE 3,
                   "long" @Z1, TYPE 3,
                   "boolean" @DarkCover, TYPE 11
      *[Class: @ICanvas] Cube
      * Draws cube between Planes Z0 and Z1
               METHOD, 32, @Cube,
                   "long" @Left, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "long" @Z0, TYPE 3,
                   "long" @Z1, TYPE 3,
                   "boolean" @DarkSides, TYPE 11
      *[Class: @ICanvas] EllipseWithZ
      * Draws Ellipse on Z Plane
               METHOD, 33, @EllipseWithZ,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @X2, TYPE 3,
                   "long" @Y2, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] PlaneWithZ
      * Draws Plane between 4 sets of co-ordinates on Z plane.
               METHOD, 34, @PlaneWithZ,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @X2, TYPE 3,
                   "long" @Y2, TYPE 3,
                   "long" @X3, TYPE 3,
                   "long" @Y3, TYPE 3,
                   "long" @X4, TYPE 3,
                   "long" @Y4, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] PlaneFour3D
      * Draws a polygon of four points. The first and second point  at  Z0 
               METHOD, 35, @PlaneFour3D,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @X2, TYPE 3,
                   "long" @Y2, TYPE 3,
                   "long" @X3, TYPE 3,
                   "long" @Y3, TYPE 3,
                   "long" @X4, TYPE 3,
                   "long" @Y4, TYPE 3,
                   "long" @Z0, TYPE 3,
                   "long" @Z1, TYPE 3
      *[Class: @ICanvas] RectangleWithZ
      * Draws Rectangle in plane Z
               METHOD, 36, @RectangleWithZ,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] RectangleZ
      * Vertical Rectangle from Top to Bottom at Z
               METHOD, 38, @RectangleZ,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "long" @Z0, TYPE 3,
                   "long" @Z1, TYPE 3
      *[Class: @ICanvas] TextOut3D
      * Writes Text to X,Y co-ordinate on Z plane
               METHOD, 39, @TextOut3D,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "long" @Z, TYPE 3,
                   "BSTR" @Text, TYPE 8
      *[Class: @ICanvas] TriangleWithZ
      * Draws a triangle of co-ordinates at Z position
               METHOD, 40, @TriangleWithZ,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @X2, TYPE 3,
                   "long" @Y2, TYPE 3,
                   "long" @X3, TYPE 3,
                   "long" @Y3, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] Frame3D
      * Draws Frame with colours to depict 3D
               METHOD, 41, @Frame3D,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "OLE_COLOR" @TopColor, TYPE 19,
                   "OLE_COLOR" @BottomColor, TYPE 19,
                   "long" @Width, TYPE 3
      *[Class: @ICanvas] EraseBackground
      * Clears background defined for rectangle
               METHOD, 42, @EraseBackground,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @ICanvas] GradientFill
      * Fills rectangle area with colour gradient between Start End colours
               METHOD, 43, @GradientFill,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "OLE_COLOR" @StartColor, TYPE 19,
                   "OLE_COLOR" @EndColor, TYPE 19,
                   "EGradientDirection" @Direction, TYPE 3
      *[Class: @ICanvas] Line
      * Draws Line between 2 points using current Pen
               METHOD, 44, @Line,
                   "long" @X0, TYPE 3,
                   "long" @Y0, TYPE 3,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3
      *[Class: @ICanvas] RectangleY
      * Horizontal Rectangle from Left to Right, from Z0 to Z1 position, at Top 
               METHOD, 45, @RectangleY,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Z0, TYPE 3,
                   "long" @Z1, TYPE 3
      *[Class: @ICanvas] Pixels3D
      * Set Pixel colour at X,Y,Z coordinate
               METHOD, 21, @Pixels3D,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "long" @Z, TYPE 3,
                   "OLE_COLOR" @Value, TYPE 19
      *[Class: @ICanvas] HandleDC
      * Returns the hDC Windows GDI Handle of Canvas
               PROPERTY-GET, 46, @HandleDC
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ICanvas] Cone
      * Draws a Cone
               METHOD, 50, @Cone,
                   "boolean" @Vertical, TYPE 11,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "long" @Z0, TYPE 3,
                   "long" @Z1, TYPE 3,
                   "boolean" @Dark3D, TYPE 11,
                   "long" @ConePercent, TYPE 3
      *[Class: @ICanvas] Sphere
      * Draws an Sphere
               METHOD, 48, @Sphere,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "long" @Z, TYPE 3,
                   "double" @Radius, TYPE 5
      *[Class: @ICanvas] Arrow
      * Draws a solid or outlined arrow
               METHOD, 49, @Arrow,
                   "boolean" @Filled, TYPE 11,
                   "long" @X0, TYPE 3,
                   "long" @Y0, TYPE 3,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @HeadWidth, TYPE 3,
                   "long" @HeadHeight, TYPE 3,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] Draw
      * Draws and displays at position (X, Y) objects such as icons, bitmaps, 
               METHOD, 51, @Draw,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3,
                   "IPicture*" @Image, TYPE 13
      *[Class: @ICanvas] RotationCenter
      * Sets the rotation center of a 3D TChart.
               PROPERTY-GET, 52, @RotationCenter
                       RETURNING "ITeePoint3D*", TYPE 9
      *[Class: @ICanvas] ChartXCenter
      * Returns the centre Horizontal co-ordinate of the Chart.
               PROPERTY-GET, 53, @ChartXCenter
                       RETURNING "long", TYPE 3
      *[Class: @ICanvas] ChartYCenter
      * Returns the centre Vertical co-ordinate of the Chart.
               PROPERTY-GET, 54, @ChartYCenter
                       RETURNING "long", TYPE 3
      *[Class: @ICanvas] GrayScale
      * Converts Canvas to GrayScale colours
               METHOD, 55, @GrayScale,
                   "boolean" @Inverted, TYPE 11
      *[Class: @ICanvas] Polyline
      * Draws multiple line segments joining all points in Points parameter
               METHOD, 201, @Polyline,
                   "long" @ArraySize, TYPE 3,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] RotatedEllipse
      * Draws an ellipse with a rotation angle (from 0 to 360 degrees)
               METHOD, 202, @RotatedEllipse,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "long" @Z, TYPE 3,
                   "double" @Angle, TYPE 5
      *[Class: @ICanvas] StretchDraw
      * Displays an image (Bitmap, JPEG, etc) at the specified rectangle
               METHOD, 203, @StretchDraw,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "IPicture*" @Image, TYPE 13
      *[Class: @ICanvas] StretchDrawZ
      * Displays an image (Bitmap, JPEG, etc) at the specified rectangle and Z 
               METHOD, 204, @StretchDrawZ,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "IPicture*" @Image, TYPE 13,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] Pie
               METHOD, 205, @Pie,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3,
                   "long" @X2, TYPE 3,
                   "long" @Y2, TYPE 3,
                   "long" @X3, TYPE 3,
                   "long" @Y3, TYPE 3,
                   "long" @X4, TYPE 3,
                   "long" @Y4, TYPE 3
      *[Class: @ICanvas] PolygonWithZ
      * Draws a 2D Polygon Z displacement
               METHOD, 56, @PolygonWithZ,
                   "long" @ArraySize, TYPE 3,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "long" @Z, TYPE 3
      *[Class: @ICanvas] UseAntiAlias
      * Default False. When set activates Chart Anti-alias
               PROPERTY-GET, 206, @UseAntiAlias
                       RETURNING "boolean", TYPE 11
      *[Class: @ICanvas] UseAntiAlias
      * Default False. When set activates Chart Anti-alias
               PROPERTY-PUT, 206, @UseAntiAlias,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICanvas] Polygon
      * Polygon from Array of points
               METHOD, 207, @Polygon,
                   "long" @NumPoints, TYPE 3,
                   "VARIANT" @Points, TYPE 12
      *[Class: @ICanvas] DrawBevel
      * Draw Bevel on Chart Canvas
               METHOD, 208, @DrawBevel,
                   "EPanelBevel" @Value, TYPE 3,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3,
                   "long" @Size, TYPE 3
      *[Class: @ICanvas] ApplyDark
      * ApplyDark for smooth Shadows
               METHOD, 209, @ApplyDark,
                   "OLE_COLOR" @Color, TYPE 19,
                   "long" @HowMuch, TYPE 3
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICanvas] DrawLine
      * Draws Line between 2 points using current Pen
               METHOD, 210, @DrawLine,
                   "long" @X0, TYPE 3,
                   "long" @Y0, TYPE 3,
                   "long" @X1, TYPE 3,
                   "long" @Y1, TYPE 3
           
      * Chart 3D and OpenGL attributes
           
      * IAspect
           CLASS @IAspect
               CLSID, 43882159-6120-4E12-A475-B5C476E0EC9E
               NAME, "IAspect"
      *[Class: @IAspect] ApplyZOrder
      * Draw each Series in a different Z position (back to front)
               PROPERTY-GET, 83, @ApplyZOrder
                       RETURNING "boolean", TYPE 11
      *[Class: @IAspect] ApplyZOrder
      * Draw each Series in a different Z position (back to front)
               PROPERTY-PUT, 83, @ApplyZOrder,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAspect] Chart3DPercent
      * Ratio between Chart dimension and depth. Only when Chart.View3D is True
               PROPERTY-GET, 9, @Chart3DPercent
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] Chart3DPercent
      * Ratio between Chart dimension and depth. Only when Chart.View3D is True
               PROPERTY-PUT, 9, @Chart3DPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAspect] Height3D
      * Returns the size in pixels of the vertical 3D effect
               PROPERTY-GET, 85, @Height3D
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] View3D
      * View Chart in 3D
               PROPERTY-GET, 30, @View3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IAspect] View3D
      * View Chart in 3D
               PROPERTY-PUT, 30, @View3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAspect] Width3D
      * Returns the size in pixels of the horizontal 3D effect
               PROPERTY-GET, 84, @Width3D
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] Rotation
      * Horizontal Chart rotation
               PROPERTY-GET, 1, @Rotation
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] Rotation
      * Horizontal Chart rotation
               PROPERTY-PUT, 1, @Rotation,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAspect] Elevation
      * Vertical Chart rotation
               PROPERTY-GET, 2, @Elevation
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] Elevation
      * Vertical Chart rotation
               PROPERTY-PUT, 2, @Elevation,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAspect] Zoom
      * Whole Chart zoom
               PROPERTY-GET, 4, @Zoom
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] Zoom
      * Whole Chart zoom
               PROPERTY-PUT, 4, @Zoom,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAspect] ZoomText
      * Set/disallow text to Zoom
               PROPERTY-GET, 3, @ZoomText
                       RETURNING "boolean", TYPE 11
      *[Class: @IAspect] ZoomText
      * Set/disallow text to Zoom
               PROPERTY-PUT, 3, @ZoomText,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAspect] HorizOffset
      * Move Chart left/right
               PROPERTY-GET, 6, @HorizOffset
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] HorizOffset
      * Move Chart left/right
               PROPERTY-PUT, 6, @HorizOffset,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAspect] VertOffset
      * Move Chart up/down
               PROPERTY-GET, 7, @VertOffset
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] VertOffset
      * Move Chart up/down
               PROPERTY-PUT, 7, @VertOffset,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAspect] Tilt
      * Tilt whole Chart
               PROPERTY-GET, 8, @Tilt
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] Tilt
      * Tilt whole Chart
               PROPERTY-PUT, 8, @Tilt,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAspect] Orthogonal
      * Set/disable orthogonal 3D representation
               PROPERTY-GET, 10, @Orthogonal
                       RETURNING "boolean", TYPE 11
      *[Class: @IAspect] Orthogonal
      * Set/disable orthogonal 3D representation
               PROPERTY-PUT, 10, @Orthogonal,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAspect] Perspective
      * Perspective percent
               PROPERTY-GET, 11, @Perspective
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] Perspective
      * Perspective percent
               PROPERTY-PUT, 11, @Perspective,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAspect] OpenGL
      * OpenGL 3D photorealistic rendering
               PROPERTY-GET, 5, @OpenGL
                       RETURNING "ITeeOpenGL*", TYPE 9
      *[Class: @IAspect] OrthoAngle
      * Defines the angle by which the TChart is rotated in Orthagonal  Mode.
               PROPERTY-GET, 12, @OrthoAngle
                       RETURNING "long", TYPE 3
      *[Class: @IAspect] OrthoAngle
      * Defines the angle by which the TChart is rotated in Orthagonal  Mode.
               PROPERTY-PUT, 12, @OrthoAngle,
                   "long (Property_Value)", TYPE 3
           
      * Groups the four Chart axis ( Left,Top,Right and Bottom )
           
      * IAxes
           CLASS @IAxes
               CLSID, 325EE6EB-286D-49D4-B169-2D2B027E9754
               NAME, "IAxes"
      *[Class: @IAxes] Left
      * The left Chart axis object
               PROPERTY-GET, 1, @Left
                       RETURNING "IAxis*", TYPE 9
      *[Class: @IAxes] Right
      * The right Chart axis object
               PROPERTY-GET, 2, @Right
                       RETURNING "IAxis*", TYPE 9
      *[Class: @IAxes] Top
      * The top Chart axis object
               PROPERTY-GET, 3, @Top
                       RETURNING "IAxis*", TYPE 9
      *[Class: @IAxes] Bottom
      * The bottom Chart axis object
               PROPERTY-GET, 4, @Bottom
                       RETURNING "IAxis*", TYPE 9
      *[Class: @IAxes] Visible
      * Show / hides all axis
               PROPERTY-GET, 10, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxes] Visible
      * Show / hides all axis
               PROPERTY-PUT, 10, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxes] Depth
      * The Depth Chart axis object
               PROPERTY-GET, 5, @Depth
                       RETURNING "IAxis*", TYPE 9
      *[Class: @IAxes] DrawAxesBeforeSeries
      * Place Axes above or below Series
               PROPERTY-GET, 6, @DrawAxesBeforeSeries
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxes] DrawAxesBeforeSeries
      * Place Axes above or below Series
               PROPERTY-PUT, 6, @DrawAxesBeforeSeries,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxes] AddCustom
      * Add a new Custom Axis
               METHOD, 7, @AddCustom,
                   "boolean" @IsHorizontal, TYPE 11
                       RETURNING "long", TYPE 3
      *[Class: @IAxes] Custom
      * Access Custom Axes' properties
               PROPERTY-GET, 8, @Custom,
                   "long" @CustomAxisIndex, TYPE 3
                       RETURNING "IAxis*", TYPE 9
      *[Class: @IAxes] CustomCount
      * Returns count of Custom Axes
               PROPERTY-GET, 9, @CustomCount
                       RETURNING "long", TYPE 3
      *[Class: @IAxes] RemoveCustom
      * Removes Custom Axis of Index 'CustomAxisIndex'.
               METHOD, 11, @RemoveCustom,
                   "long" @CustomAxisIndex, TYPE 3
      *[Class: @IAxes] RemoveAllCustom
      * Removes all Custom Axes.
               METHOD, 12, @RemoveAllCustom
      *[Class: @IAxes] DepthTop
      * The DepthTop Chart axis object
               PROPERTY-GET, 201, @DepthTop
                       RETURNING "IAxis*", TYPE 9
      *[Class: @IAxes] FastCalc
               PROPERTY-GET, 202, @FastCalc
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxes] FastCalc
               PROPERTY-PUT, 202, @FastCalc,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxes] SetIsometric
      * Set input Axes Grid to Isometric
               METHOD, 203, @SetIsometric,
                   "long" @aVertical, TYPE 3,
                   "long" @aHorizontal, TYPE 3
           
      * Chart Left,Top,Right and Bottom Axes attributes
           
      * IAxis
           CLASS @IAxis
               CLSID, 020D9207-BAF7-4BC9-B7A5-1A1426E933A5
               NAME, "IAxis"
      *[Class: @IAxis] Automatic
      * Auto calculate Max & Min of axis scale based on all dependant series
               PROPERTY-GET, 1, @Automatic
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] Automatic
      * Auto calculate Max & Min of axis scale based on all dependant series
               PROPERTY-PUT, 1, @Automatic,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] AutomaticMaximum
      * Auto calc Max of axis scale based on all dependant series
               PROPERTY-GET, 2, @AutomaticMaximum
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] AutomaticMaximum
      * Auto calc Max of axis scale based on all dependant series
               PROPERTY-PUT, 2, @AutomaticMaximum,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] AutomaticMinimum
      * Auto calc Min of axis scale based on all dependant series
               PROPERTY-GET, 3, @AutomaticMinimum
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] AutomaticMinimum
      * Auto calc Min of axis scale based on all dependant series
               PROPERTY-PUT, 3, @AutomaticMinimum,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] AxisPen
      * Pen used to draw the axis
               PROPERTY-GET, 4, @AxisPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAxis] AxisType
      * Returns the axis position (Left,Top,Right or Bottom)
               PROPERTY-GET, 13, @AxisType
                       RETURNING "EAxisType", TYPE 3
      *[Class: @IAxis] ExactDateTime
      * Shows Axis Labels in exact DateTime steps for weeks and months. See 
               PROPERTY-GET, 7, @ExactDateTime
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] ExactDateTime
      * Shows Axis Labels in exact DateTime steps for weeks and months. See 
               PROPERTY-PUT, 7, @ExactDateTime,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] GridPen
      * Access Pen for Chart back Grid
               PROPERTY-GET, 8, @GridPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAxis] Increment
      * Minimum step between axis labels. Can use EDateTimeStep for date-time 
               PROPERTY-GET, 9, @Increment
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] Increment
      * Minimum step between axis labels. Can use EDateTimeStep for date-time 
               PROPERTY-PUT, 9, @Increment,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxis] Inverted
      * Swaps Axis Minimum and Maximum scales
               PROPERTY-GET, 10, @Inverted
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] Inverted
      * Swaps Axis Minimum and Maximum scales
               PROPERTY-PUT, 10, @Inverted,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] Labels
      * Show or hide Axis Labels
               PROPERTY-GET, 11, @Labels
                       RETURNING "IAxisLabels*", TYPE 9
      *[Class: @IAxis] Logarithmic
      * True to scale the Axis Logarithmically
               PROPERTY-GET, 18, @Logarithmic
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] Logarithmic
      * True to scale the Axis Logarithmically
               PROPERTY-PUT, 18, @Logarithmic,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] Maximum
      * Max Axis value
               PROPERTY-GET, 19, @Maximum
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] Maximum
      * Max Axis value
               PROPERTY-PUT, 19, @Maximum,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxis] Minimum
      * Min Axis value
               PROPERTY-GET, 20, @Minimum
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] Minimum
      * Min Axis value
               PROPERTY-PUT, 20, @Minimum,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxis] MinorTickCount
      * Number of Axis minor ticks between major ticks
               PROPERTY-GET, 21, @MinorTickCount
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] MinorTickCount
      * Number of Axis minor ticks between major ticks
               PROPERTY-PUT, 21, @MinorTickCount,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxis] MinorTickLength
      * Length in pixels of the axis minor ticks
               PROPERTY-GET, 12, @MinorTickLength
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] MinorTickLength
      * Length in pixels of the axis minor ticks
               PROPERTY-PUT, 12, @MinorTickLength,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxis] MinorTicks
      * Minor tick Pen
               PROPERTY-GET, 22, @MinorTicks
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAxis] Position
      * The screen coordinate where axis is drawn
               PROPERTY-GET, 14, @Position
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] TickInnerLength
      * Default 0. Length in pixels of ticks inside Chart boundaries
               PROPERTY-GET, 24, @TickInnerLength
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] TickInnerLength
      * Default 0. Length in pixels of ticks inside Chart boundaries
               PROPERTY-PUT, 24, @TickInnerLength,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxis] TickLength
      * Default 4. Length of Axis Ticks in logical pixels
               PROPERTY-GET, 25, @TickLength
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] TickLength
      * Default 4. Length of Axis Ticks in logical pixels
               PROPERTY-PUT, 25, @TickLength,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxis] TickOnLabelsOnly
      * Default True. Only coincide ticks at Labels
               PROPERTY-GET, 26, @TickOnLabelsOnly
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] TickOnLabelsOnly
      * Default True. Only coincide ticks at Labels
               PROPERTY-PUT, 26, @TickOnLabelsOnly,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] Ticks
      * Tick Pen
               PROPERTY-GET, 28, @Ticks
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAxis] TicksInner
      * Inner Tick Pen
               PROPERTY-GET, 29, @TicksInner
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAxis] Title
      * Title attributes
               PROPERTY-GET, 30, @Title
                       RETURNING "IAxisTitle*", TYPE 9
      *[Class: @IAxis] TitleSize
      * Default 0 to auto calc distance detween Title and Axis
               PROPERTY-GET, 31, @TitleSize
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] TitleSize
      * Default 0 to auto calc distance detween Title and Axis
               PROPERTY-PUT, 31, @TitleSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxis] Visible
      * Show / hides this axis
               PROPERTY-GET, 32, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] Visible
      * Show / hides this axis
               PROPERTY-PUT, 32, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] AdjustMaxMin
      * Recalculates axis Min and Max based on all Series
               METHOD, 48, @AdjustMaxMin
      *[Class: @IAxis] CalcXPosValue
      * Calculates Horizontal coord. in pixels of Value parameter
               METHOD, 40, @CalcXPosValue,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] CalcYPosValue
      * Calculates Vertical coord. in pixels of Value parameter
               METHOD, 41, @CalcYPosValue,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] CalcXSizeValue
      * Calculates the size in pixels of horizontal "Value" scales
               METHOD, 42, @CalcXSizeValue,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] CalcYSizeValue
      * Calculates the size in pixels of vertical "Value" scales
               METHOD, 43, @CalcYSizeValue,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] CalcPosPoint
      * Calculates axis scale of "Value" screen pixels coordinate
               METHOD, 44, @CalcPosPoint,
                   "long" @SomeValue, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] Clicked
      * Returns True if XY pixel coordinates are near axis.
               METHOD, 51, @Clicked,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] CustomDraw
      * Draws the axis at specified screen pixels coordinates
               METHOD, 46, @CustomDraw,
                   "long" @APosLabels, TYPE 3,
                   "long" @APosTitle, TYPE 3,
                   "long" @APosAxis, TYPE 3,
                   "boolean" @GridVisible, TYPE 11
      *[Class: @IAxis] IsDateTime
      * Returns True if associated Series are date-time 
               METHOD, 52, @IsDateTime
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] MaxXValue
      * Maximum Horizontal value for the specified Axis
               METHOD, 54, @MaxXValue
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] MaxYValue
      * Maximum Vertical value for the specified Axis
               METHOD, 55, @MaxYValue
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] MinXValue
      * Minimum Horizontal value for the specified Axis
               METHOD, 56, @MinXValue
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] MinYValue
      * Minimum Vertical value for the specified Axis
               METHOD, 57, @MinYValue
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] Scroll
      * Change axis Min and Max to scroll chart contents
               METHOD, 50, @Scroll,
                   "double" @Offset, TYPE 5,
                   "boolean" @CheckLimits, TYPE 11
      *[Class: @IAxis] SetMinMax
      * Changes axis Min and Max values in a single call.
               METHOD, 53, @SetMinMax,
                   "double" @AMin, TYPE 5,
                   "double" @AMax, TYPE 5
      *[Class: @IAxis] GridCentered
      * Place GridLines between Labels
               PROPERTY-GET, 5, @GridCentered
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] GridCentered
      * Place GridLines between Labels
               PROPERTY-PUT, 5, @GridCentered,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] PositionPercent
      * Axis position as percent of Chart
               PROPERTY-GET, 6, @PositionPercent
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] PositionPercent
      * Axis position as percent of Chart
               PROPERTY-PUT, 6, @PositionPercent,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxis] StartPosition
      * Axis Start position percentage of Chart
               PROPERTY-GET, 15, @StartPosition
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] StartPosition
      * Axis Start position percentage of Chart
               PROPERTY-PUT, 15, @StartPosition,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxis] EndPosition
      * Axis Start position percentage of Chart
               PROPERTY-GET, 16, @EndPosition
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] EndPosition
      * Axis Start position percentage of Chart
               PROPERTY-PUT, 16, @EndPosition,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxis] LogarithmicBase
      * Base used for Logarithmic scale
               PROPERTY-GET, 17, @LogarithmicBase
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] LogarithmicBase
      * Base used for Logarithmic scale
               PROPERTY-PUT, 17, @LogarithmicBase,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxis] CustomDrawMinMax
      * Draws the axis at specified screen pixels coordinates with custom 
               METHOD, 58, @CustomDrawMinMax,
                   "long" @APosLabels, TYPE 3,
                   "long" @APosTitle, TYPE 3,
                   "long" @APosAxis, TYPE 3,
                   "boolean" @GridVisible, TYPE 11,
                   "double" @AMinimum, TYPE 5,
                   "double" @AMaximum, TYPE 5,
                   "long" @AStartPosition, TYPE 3,
                   "long" @AEndPosition, TYPE 3
                       OPTIONAL 2
      *[Class: @IAxis] MinorGrid
      * Sets characteristics of Minor Tick Grid.
               PROPERTY-GET, 23, @MinorGrid
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAxis] Otherside
      * Sets Axis labelling type to normal or 'otherside'
               PROPERTY-GET, 27, @Otherside
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxis] Otherside
      * Sets Axis labelling type to normal or 'otherside'
               PROPERTY-PUT, 27, @Otherside,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxis] AxisLink
      * Internally links Axis to Chart Tools
               PROPERTY-GET, 33, @AxisLink
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] MaxVisibleSeriesValue
      * Returns max. value of Series associated with Axis
               METHOD, 34, @MaxVisibleSeriesValue,
                   "boolean" @AllSeries, TYPE 11,
                   "long" @SeriesIndex, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] MinVisibleSeriesValue
      * Returns min. value of Series associated with Axis
               METHOD, 35, @MinVisibleSeriesValue,
                   "boolean" @AllSeries, TYPE 11,
                   "long" @SeriesIndex, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] CalcIncrement
      * Returns resultant increment of Axis
               METHOD, 36, @CalcIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] ZPosition
      * Axis position along the "Z" depth direction (as percentage)
               PROPERTY-GET, 201, @ZPosition
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] ZPosition
      * Axis position along the "Z" depth direction (as percentage)
               PROPERTY-PUT, 201, @ZPosition,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxis] MaximumOffset
      * Number of pixels left as margin at axis maximum position
               PROPERTY-GET, 202, @MaximumOffset
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] MaximumOffset
      * Number of pixels left as margin at axis maximum position
               PROPERTY-PUT, 202, @MaximumOffset,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxis] MinimumOffset
      * Number of pixels left as margin at axis minimum position
               PROPERTY-GET, 203, @MinimumOffset
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] MinimumOffset
      * Number of pixels left as margin at axis minimum position
               PROPERTY-PUT, 203, @MinimumOffset,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxis] GridZPosition
      * Grid position along the "Z" depth direction (in percentage)
               PROPERTY-GET, 204, @GridZPosition
                       RETURNING "double", TYPE 5
      *[Class: @IAxis] GridZPosition
      * Grid position along the "Z" depth direction (in percentage)
               PROPERTY-PUT, 204, @GridZPosition,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxis] PositionUnits
      * Units used for PositionPercent
               PROPERTY-GET, 205, @PositionUnits
                       RETURNING "EPositionUnits", TYPE 3
      *[Class: @IAxis] PositionUnits
      * Units used for PositionPercent
               PROPERTY-PUT, 205, @PositionUnits,
                   "EPositionUnits (Property_Value)", TYPE 3
      *[Class: @IAxis] Index
      * Returns Axis position index in AxisList
               PROPERTY-GET, 206, @Index
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] IStartPos
      * Gets Start Position of Axis in Pixels
               PROPERTY-GET, 207, @IStartPos
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] IEndPos
      * Gets End Axis position in Pixels
               PROPERTY-GET, 208, @IEndPos
                       RETURNING "long", TYPE 3
      *[Class: @IAxis] IAxisSize
      * Gets Axis size in pixels
               PROPERTY-GET, 209, @IAxisSize
                       RETURNING "long", TYPE 3
           
      * Chart axes labels attributes
           
      * IAxisLabels
           CLASS @IAxisLabels
               CLSID, AE42632F-8D51-40EE-AD0A-39793E0C7498
               NAME, "IAxisLabels"
      *[Class: @IAxisLabels] Angle
      * Rotation angle of label. All angles valid.
               PROPERTY-GET, 12, @Angle
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabels] Angle
      * Rotation angle of label. All angles valid.
               PROPERTY-PUT, 12, @Angle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisLabels] Visible
      * Show or hide Axis Labels
               PROPERTY-GET, 11, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisLabels] Visible
      * Show or hide Axis Labels
               PROPERTY-PUT, 11, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxisLabels] DateTimeFormat
      * Formatting mask for date-time axis labels. eg. 'dd/mm/yy'
               PROPERTY-GET, 6, @DateTimeFormat
                       RETURNING "BSTR", TYPE 8
      *[Class: @IAxisLabels] DateTimeFormat
      * Formatting mask for date-time axis labels. eg. 'dd/mm/yy'
               PROPERTY-PUT, 6, @DateTimeFormat,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IAxisLabels] Font
      * Font attributes used to draw axis labels
               PROPERTY-GET, 13, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @IAxisLabels] FormattedValue
      * Returns corresponding text of formatted Value
               METHOD, 36, @FormattedValue,
                   "double" @SomeValue, TYPE 5
                       RETURNING "BSTR", TYPE 8
      *[Class: @IAxisLabels] GetPos
      * returns Labels position in pixels
               METHOD, 27, @GetPos
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabels] Height
      * Axis Label height of formatted Value
               METHOD, 35, @Height,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabels] MaxWidth
      * Max width in Screen pixels of all Axis Labels
               METHOD, 33, @MaxWidth
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabels] OnAxis
      * True to show Labels at Axis Minimum and Maximum positions
               PROPERTY-GET, 14, @OnAxis
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisLabels] OnAxis
      * True to show Labels at Axis Minimum and Maximum positions
               PROPERTY-PUT, 14, @OnAxis,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxisLabels] RoundFirstLabel
      * Default True. Round Axis Labels to nearest magnitude
               PROPERTY-GET, 23, @RoundFirstLabel
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisLabels] RoundFirstLabel
      * Default True. Round Axis Labels to nearest magnitude
               PROPERTY-PUT, 23, @RoundFirstLabel,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxisLabels] Separation
      * Percent amount minimum distance between Axis Labels. Set to zero to show 
               PROPERTY-GET, 15, @Separation
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabels] Separation
      * Percent amount minimum distance between Axis Labels. Set to zero to show 
               PROPERTY-PUT, 15, @Separation,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisLabels] Size
      * Default 0 to auto calculate distance between Axis and Labels
               PROPERTY-GET, 16, @Size
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabels] Size
      * Default 0 to auto calculate distance between Axis and Labels
               PROPERTY-PUT, 16, @Size,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisLabels] Style
      * Label display type
               PROPERTY-GET, 17, @Style
                       RETURNING "EAxisLabelStyle", TYPE 3
      *[Class: @IAxisLabels] Style
      * Label display type
               PROPERTY-PUT, 17, @Style,
                   "EAxisLabelStyle (Property_Value)", TYPE 3
      *[Class: @IAxisLabels] ValueFormat
      * Default formatting mask for axis labels for Values: '#,##0.###'
               PROPERTY-GET, 5, @ValueFormat
                       RETURNING "BSTR", TYPE 8
      *[Class: @IAxisLabels] ValueFormat
      * Default formatting mask for axis labels for Values: '#,##0.###'
               PROPERTY-PUT, 5, @ValueFormat,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IAxisLabels] Width
      * Axis Label width of formatted Value
               METHOD, 34, @Width,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabels] Multiline
      * Use spaces in Labels to separate lines
               PROPERTY-GET, 1, @Multiline
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisLabels] Multiline
      * Use spaces in Labels to separate lines
               PROPERTY-PUT, 1, @Multiline,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxisLabels] TeeSplitInLines
      * Replaces Separator with Line break in Labels
               METHOD, 2, @TeeSplitInLines,
                   "BSTR*" @St, TYPE 16392,
                   "BSTR" @Separator, TYPE 8
      *[Class: @IAxisLabels] Exponent
      * Set to True to show the number of the mantissa in super-script font.
               PROPERTY-GET, 3, @Exponent
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisLabels] Exponent
      * Set to True to show the number of the mantissa in super-script font.
               PROPERTY-PUT, 3, @Exponent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxisLabels] Align
      * Changes default position of Axis Labels
               PROPERTY-GET, 4, @Align
                       RETURNING "EAxisLabelAlign", TYPE 3
      *[Class: @IAxisLabels] Align
      * Changes default position of Axis Labels
               PROPERTY-PUT, 4, @Align,
                   "EAxisLabelAlign (Property_Value)", TYPE 3
      *[Class: @IAxisLabels] Format
      * Format properties that will be used to display all automatic axis 
               PROPERTY-GET, 201, @Format
                       RETURNING "ITeeCustomShape*", TYPE 9
      *[Class: @IAxisLabels] Add
      * Adds a new custom axis label to list
               METHOD, 202, @Add,
                   "double" @Value, TYPE 5,
                   "BSTR" @Text, TYPE 8
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabels] Item
      * Returns an individual axis label item object
               PROPERTY-GET, 203, @Item,
                   "long" @Index, TYPE 3
                       RETURNING "IAxisLabelsItem*", TYPE 9
      *[Class: @IAxisLabels] Clear
      * Removes all custom axis label objects from Item list
               METHOD, 205, @Clear
      *[Class: @IAxisLabels] Count
      * Returns the number of custom axis label objects in list
               METHOD, 206, @Count
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabels] Alternate
      * To display the Axis Labels in Alternate mode
               PROPERTY-GET, 204, @Alternate
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisLabels] Alternate
      * To display the Axis Labels in Alternate mode
               PROPERTY-PUT, 204, @Alternate,
                   "boolean (Property_Value)", TYPE 11
           
      * Chart axes Title attributes
           
      * IAxisTitle
           CLASS @IAxisTitle
               CLSID, 08A03AED-ED9B-4018-B04E-E798463BDC5E
               NAME, "IAxisTitle"
      *[Class: @IAxisTitle] Angle
      * The angle (0,90,180,270) to draw the Title Caption
               PROPERTY-GET, 1, @Angle
                       RETURNING "long", TYPE 3
      *[Class: @IAxisTitle] Angle
      * The angle (0,90,180,270) to draw the Title Caption
               PROPERTY-PUT, 1, @Angle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisTitle] Caption
      * The text to draw as axis title
               PROPERTY-GET, 2, @Caption
                       RETURNING "BSTR", TYPE 8
      *[Class: @IAxisTitle] Caption
      * The text to draw as axis title
               PROPERTY-PUT, 2, @Caption,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IAxisTitle] Font
      * The font used to display the Title Caption
               PROPERTY-GET, 3, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @IAxisTitle] Visible
      * Enables/Disables the display of the Axis Title.
               PROPERTY-GET, 4, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisTitle] Visible
      * Enables/Disables the display of the Axis Title.
               PROPERTY-PUT, 4, @Visible,
                   "boolean (Property_Value)", TYPE 11
           
      * Describes panel appearance characteristics (bevel, colour, etc) for 
           
      * ITeeCustomShape
           CLASS @ITeeCustomShape
               CLSID, AE078B6A-3628-4F59-BFCF-C8E639617C00
               NAME, "ITeeCustomShape"
      *[Class: @ITeeCustomShape] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeCustomShape] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeCustomShape] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ITeeCustomShape] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ITeeCustomShape] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @ITeeCustomShape] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeCustomShape] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeCustomShape] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeCustomShape] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeCustomShape] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeCustomShape] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ITeeCustomShape] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @ITeeCustomShape] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ITeeCustomShape] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeCustomShape] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @ITeeCustomShape] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ITeeCustomShape] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ITeeCustomShape] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ITeeCustomShape] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeCustomShape] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @ITeeCustomShape] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
           
      * Chart Export methods
           
      * IExport
           CLASS @IExport
               CLSID, 4A45303D-24C2-442E-8D04-933F5CC3FA67
               NAME, "IExport"
      *[Class: @IExport] CopyToClipboardBitmap
      * Copies Chart to Clipboard in bitmap format
               METHOD, 1, @CopyToClipboardBitmap
      *[Class: @IExport] CopyToClipboardMetafile
      * Copies Chart to Clipboard in metafile format
               METHOD, 2, @CopyToClipboardMetafile,
                   "boolean" @Enhanced, TYPE 11
      *[Class: @IExport] SaveToBitmapFile
      * Stores the Chart to an image bitmap file
               METHOD, 3, @SaveToBitmapFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IExport] SaveToFile
      * Stores the Chart component to a *.tee file
               METHOD, 4, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IExport] SaveToJPEGFile
      * Stores the Chart to an image JPEG (JPG) file
               METHOD, 5, @SaveToJPEGFile,
                   "BSTR" @FileName, TYPE 8,
                   "boolean" @Gray, TYPE 11,
                   "EJPEGPerformance" @Performance, TYPE 3,
                   "long" @Quality, TYPE 3,
                   "long" @Width, TYPE 3,
                   "long" @Height, TYPE 3
      *[Class: @IExport] SaveToMetafile
      * Stores the Chart to a metafile (WMF) file
               METHOD, 6, @SaveToMetafile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IExport] SaveToMetafileEnh
      * Stores the Chart to an enhaced 32bit metafile (EMF) file
               METHOD, 7, @SaveToMetafileEnh,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IExport] ShowExport
      * Shows the TeeChart export dialog
               METHOD, 8, @ShowExport
      *[Class: @IExport] SaveChartDialog
      * Show save Chart template dialog
               METHOD, 9, @SaveChartDialog
                       RETURNING "BSTR", TYPE 8
      *[Class: @IExport] ConvertTeeFileToText
      * Convert Tee template to text
               METHOD, 10, @ConvertTeeFileToText,
                   "BSTR" @InputFile, TYPE 8,
                   "BSTR" @OutputFile, TYPE 8
      *[Class: @IExport] Stream
      * Output Chart as Stream
               METHOD, 12, @Stream,
                   "EStreamType" @StreamType, TYPE 3
                       OPTIONAL 1
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IExport] asJPEG
      * Accesses JPEG format Export attributes.
               PROPERTY-GET, 11, @asJPEG
                       RETURNING "IJPEGExport*", TYPE 9
      *[Class: @IExport] asPNG
      * Accesses PNG format Export attributes.
               PROPERTY-GET, 13, @asPNG
                       RETURNING "IPNGExport*", TYPE 9
      *[Class: @IExport] asGIF
      * Accesses GIF format Export attributes.
               PROPERTY-GET, 14, @asGIF
                       RETURNING "IGIFExport*", TYPE 9
      *[Class: @IExport] asBMP
      * Accesses BMP format Export attributes.
               PROPERTY-GET, 15, @asBMP
                       RETURNING "IBMPExport*", TYPE 9
      *[Class: @IExport] asPCX
      * Accesses PCX format Export attribute
               PROPERTY-GET, 16, @asPCX
                       RETURNING "IPCXExport*", TYPE 9
      *[Class: @IExport] asMetafile
      * Accesses Metafile format Export attribute
               PROPERTY-GET, 17, @asMetafile
                       RETURNING "IMetafileExport*", TYPE 9
      *[Class: @IExport] asNative
      * Accesses Native format Export attribute
               PROPERTY-GET, 18, @asNative
                       RETURNING "INativeExport*", TYPE 9
      *[Class: @IExport] asXML
      * Accesses XML format Export attribute
               PROPERTY-GET, 19, @asXML
                       RETURNING "IXMLExport*", TYPE 9
      *[Class: @IExport] asXLS
      * Accesses XLS format Export attribute
               PROPERTY-GET, 20, @asXLS
                       RETURNING "IXLSExport*", TYPE 9
      *[Class: @IExport] asHTML
      * Accesses HTML format Export attribute
               PROPERTY-GET, 21, @asHTML
                       RETURNING "IHTMLExport*", TYPE 9
      *[Class: @IExport] asText
      * Accesses Text format Export attribute
               PROPERTY-GET, 22, @asText
                       RETURNING "ITextExport*", TYPE 9
      *[Class: @IExport] EmailFile
      * Attaches Chart to default Email
               METHOD, 23, @EmailFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IExport] asPDF
               PROPERTY-GET, 201, @asPDF
                       RETURNING "IPDFExport*", TYPE 9
      *[Class: @IExport] asEPS
               PROPERTY-GET, 202, @asEPS
                       RETURNING "IEPSExport*", TYPE 9
      *[Class: @IExport] asSVG
      * Export to SVG
               PROPERTY-GET, 203, @asSVG
                       RETURNING "ISVGExport*", TYPE 9
      *[Class: @IExport] LabelHeader
      * Get the Header text of the Point Label
               PROPERTY-GET, 204, @LabelHeader
                       RETURNING "BSTR", TYPE 8
      *[Class: @IExport] LabelHeader
      * Get the Header text of the Point Label
               PROPERTY-PUT, 204, @LabelHeader,
                   "BSTR (Property_Value)", TYPE 8
           
      * Chart Import methods
           
      * IImport
           CLASS @IImport
               CLSID, 75029103-7941-4BFF-AF7A-0D3445A86299
               NAME, "IImport"
      *[Class: @IImport] LoadFromFile
      * Retrieves a *.tee TeeChart file
               METHOD, 1, @LoadFromFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IImport] LoadFromURL
      * Retrieves a *.tee TeeChart file from a www URL when in Internet 
               METHOD, 2, @LoadFromURL,
                   "BSTR" @URL, TYPE 8
      *[Class: @IImport] LoadFromStream
      * Retrieves Charts from a specified Stream
               METHOD, 3, @LoadFromStream,
                   "VARIANT" @AStream, TYPE 12
      *[Class: @IImport] LoadFromBase64Stream
               METHOD, 201, @LoadFromBase64Stream,
                   "VARIANT" @AStream, TYPE 12
      *[Class: @IImport] V5TeeCompatible
      * Enables compatibility with TeeChart v5 tee files
               PROPERTY-GET, 202, @V5TeeCompatible
                       RETURNING "boolean", TYPE 11
      *[Class: @IImport] V5TeeCompatible
      * Enables compatibility with TeeChart v5 tee files
               PROPERTY-PUT, 202, @V5TeeCompatible,
                   "boolean (Property_Value)", TYPE 11
           
      * Chart Scroll attributes
           
      * IScroll
           CLASS @IScroll
               CLSID, 875D45C2-612A-4204-84A8-C797C8CF3DB3
               NAME, "IScroll"
      *[Class: @IScroll] Enable
      * Controls Right mouse button scrolling
               PROPERTY-GET, 1, @Enable
                       RETURNING "EChartScroll", TYPE 3
      *[Class: @IScroll] Enable
      * Controls Right mouse button scrolling
               PROPERTY-PUT, 1, @Enable,
                   "EChartScroll (Property_Value)", TYPE 3
      *[Class: @IScroll] MouseButton
      * Sets the mousebutton to use to enable the scroll action.
               PROPERTY-GET, 2, @MouseButton
                       RETURNING "EMouseButton", TYPE 3
      *[Class: @IScroll] MouseButton
      * Sets the mousebutton to use to enable the scroll action.
               PROPERTY-PUT, 2, @MouseButton,
                   "EMouseButton (Property_Value)", TYPE 3
           
      * Chart Zoom attributes
           
      * IZoom
           CLASS @IZoom
               CLSID, FF6FFD1C-D2C1-4BC7-A280-D6152B5C9D53
               NAME, "IZoom"
      *[Class: @IZoom] Enable
      * True to left mouse button zooming (dragging from top/left to 
               PROPERTY-GET, 3, @Enable
                       RETURNING "boolean", TYPE 11
      *[Class: @IZoom] Enable
      * True to left mouse button zooming (dragging from top/left to 
               PROPERTY-PUT, 3, @Enable,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IZoom] Animated
      * True for animated sequence on zoom
               PROPERTY-GET, 5, @Animated
                       RETURNING "boolean", TYPE 11
      *[Class: @IZoom] Animated
      * True for animated sequence on zoom
               PROPERTY-PUT, 5, @Animated,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IZoom] AnimatedSteps
      * Number of steps of the animated zoom. Default 8.
               PROPERTY-GET, 6, @AnimatedSteps
                       RETURNING "long", TYPE 3
      *[Class: @IZoom] AnimatedSteps
      * Number of steps of the animated zoom. Default 8.
               PROPERTY-PUT, 6, @AnimatedSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @IZoom] Undo
      * Resets all Axes to Automatic scales (no zoom).
               METHOD, 82, @Undo
      *[Class: @IZoom] ZoomRect
      * Applies a Zoom on the given rectangle in pixels
               METHOD, 81, @ZoomRect,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @IZoom] Zoomed
      * Returns True if Chart is Zoomed
               PROPERTY-GET, 1, @Zoomed
                       RETURNING "boolean", TYPE 11
      *[Class: @IZoom] Pen
      * Pen used to draw surrounding rectangle of zoom area as mouse is 
               PROPERTY-GET, 2, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IZoom] MinimumPixels
      * Sets the minimum number of pixels before the zoom action is activated.
               PROPERTY-GET, 4, @MinimumPixels
                       RETURNING "long", TYPE 3
      *[Class: @IZoom] MinimumPixels
      * Sets the minimum number of pixels before the zoom action is activated.
               PROPERTY-PUT, 4, @MinimumPixels,
                   "long (Property_Value)", TYPE 3
      *[Class: @IZoom] MouseButton
      * Sets the mousebutton to use to enable the zoom action.
               PROPERTY-GET, 7, @MouseButton
                       RETURNING "EMouseButton", TYPE 3
      *[Class: @IZoom] MouseButton
      * Sets the mousebutton to use to enable the zoom action.
               PROPERTY-PUT, 7, @MouseButton,
                   "EMouseButton (Property_Value)", TYPE 3
      *[Class: @IZoom] Direction
      * Sets the direction applied to the Zoom when the mouse is dragged.
               PROPERTY-GET, 8, @Direction
                       RETURNING "ETeeZoomDirection", TYPE 3
      *[Class: @IZoom] Direction
      * Sets the direction applied to the Zoom when the mouse is dragged.
               PROPERTY-PUT, 8, @Direction,
                   "ETeeZoomDirection (Property_Value)", TYPE 3
      *[Class: @IZoom] Brush
      * Brush used to fill mousedragged zoom area.
               PROPERTY-GET, 9, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IZoom] ZoomPercent
      * Applies the specified  Zoom In/Out to the current Axis scales.
               METHOD, 10, @ZoomPercent,
                   "double" @PercentZoom, TYPE 5
           
      * Chart Printing attributes and methods
           
      * IPrinter
           CLASS @IPrinter
               CLSID, 7161A8A0-997C-4CB4-A8F6-B117758989F2
               NAME, "IPrinter"
      *[Class: @IPrinter] Detail
      * Screen pixel mapping to Printer pixels. 0=Wysiwyg, 100=highest detail
               PROPERTY-GET, 24, @Detail
                       RETURNING "long", TYPE 3
      *[Class: @IPrinter] Detail
      * Screen pixel mapping to Printer pixels. 0=Wysiwyg, 100=highest detail
               PROPERTY-PUT, 24, @Detail,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPrinter] MarginBottom
      * Printer paper bottom margin in % of total height
               PROPERTY-GET, 2, @MarginBottom
                       RETURNING "long", TYPE 3
      *[Class: @IPrinter] MarginBottom
      * Printer paper bottom margin in % of total height
               PROPERTY-PUT, 2, @MarginBottom,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPrinter] MarginLeft
      * Printer paper left margin in % of total width
               PROPERTY-GET, 3, @MarginLeft
                       RETURNING "long", TYPE 3
      *[Class: @IPrinter] MarginLeft
      * Printer paper left margin in % of total width
               PROPERTY-PUT, 3, @MarginLeft,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPrinter] MarginTop
      * Printer paper top margin in % of total height
               PROPERTY-GET, 4, @MarginTop
                       RETURNING "long", TYPE 3
      *[Class: @IPrinter] MarginTop
      * Printer paper top margin in % of total height
               PROPERTY-PUT, 4, @MarginTop,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPrinter] MarginRight
      * Printer paper right margin in % of total width
               PROPERTY-GET, 5, @MarginRight
                       RETURNING "long", TYPE 3
      *[Class: @IPrinter] MarginRight
      * Printer paper right margin in % of total width
               PROPERTY-PUT, 5, @MarginRight,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPrinter] Orientation
      * Changes paper orientation (portrait or landscape)
               PROPERTY-GET, 1, @Orientation
                       RETURNING "EPrinterOrientation", TYPE 3
      *[Class: @IPrinter] Orientation
      * Changes paper orientation (portrait or landscape)
               PROPERTY-PUT, 1, @Orientation,
                   "EPrinterOrientation (Property_Value)", TYPE 3
      *[Class: @IPrinter] Print
      * Prints the Chart
               METHOD, 64, @Print
      *[Class: @IPrinter] PrintLandscape
      * Prints the Chart in landscape paper orientation
               METHOD, 65, @PrintLandscape
      *[Class: @IPrinter] PrintPortrait
      * Prints the Chart in portrait paper orientation
               METHOD, 67, @PrintPortrait
      *[Class: @IPrinter] ShowPreview
      * Shows the Print Preview Dialog
               METHOD, 28, @ShowPreview
      *[Class: @IPrinter] PrintPartial
      * Prints Chart at location co-ords. No form feed
               METHOD, 6, @PrintPartial,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @IPrinter] BeginDoc
      * Opens Printer file
               METHOD, 7, @BeginDoc
      *[Class: @IPrinter] EndDoc
      * Closes Printer file
               METHOD, 8, @EndDoc
      *[Class: @IPrinter] PrinterIndex
      * Selects Indexed Printer as Chart Printer
               PROPERTY-GET, 9, @PrinterIndex
                       RETURNING "long", TYPE 3
      *[Class: @IPrinter] PrinterIndex
      * Selects Indexed Printer as Chart Printer
               PROPERTY-PUT, 9, @PrinterIndex,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPrinter] PrinterCount
      * Number of installed printers
               PROPERTY-GET, 10, @PrinterCount
                       RETURNING "long", TYPE 3
      *[Class: @IPrinter] PrinterDescription
      * Windows Printer description
               PROPERTY-GET, 11, @PrinterDescription,
                   "long" @Index, TYPE 3
                       RETURNING "BSTR", TYPE 8
      *[Class: @IPrinter] PrintChart
      * Print Chart with page formfeed
               METHOD, 12, @PrintChart
      *[Class: @IPrinter] PageHeight
      * Height of printed page adjusted for printer resolution
               PROPERTY-GET, 13, @PageHeight
                       RETURNING "long", TYPE 3
      *[Class: @IPrinter] PageWidth
      * Width of printed page adjusted for printer resolution
               PROPERTY-GET, 14, @PageWidth
                       RETURNING "long", TYPE 3
      *[Class: @IPrinter] JobTitle
      * Print job title for network jobs
               PROPERTY-GET, 15, @JobTitle
                       RETURNING "BSTR", TYPE 8
      *[Class: @IPrinter] JobTitle
      * Print job title for network jobs
               PROPERTY-PUT, 15, @JobTitle,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IPrinter] PrintProportional
      * Enable Printed Chart proportional to Chart dimensions
               PROPERTY-GET, 17, @PrintProportional
                       RETURNING "boolean", TYPE 11
      *[Class: @IPrinter] PrintProportional
      * Enable Printed Chart proportional to Chart dimensions
               PROPERTY-PUT, 17, @PrintProportional,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPrinter] PrintPartialHandle
      * Print Chart to Printer DC with onpage co-ordinates
               METHOD, 18, @PrintPartialHandle,
                   "VARIANT" @DC, TYPE 12,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
      *[Class: @IPrinter] PrintPages
      * Use PrintPages procedure to print multiple pages.
               METHOD, 16, @PrintPages,
                   "long" @FromPage, TYPE 3,
                   "long" @ToPage, TYPE 3
      *[Class: @IPrinter] ShowSetupDlg
      * Shows the Setup Dialog
               METHOD, 201, @ShowSetupDlg
           
      * Chart Left and Bottom wall attributes
           
      * IWall
           CLASS @IWall
               CLSID, E8D6312C-D367-462F-96D4-016472AE69C3
               NAME, "IWall"
      *[Class: @IWall] Brush
      * The brush used to fill the Chart wall
               PROPERTY-GET, 1, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IWall] Color
      * The color used to fill the chart wall
               PROPERTY-GET, 2, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IWall] Color
      * The color used to fill the chart wall
               PROPERTY-PUT, 2, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IWall] Pen
      * The pen used to draw a border around the Chart wall
               PROPERTY-GET, 3, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IWall] Size
      * The wall depth in screen pixels
               PROPERTY-GET, 4, @Size
                       RETURNING "long", TYPE 3
      *[Class: @IWall] Size
      * The wall depth in screen pixels
               PROPERTY-PUT, 4, @Size,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWall] Transparent
      * Make Wall transparent
               PROPERTY-GET, 5, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @IWall] Transparent
      * Make Wall transparent
               PROPERTY-PUT, 5, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWall] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IWall] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWall] Gradient
      * Call Gradient characteristics for the specified Wall.
               PROPERTY-GET, 6, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IWall] Visible
      * Enables/Disables display of specified Wall.
               PROPERTY-GET, 7, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IWall] Visible
      * Enables/Disables display of specified Wall.
               PROPERTY-PUT, 7, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWall] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 8, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IWall] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 8, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWall] AutoHide
      * Enables/Disables the AutoHide of specified Wall.
               PROPERTY-GET, 201, @AutoHide
                       RETURNING "boolean", TYPE 11
      *[Class: @IWall] AutoHide
      * Enables/Disables the AutoHide of specified Wall.
               PROPERTY-PUT, 201, @AutoHide,
                   "boolean (Property_Value)", TYPE 11
           
      * Attributes for Chart Left, Bottom and Back walls
           
      * IWalls
           CLASS @IWalls
               CLSID, C62CC857-82D0-4AE0-B962-94955FD12351
               NAME, "IWalls"
      *[Class: @IWalls] Bottom
      * Pen and Brush fill of the Chart Bottom wall
               PROPERTY-GET, 1, @Bottom
                       RETURNING "IWall*", TYPE 9
      *[Class: @IWalls] Left
      * Pen and Brush fill of the Chart Left wall
               PROPERTY-GET, 2, @Left
                       RETURNING "IWall*", TYPE 9
      *[Class: @IWalls] Visible
      * View Chart Walls in 3D
               PROPERTY-GET, 3, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IWalls] Visible
      * View Chart Walls in 3D
               PROPERTY-PUT, 3, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWalls] BackColor
      * Colour of back area within Chart Frame
               PROPERTY-GET, 4, @BackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IWalls] BackColor
      * Colour of back area within Chart Frame
               PROPERTY-PUT, 4, @BackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IWalls] Back
      * Pen and Brush fill of the Chart Back Wall
               PROPERTY-GET, 5, @Back
                       RETURNING "IWall*", TYPE 9
      *[Class: @IWalls] Right
      * Pen and Brush fill of the Chart Right Wall
               PROPERTY-GET, 6, @Right
                       RETURNING "IWall*", TYPE 9
      *[Class: @IWalls] Size
      * The walls depth in screen pixels
               PROPERTY-PUT, 201, @Size,
                   "long (Property_Value)", TYPE 3
           
      * TeeShape Position attributes
           
      * ITeeShapePosition
           CLASS @ITeeShapePosition
               CLSID, 13573D24-6A67-4E1F-BB08-5CE964C74E8A
               NAME, "ITeeShapePosition"
      *[Class: @ITeeShapePosition] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeShapePosition] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeShapePosition] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ITeeShapePosition] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ITeeShapePosition] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePosition] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShapePosition] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeShapePosition] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeShapePosition] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeShapePosition] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeShapePosition] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ITeeShapePosition] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @ITeeShapePosition] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePosition] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShapePosition] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @ITeeShapePosition] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ITeeShapePosition] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ITeeShapePosition] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePosition] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShapePosition] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @ITeeShapePosition] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ITeeShapePosition] CustomPosition
      * Set to True to permit custom positioning of Shape.
               PROPERTY-GET, 219, @CustomPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeShapePosition] CustomPosition
      * Set to True to permit custom positioning of Shape.
               PROPERTY-PUT, 219, @CustomPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeShapePosition] Left
      * Left position in pixels.
               PROPERTY-GET, 210, @Left
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePosition] Left
      * Left position in pixels.
               PROPERTY-PUT, 210, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShapePosition] Top
      * Top position in pixels.
               PROPERTY-GET, 211, @Top
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePosition] Top
      * Top position in pixels.
               PROPERTY-PUT, 211, @Top,
                   "long (Property_Value)", TYPE 3
           
      * Chart Panel background filling attributes
           
      * IGradient
           CLASS @IGradient
               CLSID, A19045A4-E453-47CD-9F64-A032B66FFFDC
               NAME, "IGradient"
      *[Class: @IGradient] Direction
      * The direction of the gradient effect (top to bottom, left to right, 
               PROPERTY-GET, 1, @Direction
                       RETURNING "EGradientDirection", TYPE 3
      *[Class: @IGradient] Direction
      * The direction of the gradient effect (top to bottom, left to right, 
               PROPERTY-PUT, 1, @Direction,
                   "EGradientDirection (Property_Value)", TYPE 3
      *[Class: @IGradient] StartColor
      * The starting color of the gradient effect
               PROPERTY-GET, 2, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IGradient] StartColor
      * The starting color of the gradient effect
               PROPERTY-PUT, 2, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IGradient] EndColor
      * The ending color of the gradient effect
               PROPERTY-GET, 3, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IGradient] EndColor
      * The ending color of the gradient effect
               PROPERTY-PUT, 3, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IGradient] Visible
      * Shows / hides the Chart gradient background filling
               PROPERTY-GET, 4, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IGradient] Visible
      * Shows / hides the Chart gradient background filling
               PROPERTY-PUT, 4, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IGradient] MidColor
      * The middle color of the gradient effect.
               PROPERTY-GET, 5, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IGradient] MidColor
      * The middle color of the gradient effect.
               PROPERTY-PUT, 5, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IGradient] RadialX
      * With Radial X, indicates X offset in pixels to displace the gradient 
               PROPERTY-GET, 201, @RadialX
                       RETURNING "long", TYPE 3
      *[Class: @IGradient] RadialX
      * With Radial X, indicates X offset in pixels to displace the gradient 
               PROPERTY-PUT, 201, @RadialX,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGradient] RadialY
      * With Radial Y, indicates Y offset in pixels to displace the gradient 
               PROPERTY-GET, 202, @RadialY
                       RETURNING "long", TYPE 3
      *[Class: @IGradient] RadialY
      * With Radial Y, indicates Y offset in pixels to displace the gradient 
               PROPERTY-PUT, 202, @RadialY,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGradient] Balance
      * Sets the balance between gradient start and end colors
               PROPERTY-GET, 204, @Balance
                       RETURNING "long", TYPE 3
      *[Class: @IGradient] Balance
      * Sets the balance between gradient start and end colors
               PROPERTY-PUT, 204, @Balance,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGradient] ShowEditor
      * Shows a dialog to modify the current gradient properties
               METHOD, 205, @ShowEditor,
                   "boolean" @OnlyStartColor, TYPE 11
           
      * Automatic Chart Multi-paging attributes
           
      * IPage
           CLASS @IPage
               CLSID, BE2BDA56-2B5D-47DA-9AAD-85CC84BA3647
               NAME, "IPage"
      *[Class: @IPage] Next
      * Move to next page
               METHOD, 5, @Next
      *[Class: @IPage] Previous
      * Move to previous page
               METHOD, 6, @Previous
      *[Class: @IPage] MaxPointsPerPage
      * Maximum number of points per page
               PROPERTY-GET, 54, @MaxPointsPerPage
                       RETURNING "long", TYPE 3
      *[Class: @IPage] MaxPointsPerPage
      * Maximum number of points per page
               PROPERTY-PUT, 54, @MaxPointsPerPage,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPage] Current
      * The current page number
               PROPERTY-GET, 56, @Current
                       RETURNING "long", TYPE 3
      *[Class: @IPage] Current
      * The current page number
               PROPERTY-PUT, 56, @Current,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPage] ScaleLastPage
      * If False, last Chart page scale adjusted for visible points on last 
               PROPERTY-GET, 57, @ScaleLastPage
                       RETURNING "boolean", TYPE 11
      *[Class: @IPage] ScaleLastPage
      * If False, last Chart page scale adjusted for visible points on last 
               PROPERTY-PUT, 57, @ScaleLastPage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPage] Count
      * Returns the number of pages
               PROPERTY-GET, 1, @Count
                       RETURNING "long", TYPE 3
           
      * Chart Background and margin attributes
           
      * IPanel
           CLASS @IPanel
               CLSID, EB5B6E6A-BED7-4079-9618-A43103A40692
               NAME, "IPanel"
      *[Class: @IPanel] BackImageInside
      * Confine Image to within Chart frame
               PROPERTY-GET, 2, @BackImageInside
                       RETURNING "boolean", TYPE 11
      *[Class: @IPanel] BackImageInside
      * Confine Image to within Chart frame
               PROPERTY-PUT, 2, @BackImageInside,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPanel] BackImageMode
      * Stretch, Tile or Center image
               PROPERTY-GET, 3, @BackImageMode
                       RETURNING "EBackImageMode", TYPE 3
      *[Class: @IPanel] BackImageMode
      * Stretch, Tile or Center image
               PROPERTY-PUT, 3, @BackImageMode,
                   "EBackImageMode (Property_Value)", TYPE 3
      *[Class: @IPanel] BevelInner
      * Inner bevel of Chart Panel
               PROPERTY-GET, 5, @BevelInner
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @IPanel] BevelInner
      * Inner bevel of Chart Panel
               PROPERTY-PUT, 5, @BevelInner,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @IPanel] BevelOuter
      * Outer bevel of Chart Panel
               PROPERTY-GET, 6, @BevelOuter
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @IPanel] BevelOuter
      * Outer bevel of Chart Panel
               PROPERTY-PUT, 6, @BevelOuter,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @IPanel] BevelWidth
      * BevelInner and BevelOuter widths
               PROPERTY-GET, 7, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @IPanel] BevelWidth
      * BevelInner and BevelOuter widths
               PROPERTY-PUT, 7, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPanel] BevelOffset
      * Distance between BevelInner and BevelOuter
               PROPERTY-GET, 8, @BevelOffset
                       RETURNING "long", TYPE 3
      *[Class: @IPanel] BevelOffset
      * Distance between BevelInner and BevelOuter
               PROPERTY-PUT, 8, @BevelOffset,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPanel] BorderStyle
      * Controls if panel draws a border or not.
               PROPERTY-GET, 9, @BorderStyle
                       RETURNING "EBorderStyle", TYPE 3
      *[Class: @IPanel] BorderStyle
      * Controls if panel draws a border or not.
               PROPERTY-PUT, 9, @BorderStyle,
                   "EBorderStyle (Property_Value)", TYPE 3
      *[Class: @IPanel] Color
      * Define single colour for Chart panel background
               PROPERTY-GET, 15, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IPanel] Color
      * Define single colour for Chart panel background
               PROPERTY-PUT, 15, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IPanel] Gradient
      * Paint colour gradient on Chart panel
               PROPERTY-GET, 10, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IPanel] MarginLeft
      * Margin as % of Chart panel width
               PROPERTY-GET, 11, @MarginLeft
                       RETURNING "long", TYPE 3
      *[Class: @IPanel] MarginLeft
      * Margin as % of Chart panel width
               PROPERTY-PUT, 11, @MarginLeft,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPanel] MarginTop
      * Margin as % of Chart panel height
               PROPERTY-GET, 12, @MarginTop
                       RETURNING "long", TYPE 3
      *[Class: @IPanel] MarginTop
      * Margin as % of Chart panel height
               PROPERTY-PUT, 12, @MarginTop,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPanel] MarginRight
      * Margin as % of Chart panel width
               PROPERTY-GET, 13, @MarginRight
                       RETURNING "long", TYPE 3
      *[Class: @IPanel] MarginRight
      * Margin as % of Chart panel width
               PROPERTY-PUT, 13, @MarginRight,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPanel] MarginBottom
      * Margin as % of Chart panel height
               PROPERTY-GET, 14, @MarginBottom
                       RETURNING "long", TYPE 3
      *[Class: @IPanel] MarginBottom
      * Margin as % of Chart panel height
               PROPERTY-PUT, 14, @MarginBottom,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPanel] BackImageClear
      * Clears Chart Panel BackImage picture
               METHOD, 4, @BackImageClear
      *[Class: @IPanel] BackImageLoad
      * Loads a picture file to fill Chart background
               METHOD, 16, @BackImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IPanel] MarginUnits
      * Determines the units of the four margin properties (MarginLeft, Top, 
               PROPERTY-GET, 201, @MarginUnits
                       RETURNING "EMarginUnits", TYPE 3
      *[Class: @IPanel] MarginUnits
      * Determines the units of the four margin properties (MarginLeft, Top, 
               PROPERTY-PUT, 201, @MarginUnits,
                   "EMarginUnits (Property_Value)", TYPE 3
      *[Class: @IPanel] Shadow
      * Specifies the shadow effect behind the chart panel
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IPanel] BorderRound
      * Number of pixels as side length of each rounded corner of the chart 
               PROPERTY-GET, 203, @BorderRound
                       RETURNING "long", TYPE 3
      *[Class: @IPanel] BorderRound
      * Number of pixels as side length of each rounded corner of the chart 
               PROPERTY-PUT, 203, @BorderRound,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPanel] Border
      * Pen properties used to display the Chart border
               PROPERTY-GET, 204, @Border
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPanel] BackImageTransparent
      * Enables transparency for Panel BackImage
               PROPERTY-GET, 205, @BackImageTransparent
                       RETURNING "boolean", TYPE 11
      *[Class: @IPanel] BackImageTransparent
      * Enables transparency for Panel BackImage
               PROPERTY-PUT, 205, @BackImageTransparent,
                   "boolean (Property_Value)", TYPE 11
           
      * Base interface for all common Series properties and methods
           
      * ISeries
           CLASS @ISeries
               CLSID, 56DFEA74-970A-493C-9B95-9658D7DBA380
               NAME, "ISeries"
      *[Class: @ISeries] Active
      * Show / hide the Series
               PROPERTY-GET, 1, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeries] Active
      * Show / hide the Series
               PROPERTY-PUT, 1, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeries] asArea
      * Accesses the Series Area properties and methods
               PROPERTY-GET, 2, @asArea
                       RETURNING "IAreaSeries*", TYPE 9
      *[Class: @ISeries] asArrow
      * Accesses the Series Arrow properties and methods
               PROPERTY-GET, 3, @asArrow
                       RETURNING "IArrowSeries*", TYPE 9
      *[Class: @ISeries] asBar
      * Accesses the Series Bar properties and methods
               PROPERTY-GET, 4, @asBar
                       RETURNING "IBarSeries*", TYPE 9
      *[Class: @ISeries] asBubble
      * Accesses the Series Bubble properties and methods
               PROPERTY-GET, 5, @asBubble
                       RETURNING "IBubbleSeries*", TYPE 9
      *[Class: @ISeries] asCandle
      * Accesses the Series Candle properties and methods
               PROPERTY-GET, 6, @asCandle
                       RETURNING "ICandleSeries*", TYPE 9
      *[Class: @ISeries] asErrorBar
      * Accesses the Series ErrorBar properties and methods
               PROPERTY-GET, 9, @asErrorBar
                       RETURNING "IErrorBarSeries*", TYPE 9
      *[Class: @ISeries] asFastLine
      * Accesses the Series FastLine properties and methods
               PROPERTY-GET, 10, @asFastLine
                       RETURNING "IFastLineSeries*", TYPE 9
      *[Class: @ISeries] asGantt
      * Accesses the Series Gantt properties and methods
               PROPERTY-GET, 11, @asGantt
                       RETURNING "IGanttSeries*", TYPE 9
      *[Class: @ISeries] asHorizBar
      * Accesses the Series HorizBar properties and methods
               PROPERTY-GET, 12, @asHorizBar
                       RETURNING "IHorizBarSeries*", TYPE 9
      *[Class: @ISeries] asLine
      * Accesses the Series Line properties and methods
               PROPERTY-GET, 13, @asLine
                       RETURNING "ILineSeries*", TYPE 9
      *[Class: @ISeries] asPie
      * Accesses the Series Pie properties and methods
               PROPERTY-GET, 14, @asPie
                       RETURNING "IPieSeries*", TYPE 9
      *[Class: @ISeries] asPoint
      * Accesses the Series Point properties and methods
               PROPERTY-GET, 15, @asPoint
                       RETURNING "IPointSeries*", TYPE 9
      *[Class: @ISeries] asPolar
      * Accesses the Series Polar properties and methods
               PROPERTY-GET, 16, @asPolar
                       RETURNING "IPolarSeries*", TYPE 9
      *[Class: @ISeries] asShape
      * Accesses the Series Shape properties and methods
               PROPERTY-GET, 17, @asShape
                       RETURNING "IShapeSeries*", TYPE 9
      *[Class: @ISeries] asSurface
      * Accesses the Series Surface properties and methods
               PROPERTY-GET, 18, @asSurface
                       RETURNING "ISurfaceSeries*", TYPE 9
      *[Class: @ISeries] asVolume
      * Accesses the Series Volume properties and methods
               PROPERTY-GET, 19, @asVolume
                       RETURNING "IVolumeSeries*", TYPE 9
      *[Class: @ISeries] Color
      * The default color for all Series points
               PROPERTY-GET, 20, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISeries] Color
      * The default color for all Series points
               PROPERTY-PUT, 20, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ISeries] ColorEachPoint
      * When True, each Series point is assigned a different color
               PROPERTY-GET, 21, @ColorEachPoint
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeries] ColorEachPoint
      * When True, each Series point is assigned a different color
               PROPERTY-PUT, 21, @ColorEachPoint,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeries] Count
      * Returns the number of points in Series
               PROPERTY-GET, 22, @Count
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] Cursor
      * The mouse cursor used when mouse passes over Series points
               PROPERTY-GET, 23, @Cursor
                       RETURNING "short", TYPE 2
      *[Class: @ISeries] Cursor
      * The mouse cursor used when mouse passes over Series points
               PROPERTY-PUT, 23, @Cursor,
                   "short (Property_Value)", TYPE 2
      *[Class: @ISeries] DataSource
      * The database DSN string for the Series, or another Series name if 
               PROPERTY-GET, 24, @DataSource
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISeries] DataSource
      * The database DSN string for the Series, or another Series name if 
               PROPERTY-PUT, 24, @DataSource,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ISeries] FirstValueIndex
      * The index of the first displayed Series point
               PROPERTY-GET, 25, @FirstValueIndex
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] FunctionType
      * The associated Series function used to generate the Series points. Use 
               PROPERTY-GET, 26, @FunctionType
                       RETURNING "ITeeFunction*", TYPE 9
      *[Class: @ISeries] HorizontalAxis
      * The associated horizontal axis ( Top axis or Bottom axis )
               PROPERTY-GET, 27, @HorizontalAxis
                       RETURNING "EHorizontalAxis", TYPE 3
      *[Class: @ISeries] HorizontalAxis
      * The associated horizontal axis ( Top axis or Bottom axis )
               PROPERTY-PUT, 27, @HorizontalAxis,
                   "EHorizontalAxis (Property_Value)", TYPE 3
      *[Class: @ISeries] LabelsSource
      * Defines the ODBC field used for Series labels
               PROPERTY-GET, 28, @LabelsSource
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] LabelsSource
      * Defines the ODBC field used for Series labels
               PROPERTY-PUT, 28, @LabelsSource,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeries] LastValueIndex
      * The index of the last displayed Series point
               PROPERTY-GET, 29, @LastValueIndex
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] Marks
      * The Series Marks attributes
               PROPERTY-GET, 30, @Marks
                       RETURNING "IMarks*", TYPE 9
      *[Class: @ISeries] Name
      * The internal Series name (must not contain spaces or symbols)
               PROPERTY-GET, 31, @Name
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] Name
      * The internal Series name (must not contain spaces or symbols)
               PROPERTY-PUT, 31, @Name,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeries] PercentFormat
      * The formatting mask used to display Series values as percents
               PROPERTY-GET, 33, @PercentFormat
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] PercentFormat
      * The formatting mask used to display Series values as percents
               PROPERTY-PUT, 33, @PercentFormat,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeries] PointColor
      * The color for Index Series point
               PROPERTY-GET, 34, @PointColor,
                   "long" @Index, TYPE 3
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISeries] PointColor
      * The color for Index Series point
               PROPERTY-PUT, 34, @PointColor,
                   "long" @Index, TYPE 3,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ISeries] PointLabel
      * The text label for Index Series point
               PROPERTY-GET, 35, @PointLabel,
                   "long" @Index, TYPE 3
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] PointLabel
      * The text label for Index Series point
               PROPERTY-PUT, 35, @PointLabel,
                   "long" @Index, TYPE 3,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeries] PointValue
      * The value for Index Series point
               PROPERTY-GET, 36, @PointValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ISeries] PointValue
      * The value for Index Series point
               PROPERTY-PUT, 36, @PointValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ISeries] SeriesType
      * The Series class. Use Chart.ChangeSeriesType to change
               PROPERTY-GET, 37, @SeriesType
                       RETURNING "ESeriesClass", TYPE 3
      *[Class: @ISeries] ShowInLegend
      * Show / hides Series in Chart Legend
               PROPERTY-GET, 38, @ShowInLegend
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeries] ShowInLegend
      * Show / hides Series in Chart Legend
               PROPERTY-PUT, 38, @ShowInLegend,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeries] Title
      * The Series text title used in Chart Legend
               PROPERTY-GET, 39, @Title
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] Title
      * The Series text title used in Chart Legend
               PROPERTY-PUT, 39, @Title,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeries] ValueFormat
      * The formatting mask used to display Series values in Legend or Marks
               PROPERTY-GET, 40, @ValueFormat
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] ValueFormat
      * The formatting mask used to display Series values in Legend or Marks
               PROPERTY-PUT, 40, @ValueFormat,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeries] ValueMarkText
      * Returns the Mark text for Series point Index
               PROPERTY-GET, 41, @ValueMarkText,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] VerticalAxis
      * The associated vertical axis ( Top, Bottom,  Both or Custom axis )
               PROPERTY-GET, 42, @VerticalAxis
                       RETURNING "EVerticalAxis", TYPE 3
      *[Class: @ISeries] VerticalAxis
      * The associated vertical axis ( Top, Bottom,  Both or Custom axis )
               PROPERTY-PUT, 42, @VerticalAxis,
                   "EVerticalAxis (Property_Value)", TYPE 3
      *[Class: @ISeries] XValues
      * The list of Series X values
               PROPERTY-GET, 43, @XValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ISeries] YValues
      * The list of Series Y values
               PROPERTY-GET, 44, @YValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ISeries] ZOrder
      * Returns the Z position order for the Series
               PROPERTY-GET, 45, @ZOrder
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] Add
      * Adds a new point to the Series
               METHOD, 46, @Add,
                   "double" @AValue, TYPE 5,
                   "BSTR" @ALabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] AddNull
      * Adds a new null point to the Series
               METHOD, 47, @AddNull,
                   "BSTR" @SomeLabel, TYPE 8
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] AddXY
      * Adds a new point with X and Y coordinates
               METHOD, 48, @AddXY,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "BSTR" @ALabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] CalcXPos
      * Returns the horizontal screen position (in pixels) of ValueIndexth 
               METHOD, 49, @CalcXPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] CalcXPosValue
      * Returns the horizontal screen position (in pixels) of Value
               METHOD, 50, @CalcXPosValue,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] CalcXSizeValue
      * Returns the horizontal size in pixels of "Value" in axis scales
               METHOD, 51, @CalcXSizeValue,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] CalcYPos
      * Returns the vertical screen position (in pixels) of ValueIndexth Series 
               METHOD, 52, @CalcYPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] CalcYPosValue
      * Returns the vertical screen position (in pixels) of Value
               METHOD, 53, @CalcYPosValue,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] CalcYSizeValue
      * Returns the vertical size in pixels of "Value" in axis scales
               METHOD, 54, @CalcYSizeValue,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] CheckDataSource
      * Refreshes function type or ODBC datasource
               METHOD, 55, @CheckDataSource
      *[Class: @ISeries] Clear
      * Removes all points from the Series
               METHOD, 56, @Clear
      *[Class: @ISeries] Clicked
      * Returns the Index of the Series point where the mouse is over. Returns 
               METHOD, 57, @Clicked,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] Delete
      * Removes the Index point from the Series
               METHOD, 58, @Delete,
                   "long" @Index, TYPE 3
      *[Class: @ISeries] FillSampleValues
      * Adds random sample data to the Series
               METHOD, 59, @FillSampleValues,
                   "long" @NumValues, TYPE 3
      *[Class: @ISeries] GetMousePoint
      * Returns the Series point index where the mouse cursor is over. Returns 
               METHOD, 60, @GetMousePoint
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] IsNull
      * Returns True is Index Series point has been added with AddNull
               METHOD, 61, @IsNull,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeries] RefreshSeries
      * Refresh dependent Series to force recalculation
               METHOD, 62, @RefreshSeries
      *[Class: @ISeries] SetFunction
      * Associates a function to calculate the Series points. Also needs 
               METHOD, 63, @SetFunction,
                   "EFunctionType" @AFunction, TYPE 3
      *[Class: @ISeries] SwapValues
      * Exchanges two Series points.
               METHOD, 64, @SwapValues,
                   "long" @a, TYPE 3,
                   "long" @b, TYPE 3
      *[Class: @ISeries] XScreenToValue
      * Converts from horizontal screen pixel coordinate to Series values
               METHOD, 65, @XScreenToValue,
                   "long" @ScreenCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ISeries] XValueToText
      * Returns the string text representation of horizontal "Value", according 
               METHOD, 66, @XValueToText,
                   "double" @SomeValue, TYPE 5
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] YScreenToValue
      * Converts from vertical screen pixel coordinate to Series values
               METHOD, 67, @YScreenToValue,
                   "long" @ScreenCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ISeries] YValueToText
      * Returns the string text representation of vertical "Value", according to 
               METHOD, 68, @YValueToText,
                   "double" @SomeValue, TYPE 5
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] asBezier
      * Access to Bezier Series specific properties and methods
               PROPERTY-GET, 7, @asBezier
                       RETURNING "IBezierSeries*", TYPE 9
      *[Class: @ISeries] asContour
      * Access to Contour Series specific properties and methods
               PROPERTY-GET, 8, @asContour
                       RETURNING "IContourSeries*", TYPE 9
      *[Class: @ISeries] asError
      * Access to Error Series specific properties and methods
               PROPERTY-GET, 69, @asError
                       RETURNING "IErrorSeries*", TYPE 9
      *[Class: @ISeries] asPoint3D
      * Access to Point3D Series specific properties and methods
               PROPERTY-GET, 70, @asPoint3D
                       RETURNING "IPoint3DSeries*", TYPE 9
      *[Class: @ISeries] asRadar
      * Access to Radar Series specific properties and methods
               PROPERTY-GET, 71, @asRadar
                       RETURNING "IRadarSeries*", TYPE 9
      *[Class: @ISeries] AddNullXY
      * Add Null to XY point range
               METHOD, 72, @AddNullXY,
                   "double" @X, TYPE 5,
                   "double" @Y, TYPE 5,
                   "BSTR" @ALabel, TYPE 8
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] LegendString
      * Returns string of LegendIndexth value
               METHOD, 73, @LegendString,
                   "long" @LegendIndex, TYPE 3,
                   "ELegendTextStyle" @LegendTextStyle, TYPE 3
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeries] LegendItemColor
      * Returns colour of LegendIndexth value
               METHOD, 74, @LegendItemColor,
                   "long" @LegendIndex, TYPE 3
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISeries] CountLegendItems
      * Number of possible items in Legend
               METHOD, 75, @CountLegendItems
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] LegendToValueIndex
      * Returns Series Point index of LegendIndexth value
               METHOD, 76, @LegendToValueIndex,
                   "long" @LegendIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] VisibleCount
      * Returns number of Series' points onscreen
               METHOD, 77, @VisibleCount
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] AssignValues
      * Assign point values from another, Indexed Series
               METHOD, 79, @AssignValues,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @ISeries] HorizontalAxisCustom
      * Associate the Series to a horizontal Custom Axis
               PROPERTY-GET, 32, @HorizontalAxisCustom
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] HorizontalAxisCustom
      * Associate the Series to a horizontal Custom Axis
               PROPERTY-PUT, 32, @HorizontalAxisCustom,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeries] VerticalAxisCustom
      * Associate the Series to a vertical Custom Axis
               PROPERTY-GET, 78, @VerticalAxisCustom
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] VerticalAxisCustom
      * Associate the Series to a vertical Custom Axis
               PROPERTY-PUT, 78, @VerticalAxisCustom,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeries] asClock
      * Access to Clock series specific properties
               PROPERTY-GET, 80, @asClock
                       RETURNING "IClockSeries*", TYPE 9
      *[Class: @ISeries] asWindRose
      * Access to Wind Rose series specific properties
               PROPERTY-GET, 81, @asWindRose
                       RETURNING "IWindRoseSeries*", TYPE 9
      *[Class: @ISeries] asBar3D
      * Access to Bar3D series specific properties
               PROPERTY-GET, 82, @asBar3D
                       RETURNING "IBar3DSeries*", TYPE 9
      *[Class: @ISeries] asImageBar
      * Access to ImageBar series specific properties
               PROPERTY-GET, 83, @asImageBar
                       RETURNING "IImageBarSeries*", TYPE 9
      *[Class: @ISeries] DisconnectAxisCustom
      * Disconnects the Series from its Custom Axes.
               METHOD, 84, @DisconnectAxisCustom,
                   "boolean" @IsHorizontal, TYPE 11
      *[Class: @ISeries] MouseValues
      * Returns the X and Y values under the mouse cursor using the series axes 
               PROPERTY-GET, 86, @MouseValues
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @ISeries] AddArray
      * Adds an array of data directly to the Series.
               METHOD, 85, @AddArray,
                   "long" @ArraySize, TYPE 3,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @XArray, TYPE 12
                       OPTIONAL 1
      *[Class: @ISeries] Depth
      * Sets the Depth of the series points or interconnection lines.
               PROPERTY-GET, 87, @Depth
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] Depth
      * Sets the Depth of the series points or interconnection lines.
               PROPERTY-PUT, 87, @Depth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeries] asDonut
      * Access to Donut series specific properties
               PROPERTY-GET, 89, @asDonut
                       RETURNING "IDonutSeries*", TYPE 9
      *[Class: @ISeries] asTriSurface
      * Access to TriSurface series specific properties
               PROPERTY-GET, 90, @asTriSurface
                       RETURNING "ITriSurfaceSeries*", TYPE 9
      *[Class: @ISeries] asBoxPlot
      * Access to BoxPlot series specific properties
               PROPERTY-GET, 91, @asBoxPlot
                       RETURNING "IBoxPlotSeries*", TYPE 9
      *[Class: @ISeries] asHorizBoxPlot
      * Access to Horizontal BoxPlot series specific properties
               PROPERTY-GET, 92, @asHorizBoxPlot
                       RETURNING "IHorizBoxPlotSeries*", TYPE 9
      *[Class: @ISeries] asHistogram
      * Access to Histogram series specific properties
               PROPERTY-GET, 93, @asHistogram
                       RETURNING "IHistogramSeries*", TYPE 9
      *[Class: @ISeries] asColorGrid
      * Access to ColorGrid series specific properties
               PROPERTY-GET, 94, @asColorGrid
                       RETURNING "IColorGridSeries*", TYPE 9
      *[Class: @ISeries] asHorizLine
      * Access to Horizontal Line series specific properties
               PROPERTY-GET, 95, @asHorizLine
                       RETURNING "IHorizLineSeries*", TYPE 9
      *[Class: @ISeries] asBarJoin
      * Access to BarJoin series specific properties
               PROPERTY-GET, 96, @asBarJoin
                       RETURNING "IBarJoinSeries*", TYPE 9
      *[Class: @ISeries] asHighLow
      * Access to HighLow series specific properties
               PROPERTY-GET, 97, @asHighLow
                       RETURNING "IHighLowSeries*", TYPE 9
      *[Class: @ISeries] asWaterfall
      * Access to WaterFall series specific properties
               PROPERTY-GET, 98, @asWaterfall
                       RETURNING "IWaterfallSeries*", TYPE 9
      *[Class: @ISeries] asSmith
      * Access to Smith series specific properties
               PROPERTY-GET, 99, @asSmith
                       RETURNING "ISmithSeries*", TYPE 9
      *[Class: @ISeries] asPyramid
      * Access to Pyramid series specific properties
               PROPERTY-GET, 100, @asPyramid
                       RETURNING "IPyramidSeries*", TYPE 9
      *[Class: @ISeries] asMap
      * Access to Map series specific properties
               PROPERTY-GET, 101, @asMap
                       RETURNING "IMapSeries*", TYPE 9
      *[Class: @ISeries] asFunnel
      * Access to Funnel series specific properties
               PROPERTY-GET, 88, @asFunnel
                       RETURNING "IFunnelSeries*", TYPE 9
      *[Class: @ISeries] asCalendar
      * Access to Calender series specific properties
               PROPERTY-GET, 102, @asCalendar
                       RETURNING "ICalendarSeries*", TYPE 9
      *[Class: @ISeries] FreeDatasource
      * Frees the Series DataSource
               METHOD, 103, @FreeDatasource,
                   "boolean" @SurePrompt, TYPE 11
      *[Class: @ISeries] SeriesLink
      * Internally links Series to Chart Tools
               PROPERTY-GET, 104, @SeriesLink
                       RETURNING "long", TYPE 3
      *[Class: @ISeries] DatasourceType
      * Set dstSingleRecord when Single Record Charting
               PROPERTY-GET, 105, @DatasourceType
                       RETURNING "EDatasourceType", TYPE 3
      *[Class: @ISeries] DatasourceType
      * Set dstSingleRecord when Single Record Charting
               PROPERTY-PUT, 105, @DatasourceType,
                   "EDatasourceType (Property_Value)", TYPE 3
      *[Class: @ISeries] ValueLists
      * Series data lists
               PROPERTY-GET, 106, @ValueLists
                       RETURNING "IValueLists*", TYPE 9
      *[Class: @ISeries] IsNan
      * True if value is Nan or Infinite
               METHOD, 107, @IsNan,
                   "double" @Value, TYPE 5
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeries] DeleteRange
      * Deletes range of points from a startpoint in Series
               METHOD, 108, @DeleteRange,
                   "long" @Start, TYPE 3,
                   "long" @Quantity, TYPE 3
      *[Class: @ISeries] SortByLabels
      * Re-orders series points using their text labels to determine the order
               METHOD, 201, @SortByLabels,
                   "EValueListOrder" @Order, TYPE 3
      *[Class: @ISeries] SetNull
      * Makes the ValueIndex referred point to be "hidden" (invisible).
               METHOD, 202, @SetNull,
                   "long" @ValueIndex, TYPE 3
      *[Class: @ISeries] asHorizArea
      * Access to Horizontal Area series specific properties
               PROPERTY-GET, 203, @asHorizArea
                       RETURNING "IHorizAreaSeries*", TYPE 9
      *[Class: @ISeries] asPointFigure
      * Access to Point Figure series specific properties
               PROPERTY-GET, 204, @asPointFigure
                       RETURNING "IPointFigureSeries*", TYPE 9
      *[Class: @ISeries] asGauge
      * Access to Gauge series specific properties
               PROPERTY-GET, 205, @asGauge
                       RETURNING "IGaugeSeries*", TYPE 9
      *[Class: @ISeries] Pen
      * Pen used to draw serie lines
               PROPERTY-GET, 206, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ISeries] asVector3D
      * Access to Vector 3D series specific properties
               PROPERTY-GET, 207, @asVector3D
                       RETURNING "IVector3DSeries*", TYPE 9
      *[Class: @ISeries] asTower
      * Access to Tower series specific properties
               PROPERTY-GET, 208, @asTower
                       RETURNING "ITowerSeries*", TYPE 9
      *[Class: @ISeries] MaxVisibleValue
      * Returns Max visible value for indexed Valuelist
               METHOD, 209, @MaxVisibleValue,
                   "long" @valueList, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ISeries] MinVisibleValue
      * Returns Min visible value for indexed Valuelist
               METHOD, 210, @MinVisibleValue,
                   "long" @valueList, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ISeries] asPolarBar
      * Access to Polar Bar series specific properties
               PROPERTY-GET, 211, @asPolarBar
                       RETURNING "IPolarBarSeries*", TYPE 9
      *[Class: @ISeries] asBubble3D
      * Access to Bubble3D series specific properties
               PROPERTY-GET, 212, @asBubble3D
                       RETURNING "IBubble3DSeries*", TYPE 9
      *[Class: @ISeries] asHorizHistogram
      * Access to Horizontal Histogram Series specific properties
               PROPERTY-GET, 213, @asHorizHistogram
                       RETURNING "IHorizHistogramSeries*", TYPE 9
      *[Class: @ISeries] ShowInEditor
      * Allow to hide Series in the Editor
               PROPERTY-GET, 214, @ShowInEditor
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeries] ShowInEditor
      * Allow to hide Series in the Editor
               PROPERTY-PUT, 214, @ShowInEditor,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeries] asVolumePipe
               PROPERTY-GET, 215, @asVolumePipe
                       RETURNING "IVolumePipeSeries*", TYPE 9
           
      * Common properties for Function calculations.
           
      * ITeeFunction
           CLASS @ITeeFunction
               CLSID, 27390EA7-21AF-41C2-B6F2-5042A5C1C750
               NAME, "ITeeFunction"
      *[Class: @ITeeFunction] Period
      * The number of points to consider for each function calculation
               PROPERTY-GET, 1, @Period
                       RETURNING "double", TYPE 5
      *[Class: @ITeeFunction] Period
      * The number of points to consider for each function calculation
               PROPERTY-PUT, 1, @Period,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITeeFunction] asCurveFit
      * Accesses the function as a CurveFittingFunction object
               PROPERTY-GET, 2, @asCurveFit
                       RETURNING "ICurveFittingFunction*", TYPE 9
      *[Class: @ITeeFunction] asExpAvg
      * Accesses the function as a ExpAverageFunction object
               PROPERTY-GET, 3, @asExpAvg
                       RETURNING "IExpAvgFunction*", TYPE 9
      *[Class: @ITeeFunction] asMovAvg
      * Accesses the function as a MovingAverageFunction object
               PROPERTY-GET, 4, @asMovAvg
                       RETURNING "IMovingAvgFunction*", TYPE 9
      *[Class: @ITeeFunction] PeriodStyle
      * Applies Period to Axis range or points
               PROPERTY-GET, 5, @PeriodStyle
                       RETURNING "EFunctionPeriodStyle", TYPE 3
      *[Class: @ITeeFunction] PeriodStyle
      * Applies Period to Axis range or points
               PROPERTY-PUT, 5, @PeriodStyle,
                   "EFunctionPeriodStyle (Property_Value)", TYPE 3
      *[Class: @ITeeFunction] PeriodAlign
      * Where in range Period is applied
               PROPERTY-GET, 6, @PeriodAlign
                       RETURNING "EFunctionPeriodAlign", TYPE 3
      *[Class: @ITeeFunction] PeriodAlign
      * Where in range Period is applied
               PROPERTY-PUT, 6, @PeriodAlign,
                   "EFunctionPeriodAlign (Property_Value)", TYPE 3
      *[Class: @ITeeFunction] asStdDeviation
      * Accesses Standard Deviation specific properties
               PROPERTY-GET, 7, @asStdDeviation
                       RETURNING "IStdDeviationFunction*", TYPE 9
      *[Class: @ITeeFunction] BeginUpdate
      * Stop Function recalc until EndUpdate
               METHOD, 8, @BeginUpdate
      *[Class: @ITeeFunction] EndUpdate
      * Recalculate function for changes after BeginUpdate
               METHOD, 9, @EndUpdate
      *[Class: @ITeeFunction] asRSI
      * Accesses RSI specific properties
               PROPERTY-GET, 10, @asRSI
                       RETURNING "IRSIFunction*", TYPE 9
      *[Class: @ITeeFunction] asBollinger
      * Accesses Bollinger specific properties
               PROPERTY-GET, 11, @asBollinger
                       RETURNING "IBollingerFunction*", TYPE 9
      *[Class: @ITeeFunction] asADX
      * Accesses ADX specific properties
               PROPERTY-GET, 12, @asADX
                       RETURNING "IADXFunction*", TYPE 9
      *[Class: @ITeeFunction] asMACD
      * Accesses MACD specific properties
               PROPERTY-GET, 13, @asMACD
                       RETURNING "IMACDFunction*", TYPE 9
      *[Class: @ITeeFunction] asRMS
      * Accesses RMS specific properties
               PROPERTY-GET, 14, @asRMS
                       RETURNING "IRMSFunction*", TYPE 9
      *[Class: @ITeeFunction] asAverage
      * Accesses Average specific properties
               PROPERTY-GET, 15, @asAverage
                       RETURNING "IAverageFunction*", TYPE 9
      *[Class: @ITeeFunction] asSmoothing
      * Accesses Smoothing specific properties.
               PROPERTY-GET, 201, @asSmoothing
                       RETURNING "ISmoothingFunction*", TYPE 9
      *[Class: @ITeeFunction] asCustom
      * Accesses Smoothing specific properties.
               PROPERTY-GET, 202, @asCustom
                       RETURNING "ICustomFunction*", TYPE 9
      *[Class: @ITeeFunction] asCompress
      * Accesses Compress specific properties.
               PROPERTY-GET, 203, @asCompress
                       RETURNING "ICompressFunction*", TYPE 9
      *[Class: @ITeeFunction] asCLV
      * Accesses CLV specific properties.
               PROPERTY-GET, 204, @asCLV
                       RETURNING "ICLVFunction*", TYPE 9
      *[Class: @ITeeFunction] asOBV
      * Accesses OBV specific properties.
               PROPERTY-GET, 205, @asOBV
                       RETURNING "IOBVFunction*", TYPE 9
      *[Class: @ITeeFunction] asCCI
      * Accesses CCI specific properties.
               PROPERTY-GET, 206, @asCCI
                       RETURNING "ICCIFunction*", TYPE 9
      *[Class: @ITeeFunction] asPVO
      * Accesses PVO specific properties.
               PROPERTY-GET, 207, @asPVO
                       RETURNING "IPVOFunction*", TYPE 9
      *[Class: @ITeeFunction] asPerformance
      * Accesses Performance specific properties.
               PROPERTY-GET, 208, @asPerformance
                       RETURNING "IPerformanceFunction*", TYPE 9
      *[Class: @ITeeFunction] asMode
               PROPERTY-GET, 209, @asMode
                       RETURNING "IModeFunction*", TYPE 9
      *[Class: @ITeeFunction] asMedian
               PROPERTY-GET, 210, @asMedian
                       RETURNING "IMedianFunction*", TYPE 9
      *[Class: @ITeeFunction] Recalculate
      * Recalculate the Function
               METHOD, 211, @Recalculate
      *[Class: @ITeeFunction] asDownSampling
               PROPERTY-GET, 212, @asDownSampling
                       RETURNING "IDownSamplingFunction*", TYPE 9
      *[Class: @ITeeFunction] asTrend
               PROPERTY-GET, 213, @asTrend
                       RETURNING "ITrendFunction*", TYPE 9
           
      * Attributes for all Series.Marks properties
           
      * IMarks
           CLASS @IMarks
               CLSID, 54194DE1-3BCD-4858-9CED-EFB4BE9CE6C7
               NAME, "IMarks"
      *[Class: @IMarks] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IMarks] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IMarks] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @IMarks] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IMarks] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @IMarks] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarks] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IMarks] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IMarks] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @IMarks] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMarks] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @IMarks] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @IMarks] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IMarks] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarks] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @IMarks] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @IMarks] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @IMarks] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @IMarks] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarks] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @IMarks] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IMarks] Arrow
      * The pen used to draw a line between the Mark and the Series point
               PROPERTY-GET, 3, @Arrow
                       RETURNING "IPen*", TYPE 9
      *[Class: @IMarks] ArrowLength
      * The length in pixels from the Mark to the Series point
               PROPERTY-GET, 4, @ArrowLength
                       RETURNING "long", TYPE 3
      *[Class: @IMarks] ArrowLength
      * The length in pixels from the Mark to the Series point
               PROPERTY-PUT, 4, @ArrowLength,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarks] BackColor
      * The color used to fill the Series Marks background
               PROPERTY-GET, 5, @BackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IMarks] BackColor
      * The color used to fill the Series Marks background
               PROPERTY-PUT, 5, @BackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IMarks] Clip
      * When True, Marks are constrained to chart axis boundaries
               PROPERTY-GET, 6, @Clip
                       RETURNING "boolean", TYPE 11
      *[Class: @IMarks] Clip
      * When True, Marks are constrained to chart axis boundaries
               PROPERTY-PUT, 6, @Clip,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMarks] Frame
      * The pen used to draw the Marks border
               PROPERTY-GET, 8, @Frame
                       RETURNING "IPen*", TYPE 9
      *[Class: @IMarks] Style
      * The Series Mark style ( values, percents, text, etc )
               PROPERTY-GET, 2, @Style
                       RETURNING "EMarkStyle", TYPE 3
      *[Class: @IMarks] Style
      * The Series Mark style ( values, percents, text, etc )
               PROPERTY-PUT, 2, @Style,
                   "EMarkStyle (Property_Value)", TYPE 3
      *[Class: @IMarks] Visible
      * Show / hide the Series Marks
               PROPERTY-GET, 1, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IMarks] Visible
      * Show / hide the Series Marks
               PROPERTY-PUT, 1, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMarks] Positions
      * Custom Mark positioning
               PROPERTY-GET, 10, @Positions
                       RETURNING "ISeriesMarksPositions*", TYPE 9
      *[Class: @IMarks] Clicked
      * Clicked Mark
               METHOD, 11, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IMarks] ZPosition
      * Depth (Z) position of Mark
               PROPERTY-GET, 112, @ZPosition
                       RETURNING "long", TYPE 3
      *[Class: @IMarks] ZPosition
      * Depth (Z) position of Mark
               PROPERTY-PUT, 112, @ZPosition,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarks] Angle
      * Sets the rotation degree applied to each Point Mark.
               PROPERTY-GET, 7, @Angle
                       RETURNING "long", TYPE 3
      *[Class: @IMarks] Angle
      * Sets the rotation degree applied to each Point Mark.
               PROPERTY-PUT, 7, @Angle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarks] DrawEvery
      * Sets the number of Marks to be drawn.
               PROPERTY-GET, 9, @DrawEvery
                       RETURNING "long", TYPE 3
      *[Class: @IMarks] DrawEvery
      * Sets the number of Marks to be drawn.
               PROPERTY-PUT, 9, @DrawEvery,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarks] Multiline
      * Enables/disables multiline Marks.
               PROPERTY-GET, 13, @Multiline
                       RETURNING "boolean", TYPE 11
      *[Class: @IMarks] Multiline
      * Enables/disables multiline Marks.
               PROPERTY-PUT, 13, @Multiline,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMarks] ResetPositions
      * Resets Marks to their default positions.
               METHOD, 14, @ResetPositions
      *[Class: @IMarks] Callout
               PROPERTY-GET, 301, @Callout
                       RETURNING "IMarksCallout*", TYPE 9
      *[Class: @IMarks] ShowEditorMarks
      * Shows a dialog to modify the marks' properties
               METHOD, 302, @ShowEditorMarks
      *[Class: @IMarks] Item
      * Returns an individual mark item object
               PROPERTY-GET, 303, @Item,
                   "long" @Index, TYPE 3
                       RETURNING "ITeeCustomShape*", TYPE 9
      *[Class: @IMarks] Clear
      * Removes all customized marks from Item list
               METHOD, 304, @Clear
      *[Class: @IMarks] Symbol
      * Symbol for the Marks
               PROPERTY-GET, 305, @Symbol
                       RETURNING "IMarksSymbol*", TYPE 9
           
      * Linked list of Series values
           
      * IValueList
           CLASS @IValueList
               CLSID, 007EABF3-0657-403C-AA79-894A1CC5BE14
               NAME, "IValueList"
      *[Class: @IValueList] Count
      * Returns the number of values in the list
               PROPERTY-GET, 1, @Count
                       RETURNING "long", TYPE 3
      *[Class: @IValueList] DateTime
      * Controls if list values are date-time values or simple doubles
               PROPERTY-GET, 2, @DateTime
                       RETURNING "boolean", TYPE 11
      *[Class: @IValueList] DateTime
      * Controls if list values are date-time values or simple doubles
               PROPERTY-PUT, 2, @DateTime,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IValueList] First
      * Returns the first value in the list
               PROPERTY-GET, 3, @First
                       RETURNING "double", TYPE 5
      *[Class: @IValueList] Last
      * Returns the last value in the list
               PROPERTY-GET, 4, @Last
                       RETURNING "double", TYPE 5
      *[Class: @IValueList] Maximum
      * The maximum of the list values
               PROPERTY-GET, 5, @Maximum
                       RETURNING "double", TYPE 5
      *[Class: @IValueList] Minimum
      * The minimum of the list values
               PROPERTY-GET, 6, @Minimum
                       RETURNING "double", TYPE 5
      *[Class: @IValueList] Order
      * Controls how list values are sorted when adding them
               PROPERTY-GET, 7, @Order
                       RETURNING "EValueListOrder", TYPE 3
      *[Class: @IValueList] Order
      * Controls how list values are sorted when adding them
               PROPERTY-PUT, 7, @Order,
                   "EValueListOrder (Property_Value)", TYPE 3
      *[Class: @IValueList] Total
      * The sum of all list values
               PROPERTY-GET, 8, @Total
                       RETURNING "double", TYPE 5
      *[Class: @IValueList] TotalABS
      * The absolute sum of all list values
               PROPERTY-GET, 9, @TotalABS
                       RETURNING "double", TYPE 5
      *[Class: @IValueList] Value
      * Sets / returns the list value for the Index item
               PROPERTY-GET, 10, @Value,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IValueList] Value
      * Sets / returns the list value for the Index item
               PROPERTY-PUT, 10, @Value,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IValueList] ValueSource
      * Defines the database field name associated to the list
               PROPERTY-GET, 11, @ValueSource
                       RETURNING "BSTR", TYPE 8
      *[Class: @IValueList] ValueSource
      * Defines the database field name associated to the list
               PROPERTY-PUT, 11, @ValueSource,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IValueList] Delete
      * Removes a list item
               METHOD, 12, @Delete,
                   "long" @Index, TYPE 3
      *[Class: @IValueList] FillSequence
      * Replaces all list values with a sequence, starting from zero
               METHOD, 13, @FillSequence
      *[Class: @IValueList] Locate
      * If found, returns the value index of "Value" parameter. Returns -1 if 
               METHOD, 14, @Locate,
                   "double" @SomeValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IValueList] Sort
      * Orders the list values according to Order property
               METHOD, 15, @Sort
      *[Class: @IValueList] Modified
      * Read to check if ValueList modified, set to True to recalculate Max and 
               PROPERTY-GET, 16, @Modified
                       RETURNING "boolean", TYPE 11
      *[Class: @IValueList] Modified
      * Read to check if ValueList modified, set to True to recalculate Max and 
               PROPERTY-PUT, 16, @Modified,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IValueList] TempValue
      * TempValue can be modified in OnBeforeAdd event
               PROPERTY-GET, 17, @TempValue
                       RETURNING "double", TYPE 5
      *[Class: @IValueList] TempValue
      * TempValue can be modified in OnBeforeAdd event
               PROPERTY-PUT, 17, @TempValue,
                   "double (Property_Value)", TYPE 5
      *[Class: @IValueList] Name
      * Returns name of ValueList
               PROPERTY-GET, 201, @Name
                       RETURNING "BSTR", TYPE 8
      *[Class: @IValueList] Name
      * Returns name of ValueList
               PROPERTY-PUT, 201, @Name,
                   "BSTR (Property_Value)", TYPE 8
           
      * Marker properties for Line,Area,Point,Gantt,Bubble,Arrow and Candle 
           
      * IPointer
           CLASS @IPointer
               CLSID, 9AE58968-78F0-479F-A5CB-C458B9554810
               NAME, "IPointer"
      *[Class: @IPointer] Brush
      * The brush used to fill point markers
               PROPERTY-GET, 1, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IPointer] Draw3D
      * When True, and Style is rectangle, point markers draw a cube
               PROPERTY-GET, 2, @Draw3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IPointer] Draw3D
      * When True, and Style is rectangle, point markers draw a cube
               PROPERTY-PUT, 2, @Draw3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPointer] HorizontalSize
      * The horizontal size in pixels of each point marker
               PROPERTY-GET, 3, @HorizontalSize
                       RETURNING "long", TYPE 3
      *[Class: @IPointer] HorizontalSize
      * The horizontal size in pixels of each point marker
               PROPERTY-PUT, 3, @HorizontalSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPointer] VerticalSize
      * The vertical size in pixels of each point marker
               PROPERTY-GET, 4, @VerticalSize
                       RETURNING "long", TYPE 3
      *[Class: @IPointer] VerticalSize
      * The vertical size in pixels of each point marker
               PROPERTY-PUT, 4, @VerticalSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPointer] InflateMargins
      * When True, axis are expanded to leave space for point markers
               PROPERTY-GET, 5, @InflateMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IPointer] InflateMargins
      * When True, axis are expanded to leave space for point markers
               PROPERTY-PUT, 5, @InflateMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPointer] Pen
      * The pen used to draw the point marker borders
               PROPERTY-GET, 6, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPointer] Style
      * The point markers style (rectangle, triangle, etc)
               PROPERTY-GET, 7, @Style
                       RETURNING "EPointerStyle", TYPE 3
      *[Class: @IPointer] Style
      * The point markers style (rectangle, triangle, etc)
               PROPERTY-PUT, 7, @Style,
                   "EPointerStyle (Property_Value)", TYPE 3
      *[Class: @IPointer] Visible
      * Shows / hides the point markers
               PROPERTY-GET, 8, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IPointer] Visible
      * Shows / hides the point markers
               PROPERTY-PUT, 8, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPointer] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IPointer] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPointer] DrawPointer
      * Displays a pointer at the specified position and size
               METHOD, 9, @DrawPointer,
                   "long" @DC, TYPE 3,
                   "boolean" @Is3D, TYPE 11,
                   "long" @px, TYPE 3,
                   "long" @py, TYPE 3,
                   "long" @tmpHoriz, TYPE 3,
                   "long" @tmpVert, TYPE 3,
                   "OLE_COLOR" @AColor, TYPE 19,
                   "EPointerStyle" @AStyle, TYPE 3
      *[Class: @IPointer] Gradient
      * Gradient used to fill pointer interior
               PROPERTY-GET, 2101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IPointer] Transparency
      * % Transparency for Pointer
               PROPERTY-GET, 2201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IPointer] Transparency
      * % Transparency for Pointer
               PROPERTY-PUT, 2201, @Transparency,
                   "long (Property_Value)", TYPE 3
           
      * Common properties for LineSeries and AreaSeries
           
      * ICustomSeries
           CLASS @ICustomSeries
               CLSID, 1269F4FE-2BC2-46C4-B42C-A99DB07344F0
               NAME, "ICustomSeries"
      *[Class: @ICustomSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @ICustomSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-GET, 2, @Stairs
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-PUT, 2, @Stairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-GET, 3, @InvertedStairs
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-PUT, 3, @InvertedStairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomSeries] LinePen
      * The pen used to draw the line
               PROPERTY-GET, 4, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustomSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-GET, 5, @LineBrush
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @ICustomSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-PUT, 5, @LineBrush,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @ICustomSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-GET, 6, @ClickableLine
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-PUT, 6, @ClickableLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-GET, 76, @LineHeight
                       RETURNING "long", TYPE 3
      *[Class: @ICustomSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-PUT, 76, @LineHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomSeries] Brush
      * Accesses Brush attributes including images
               PROPERTY-GET, 9, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ICustomSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-GET, 81, @ColorEachLine
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-PUT, 81, @ColorEachLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomSeries] Outline
      * Outline border of Line
               PROPERTY-GET, 7, @Outline
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustomSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-GET, 82, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ICustomSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-PUT, 82, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomSeries] Shadow
      * Accesses Shadow attributes
               PROPERTY-GET, 201, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
           
      * Areas with optional Pointer properties (markers)
           
      * IAreaSeries
           CLASS @IAreaSeries
               CLSID, 6D270593-5F03-48B4-8317-3677D7DA5B65
               NAME, "IAreaSeries"
      *[Class: @IAreaSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IAreaSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-GET, 2, @Stairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IAreaSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-PUT, 2, @Stairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAreaSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-GET, 3, @InvertedStairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IAreaSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-PUT, 3, @InvertedStairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAreaSeries] LinePen
      * The pen used to draw the line
               PROPERTY-GET, 4, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAreaSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-GET, 5, @LineBrush
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @IAreaSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-PUT, 5, @LineBrush,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @IAreaSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-GET, 6, @ClickableLine
                       RETURNING "boolean", TYPE 11
      *[Class: @IAreaSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-PUT, 6, @ClickableLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAreaSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-GET, 76, @LineHeight
                       RETURNING "long", TYPE 3
      *[Class: @IAreaSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-PUT, 76, @LineHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAreaSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IAreaSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAreaSeries] Brush
      * Accesses Brush attributes including images
               PROPERTY-GET, 9, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IAreaSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-GET, 81, @ColorEachLine
                       RETURNING "boolean", TYPE 11
      *[Class: @IAreaSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-PUT, 81, @ColorEachLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAreaSeries] Outline
      * Outline border of Line
               PROPERTY-GET, 7, @Outline
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAreaSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-GET, 82, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IAreaSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-PUT, 82, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAreaSeries] Shadow
      * Accesses Shadow attributes
               PROPERTY-GET, 201, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IAreaSeries] AreaBrush
      * The brush used to fill the area points
               PROPERTY-GET, 20, @AreaBrush
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @IAreaSeries] AreaBrush
      * The brush used to fill the area points
               PROPERTY-PUT, 20, @AreaBrush,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @IAreaSeries] AreaPen
      * The pen used to draw the area lines
               PROPERTY-GET, 21, @AreaPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAreaSeries] MultiArea
      * Determines who multiple areas will be displayed
               PROPERTY-GET, 22, @MultiArea
                       RETURNING "EMultiArea", TYPE 3
      *[Class: @IAreaSeries] MultiArea
      * Determines who multiple areas will be displayed
               PROPERTY-PUT, 22, @MultiArea,
                   "EMultiArea (Property_Value)", TYPE 3
      *[Class: @IAreaSeries] GetOriginPos
      * Returns the pixels coordinate of the origin ValueIndexth area point
               METHOD, 23, @GetOriginPos,
                   "long" @AValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IAreaSeries] UseYOrigin
      * Default True: Bars will be bottom aligned to the YOrigin property 
               PROPERTY-GET, 8, @UseYOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IAreaSeries] UseYOrigin
      * Default True: Bars will be bottom aligned to the YOrigin property 
               PROPERTY-PUT, 8, @UseYOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAreaSeries] YOrigin
      * Defines the bottom position of the Area points.
               PROPERTY-GET, 10, @YOrigin
                       RETURNING "double", TYPE 5
      *[Class: @IAreaSeries] YOrigin
      * Defines the bottom position of the Area points.
               PROPERTY-PUT, 10, @YOrigin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAreaSeries] Gradient
      * Area Gradient Fill
               PROPERTY-GET, 12, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IAreaSeries] AreaColor
      * Gets the colro of the Pattern lines
               PROPERTY-GET, 301, @AreaColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IAreaSeries] AreaColor
      * Gets the colro of the Pattern lines
               PROPERTY-PUT, 301, @AreaColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
           
      * XY Point (scatter) with point markers
           
      * IPointSeries
           CLASS @IPointSeries
               CLSID, C4A0A481-78F0-4E55-8C0B-5DDE0F941793
               NAME, "IPointSeries"
      *[Class: @IPointSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IPointSeries] Dark3D
      * Dark shading
               PROPERTY-GET, 2, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IPointSeries] Dark3D
      * Dark shading
               PROPERTY-PUT, 2, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPointSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IPointSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
           
      * Line/Strip Series with optional Pointer (markers) properties
           
      * ILineSeries
           CLASS @ILineSeries
               CLSID, EF6E5A75-FAD2-48F4-87FA-E9941BC06BC5
               NAME, "ILineSeries"
      *[Class: @ILineSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @ILineSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-GET, 2, @Stairs
                       RETURNING "boolean", TYPE 11
      *[Class: @ILineSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-PUT, 2, @Stairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILineSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-GET, 3, @InvertedStairs
                       RETURNING "boolean", TYPE 11
      *[Class: @ILineSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-PUT, 3, @InvertedStairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILineSeries] LinePen
      * The pen used to draw the line
               PROPERTY-GET, 4, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ILineSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-GET, 5, @LineBrush
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @ILineSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-PUT, 5, @LineBrush,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @ILineSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-GET, 6, @ClickableLine
                       RETURNING "boolean", TYPE 11
      *[Class: @ILineSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-PUT, 6, @ClickableLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILineSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-GET, 76, @LineHeight
                       RETURNING "long", TYPE 3
      *[Class: @ILineSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-PUT, 76, @LineHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILineSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @ILineSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILineSeries] Brush
      * Accesses Brush attributes including images
               PROPERTY-GET, 9, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ILineSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-GET, 81, @ColorEachLine
                       RETURNING "boolean", TYPE 11
      *[Class: @ILineSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-PUT, 81, @ColorEachLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILineSeries] Outline
      * Outline border of Line
               PROPERTY-GET, 7, @Outline
                       RETURNING "IPen*", TYPE 9
      *[Class: @ILineSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-GET, 82, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ILineSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-PUT, 82, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILineSeries] Shadow
      * Accesses Shadow attributes
               PROPERTY-GET, 201, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ILineSeries] Stacked
      * Controls how Line Series are stacked.
               PROPERTY-GET, 8, @Stacked
                       RETURNING "ECustomSeriesStack", TYPE 3
      *[Class: @ILineSeries] Stacked
      * Controls how Line Series are stacked.
               PROPERTY-PUT, 8, @Stacked,
                   "ECustomSeriesStack (Property_Value)", TYPE 3
           
      * Simple Fast Line Series in 2D
           
      * IFastLineSeries
           CLASS @IFastLineSeries
               CLSID, 32663B42-5162-4E4F-95D4-BC423891C213
               NAME, "IFastLineSeries"
      *[Class: @IFastLineSeries] LinePen
      * The pen used to draw the line
               PROPERTY-GET, 1, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IFastLineSeries] AddRealTime
      * Adds a new point to the FastLine Series and draws only this point
               METHOD, 2, @AddRealTime,
                   "double" @X, TYPE 5,
                   "double" @Y, TYPE 5,
                   "BSTR" @SomeLabel, TYPE 8,
                   "OLE_COLOR" @SomeColor, TYPE 19
                       OPTIONAL 2
                       RETURNING "long", TYPE 3
      *[Class: @IFastLineSeries] DrawAllPoints
      * When True draw only first of duplicated x values
               PROPERTY-GET, 3, @DrawAllPoints
                       RETURNING "boolean", TYPE 11
      *[Class: @IFastLineSeries] DrawAllPoints
      * When True draw only first of duplicated x values
               PROPERTY-PUT, 3, @DrawAllPoints,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IFastLineSeries] AutoSizeVertAxis
      * When True removes default variable scaling of Left Axis
               PROPERTY-GET, 4, @AutoSizeVertAxis
                       RETURNING "boolean", TYPE 11
      *[Class: @IFastLineSeries] AutoSizeVertAxis
      * When True removes default variable scaling of Left Axis
               PROPERTY-PUT, 4, @AutoSizeVertAxis,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IFastLineSeries] Stairs
      * Setting Stairs to TRUE will make the Series to draw 2 Lines between each 
               PROPERTY-GET, 5, @Stairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IFastLineSeries] Stairs
      * Setting Stairs to TRUE will make the Series to draw 2 Lines between each 
               PROPERTY-PUT, 5, @Stairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IFastLineSeries] InvertedStairs
      * When Stairs is set to True you may set InvertedStairs to True to alter 
               PROPERTY-GET, 6, @InvertedStairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IFastLineSeries] InvertedStairs
      * When Stairs is set to True you may set InvertedStairs to True to alter 
               PROPERTY-PUT, 6, @InvertedStairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IFastLineSeries] IgnoreNulls
      * To enable FastLine series to hide null points, set IgnoreNulls to False 
               PROPERTY-GET, 201, @IgnoreNulls
                       RETURNING "boolean", TYPE 11
      *[Class: @IFastLineSeries] IgnoreNulls
      * To enable FastLine series to hide null points, set IgnoreNulls to False 
               PROPERTY-PUT, 201, @IgnoreNulls,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IFastLineSeries] FastPen
      * Speed tricks
               PROPERTY-GET, 202, @FastPen
                       RETURNING "boolean", TYPE 11
      *[Class: @IFastLineSeries] FastPen
      * Speed tricks
               PROPERTY-PUT, 202, @FastPen,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IFastLineSeries] AutoRepaint
      * Permits disable of Series Repaint
               PROPERTY-GET, 203, @AutoRepaint
                       RETURNING "boolean", TYPE 11
      *[Class: @IFastLineSeries] AutoRepaint
      * Permits disable of Series Repaint
               PROPERTY-PUT, 203, @AutoRepaint,
                   "boolean (Property_Value)", TYPE 11
           
      * Common properties for PieSeries and Polar/Radar Series
           
      * ICircledSeries
           CLASS @ICircledSeries
               CLSID, E391FA8C-CE91-40CA-AF14-BC1338A7B351
               NAME, "ICircledSeries"
      *[Class: @ICircledSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @ICircledSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICircledSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @ICircledSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICircledSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @ICircledSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @ICircledSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @ICircledSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @ICircledSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICircledSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICircledSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @ICircledSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICircledSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @ICircledSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICircledSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @ICircledSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
           
      * Circular Pie Series drawing pie slices of Values
           
      * IPieSeries
           CLASS @IPieSeries
               CLSID, 1B8C7E9C-6CAF-44BA-B95F-A8AC3C562D94
               NAME, "IPieSeries"
      *[Class: @IPieSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPieSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPieSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IPieSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IPieSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @IPieSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPieSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPieSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IPieSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IPieSeries] UsePatterns
      * Draw Pie slices using brush patterns
               PROPERTY-GET, 22, @UsePatterns
                       RETURNING "boolean", TYPE 11
      *[Class: @IPieSeries] UsePatterns
      * Draw Pie slices using brush patterns
               PROPERTY-PUT, 22, @UsePatterns,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPieSeries] PieValues
      * The list of pie values
               PROPERTY-GET, 23, @PieValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPieSeries] Dark3D
      * Controls if 3D Pie areas will be drawn with dark colors
               PROPERTY-GET, 24, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IPieSeries] Dark3D
      * Controls if 3D Pie areas will be drawn with dark colors
               PROPERTY-PUT, 24, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPieSeries] ExplodeBiggest
      * Explode biggest slice by value
               PROPERTY-GET, 25, @ExplodeBiggest
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] ExplodeBiggest
      * Explode biggest slice by value
               PROPERTY-PUT, 25, @ExplodeBiggest,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPieSeries] OtherSlice
      * Enables slice grouping
               PROPERTY-GET, 26, @OtherSlice
                       RETURNING "IPieOtherSlice*", TYPE 9
      *[Class: @IPieSeries] ExplodedSlice
      * Explode any slice
               PROPERTY-GET, 27, @ExplodedSlice
                       RETURNING "IExplodedSlices*", TYPE 9
      *[Class: @IPieSeries] PiePen
      * Pie line pen
               PROPERTY-GET, 28, @PiePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPieSeries] Shadow
      * Sets the characteristics of the Pie Shadow.
               PROPERTY-GET, 3, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IPieSeries] AngleSize
      * Determines the internal angle of the Pie slice displayed.
               PROPERTY-GET, 13, @AngleSize
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] AngleSize
      * Determines the internal angle of the Pie slice displayed.
               PROPERTY-PUT, 13, @AngleSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPieSeries] AutoMarkPosition
      * When True, the Pie series will display marks trying to not overlap one 
               PROPERTY-GET, 301, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IPieSeries] AutoMarkPosition
      * When True, the Pie series will display marks trying to not overlap one 
               PROPERTY-PUT, 301, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPieSeries] Gradient
      * Pie Gradient Fill
               PROPERTY-GET, 302, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IPieSeries] SliceHeight
      * Each pie or donut series slice can be displayed using a different 
               PROPERTY-GET, 303, @SliceHeight,
                   "long" @Index, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] SliceHeight
      * Each pie or donut series slice can be displayed using a different 
               PROPERTY-PUT, 303, @SliceHeight,
                   "long" @Index, TYPE 3,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPieSeries] DarkPen
      * Pie Dark Border
               PROPERTY-GET, 304, @DarkPen
                       RETURNING "long", TYPE 3
      *[Class: @IPieSeries] DarkPen
      * Pie Dark Border
               PROPERTY-PUT, 304, @DarkPen,
                   "long (Property_Value)", TYPE 3
           
      * Draws circles or shapes at XY positions with specific Radius
           
      * IBubbleSeries
           CLASS @IBubbleSeries
               CLSID, 525EE6F2-ED2A-4C34-B87D-1ACF442C1A31
               NAME, "IBubbleSeries"
      *[Class: @IBubbleSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IBubbleSeries] Dark3D
      * Dark shading
               PROPERTY-GET, 2, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IBubbleSeries] Dark3D
      * Dark shading
               PROPERTY-PUT, 2, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBubbleSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IBubbleSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBubbleSeries] RadiusValues
      * The list of bubble radius values
               PROPERTY-GET, 30, @RadiusValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IBubbleSeries] Squared
      * Draw bubbles adjusting XY radius to feel squared
               PROPERTY-GET, 31, @Squared
                       RETURNING "boolean", TYPE 11
      *[Class: @IBubbleSeries] Squared
      * Draw bubbles adjusting XY radius to feel squared
               PROPERTY-PUT, 31, @Squared,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBubbleSeries] AddBubble
      * Adds a new bubble point to the Series
               METHOD, 32, @AddBubble,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @ARadius, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
           
      * Scheduling horizontal bars with connecting lines
           
      * IGanttSeries
           CLASS @IGanttSeries
               CLSID, 242B6C61-B4D3-470F-AB3C-10D5C72613A5
               NAME, "IGanttSeries"
      *[Class: @IGanttSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IGanttSeries] Dark3D
      * Dark shading
               PROPERTY-GET, 2, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IGanttSeries] Dark3D
      * Dark shading
               PROPERTY-PUT, 2, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IGanttSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IGanttSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGanttSeries] ConnectingPen
      * The pen used to draw the lines connecting gantt bars
               PROPERTY-GET, 30, @ConnectingPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IGanttSeries] EndValues
      * The list of End values for each gantt bar
               PROPERTY-GET, 31, @EndValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IGanttSeries] StartValues
      * The list of Start values for each gantt bar
               PROPERTY-GET, 32, @StartValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IGanttSeries] NextTask
      * The list of indexes of each gantt bar connection
               PROPERTY-GET, 33, @NextTask
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IGanttSeries] AddGantt
      * Adds a new gantt bar to the Series
               METHOD, 34, @AddGantt,
                   "double" @AStart, TYPE 5,
                   "double" @AEnd, TYPE 5,
                   "double" @AY, TYPE 5,
                   "BSTR" @SomeLabel, TYPE 8
                       RETURNING "long", TYPE 3
      *[Class: @IGanttSeries] AddGanttColor
      * Adds a new gantt bar specifying color
               METHOD, 35, @AddGanttColor,
                   "double" @AStart, TYPE 5,
                   "double" @AEnd, TYPE 5,
                   "double" @AY, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
           
      * Draws shapes and text at XY coordinates
           
      * IShapeSeries
           CLASS @IShapeSeries
               CLSID, BCE2D641-CE02-40E8-A645-BE36E65FF854
               NAME, "IShapeSeries"
      *[Class: @IShapeSeries] Alignment
      * Controls the shape text alignment
               PROPERTY-GET, 1, @Alignment
                       RETURNING "ETextAlignment", TYPE 3
      *[Class: @IShapeSeries] Alignment
      * Controls the shape text alignment
               PROPERTY-PUT, 1, @Alignment,
                   "ETextAlignment (Property_Value)", TYPE 3
      *[Class: @IShapeSeries] Brush
      * The background shape color and style
               PROPERTY-GET, 2, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IShapeSeries] Font
      * The font used to draw the shape text
               PROPERTY-GET, 3, @Font
                       RETURNING "IChartFont*", TYPE 9
      *[Class: @IShapeSeries] Pen
      * The pen used to draw the shape border
               PROPERTY-GET, 4, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IShapeSeries] RoundRectangle
      * When shape style is rectangle, draw round corners
               PROPERTY-GET, 5, @RoundRectangle
                       RETURNING "boolean", TYPE 11
      *[Class: @IShapeSeries] RoundRectangle
      * When shape style is rectangle, draw round corners
               PROPERTY-PUT, 5, @RoundRectangle,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IShapeSeries] Style
      * Sets the shape style (rectangle, triangle, etc)
               PROPERTY-GET, 6, @Style
                       RETURNING "EShapeStyle", TYPE 3
      *[Class: @IShapeSeries] Style
      * Sets the shape style (rectangle, triangle, etc)
               PROPERTY-PUT, 6, @Style,
                   "EShapeStyle (Property_Value)", TYPE 3
      *[Class: @IShapeSeries] Text
      * The string collection for shape text
               PROPERTY-GET, 7, @Text
                       RETURNING "IStrings*", TYPE 9
      *[Class: @IShapeSeries] Transparent
      * Controls if shape background is filled or not
               PROPERTY-GET, 8, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @IShapeSeries] Transparent
      * Controls if shape background is filled or not
               PROPERTY-PUT, 8, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IShapeSeries] X0
      * The left shape coordinate
               PROPERTY-GET, 9, @X0
                       RETURNING "double", TYPE 5
      *[Class: @IShapeSeries] X0
      * The left shape coordinate
               PROPERTY-PUT, 9, @X0,
                   "double (Property_Value)", TYPE 5
      *[Class: @IShapeSeries] X1
      * The right shape coordinate
               PROPERTY-GET, 10, @X1
                       RETURNING "double", TYPE 5
      *[Class: @IShapeSeries] X1
      * The right shape coordinate
               PROPERTY-PUT, 10, @X1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IShapeSeries] XYStyle
      * Controls if shape coordinates are in pixels or in axis scales
               PROPERTY-GET, 11, @XYStyle
                       RETURNING "EShapeXYStyle", TYPE 3
      *[Class: @IShapeSeries] XYStyle
      * Controls if shape coordinates are in pixels or in axis scales
               PROPERTY-PUT, 11, @XYStyle,
                   "EShapeXYStyle (Property_Value)", TYPE 3
      *[Class: @IShapeSeries] Y0
      * The top shape coordinate
               PROPERTY-GET, 12, @Y0
                       RETURNING "double", TYPE 5
      *[Class: @IShapeSeries] Y0
      * The top shape coordinate
               PROPERTY-PUT, 12, @Y0,
                   "double (Property_Value)", TYPE 5
      *[Class: @IShapeSeries] Y1
      * The bottom shape coordinate
               PROPERTY-GET, 13, @Y1
                       RETURNING "double", TYPE 5
      *[Class: @IShapeSeries] Y1
      * The bottom shape coordinate
               PROPERTY-PUT, 13, @Y1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IShapeSeries] ShapeImageLoad
      * Load image to Shape background
               METHOD, 14, @ShapeImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IShapeSeries] ShapeImageClear
      * Clear Shape BackImage
               METHOD, 15, @ShapeImageClear
      *[Class: @IShapeSeries] VertAlign
      * Sets vertical alignment of Text within a TChartShape Series shape.
               PROPERTY-GET, 16, @VertAlign
                       RETURNING "ETeeVertAlign", TYPE 3
      *[Class: @IShapeSeries] VertAlign
      * Sets vertical alignment of Text within a TChartShape Series shape.
               PROPERTY-PUT, 16, @VertAlign,
                   "ETeeVertAlign (Property_Value)", TYPE 3
      *[Class: @IShapeSeries] Gradient
      * Gradient fill of Shape
               PROPERTY-GET, 17, @Gradient
                       RETURNING "IGradient*", TYPE 9
           
      * Draws Arrows from Start XY to End XY values
           
      * IArrowSeries
           CLASS @IArrowSeries
               CLSID, 87A4795E-F0D0-4BCB-A940-281CF1F5A4B3
               NAME, "IArrowSeries"
      *[Class: @IArrowSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IArrowSeries] Dark3D
      * Dark shading
               PROPERTY-GET, 2, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IArrowSeries] Dark3D
      * Dark shading
               PROPERTY-PUT, 2, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IArrowSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IArrowSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IArrowSeries] ArrowHeight
      * The arrows head height in pixels
               PROPERTY-GET, 30, @ArrowHeight
                       RETURNING "long", TYPE 3
      *[Class: @IArrowSeries] ArrowHeight
      * The arrows head height in pixels
               PROPERTY-PUT, 30, @ArrowHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @IArrowSeries] ArrowWidth
      * The arrows head width in pixels
               PROPERTY-GET, 31, @ArrowWidth
                       RETURNING "long", TYPE 3
      *[Class: @IArrowSeries] ArrowWidth
      * The arrows head width in pixels
               PROPERTY-PUT, 31, @ArrowWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IArrowSeries] EndXValues
      * The list of ending horizontal values for each arrow
               PROPERTY-GET, 32, @EndXValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IArrowSeries] EndYValues
      * The list of ending vertical values for each arrow
               PROPERTY-GET, 33, @EndYValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IArrowSeries] StartXValues
      * The list of starting horizontal values for each arrow
               PROPERTY-GET, 34, @StartXValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IArrowSeries] StartYValues
      * The list of starting vertical values for each arrow
               PROPERTY-GET, 35, @StartYValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IArrowSeries] AddArrow
      * Adds a new arrow to the Series
               METHOD, 36, @AddArrow,
                   "double" @X0, TYPE 5,
                   "double" @Y0, TYPE 5,
                   "double" @X1, TYPE 5,
                   "double" @Y1, TYPE 5,
                   "BSTR" @ALabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IArrowSeries] ArrowPercent
               PROPERTY-GET, 301, @ArrowPercent
                       RETURNING "long", TYPE 3
      *[Class: @IArrowSeries] ArrowPercent
               PROPERTY-PUT, 301, @ArrowPercent,
                   "long (Property_Value)", TYPE 3
           
      * Common properties for BarSeries and HorizBarSeries
           
      * ICustomBarSeries
           CLASS @ICustomBarSeries
               CLSID, E398E2B5-773C-49D7-97ED-B52194919F3C
               NAME, "ICustomBarSeries"
      *[Class: @ICustomBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-GET, 20, @MultiBar
                       RETURNING "EMultiBar", TYPE 3
      *[Class: @ICustomBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-PUT, 20, @MultiBar,
                   "EMultiBar (Property_Value)", TYPE 3
      *[Class: @ICustomBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-GET, 21, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-PUT, 21, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomBarSeries] BarBrush
      * The brush used to fill the Bars
               PROPERTY-GET, 22, @BarBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ICustomBarSeries] BarPen
      * The pen used to draw the Bar borders
               PROPERTY-GET, 23, @BarPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustomBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-GET, 24, @BarStyle
                       RETURNING "EBarStyle", TYPE 3
      *[Class: @ICustomBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-PUT, 24, @BarStyle,
                   "EBarStyle (Property_Value)", TYPE 3
      *[Class: @ICustomBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-GET, 25, @BarWidthPercent
                       RETURNING "long", TYPE 3
      *[Class: @ICustomBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-PUT, 25, @BarWidthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-GET, 26, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-PUT, 26, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-GET, 27, @OffsetPercent
                       RETURNING "long", TYPE 3
      *[Class: @ICustomBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-PUT, 27, @OffsetPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-GET, 28, @SideMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-PUT, 28, @SideMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-GET, 29, @UseOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-PUT, 29, @UseOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-GET, 30, @Origin
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-PUT, 30, @Origin,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBarSeries] GetOriginPos
      * Returns the baseline pixel coordinate of ValueIndexth Bar
               METHOD, 31, @GetOriginPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ICustomBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-GET, 32, @AutoBarSize
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-PUT, 32, @AutoBarSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomBarSeries] BarImageLoad
      * Load Bar image
               METHOD, 33, @BarImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @ICustomBarSeries] BarImageClear
      * Clear Bar image
               METHOD, 34, @BarImageClear
      *[Class: @ICustomBarSeries] Gradient
      * Sets the characteristics of gradients within Bars of a Bar Series.
               PROPERTY-GET, 45, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ICustomBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-GET, 2, @StackGroup
                       RETURNING "long", TYPE 3
      *[Class: @ICustomBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-PUT, 2, @StackGroup,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-GET, 111, @ConePercent
                       RETURNING "long", TYPE 3
      *[Class: @ICustomBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-PUT, 111, @ConePercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomBarSeries] TickLines
      * The pen used to draw the TickLines
               PROPERTY-GET, 201, @TickLines
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustomBarSeries] DepthPercent
               PROPERTY-GET, 202, @DepthPercent
                       RETURNING "long", TYPE 3
      *[Class: @ICustomBarSeries] DepthPercent
               PROPERTY-PUT, 202, @DepthPercent,
                   "long (Property_Value)", TYPE 3
           
      * Vertical Bars Series ( Normal, Side-To-Side and Stacked)
           
      * IBarSeries
           CLASS @IBarSeries
               CLSID, 8F67347B-C140-4CFD-8936-712A6A974B3D
               NAME, "IBarSeries"
      *[Class: @IBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-GET, 20, @MultiBar
                       RETURNING "EMultiBar", TYPE 3
      *[Class: @IBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-PUT, 20, @MultiBar,
                   "EMultiBar (Property_Value)", TYPE 3
      *[Class: @IBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-GET, 21, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-PUT, 21, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarSeries] BarBrush
      * The brush used to fill the Bars
               PROPERTY-GET, 22, @BarBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IBarSeries] BarPen
      * The pen used to draw the Bar borders
               PROPERTY-GET, 23, @BarPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-GET, 24, @BarStyle
                       RETURNING "EBarStyle", TYPE 3
      *[Class: @IBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-PUT, 24, @BarStyle,
                   "EBarStyle (Property_Value)", TYPE 3
      *[Class: @IBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-GET, 25, @BarWidthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-PUT, 25, @BarWidthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-GET, 26, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-PUT, 26, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-GET, 27, @OffsetPercent
                       RETURNING "long", TYPE 3
      *[Class: @IBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-PUT, 27, @OffsetPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-GET, 28, @SideMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-PUT, 28, @SideMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-GET, 29, @UseOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-PUT, 29, @UseOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-GET, 30, @Origin
                       RETURNING "double", TYPE 5
      *[Class: @IBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-PUT, 30, @Origin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBarSeries] GetOriginPos
      * Returns the baseline pixel coordinate of ValueIndexth Bar
               METHOD, 31, @GetOriginPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-GET, 32, @AutoBarSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-PUT, 32, @AutoBarSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarSeries] BarImageLoad
      * Load Bar image
               METHOD, 33, @BarImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IBarSeries] BarImageClear
      * Clear Bar image
               METHOD, 34, @BarImageClear
      *[Class: @IBarSeries] Gradient
      * Sets the characteristics of gradients within Bars of a Bar Series.
               PROPERTY-GET, 45, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-GET, 2, @StackGroup
                       RETURNING "long", TYPE 3
      *[Class: @IBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-PUT, 2, @StackGroup,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-GET, 111, @ConePercent
                       RETURNING "long", TYPE 3
      *[Class: @IBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-PUT, 111, @ConePercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarSeries] TickLines
      * The pen used to draw the TickLines
               PROPERTY-GET, 201, @TickLines
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBarSeries] DepthPercent
               PROPERTY-GET, 202, @DepthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IBarSeries] DepthPercent
               PROPERTY-PUT, 202, @DepthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-GET, 40, @BarWidth
                       RETURNING "long", TYPE 3
      *[Class: @IBarSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-PUT, 40, @BarWidth,
                   "long (Property_Value)", TYPE 3
           
      * Horizontal Bars Series (Normal, Side-To-Side and Stacked)
           
      * IHorizBarSeries
           CLASS @IHorizBarSeries
               CLSID, A034358B-E476-46CA-9232-E3A1773FFC7F
               NAME, "IHorizBarSeries"
      *[Class: @IHorizBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-GET, 20, @MultiBar
                       RETURNING "EMultiBar", TYPE 3
      *[Class: @IHorizBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-PUT, 20, @MultiBar,
                   "EMultiBar (Property_Value)", TYPE 3
      *[Class: @IHorizBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-GET, 21, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-PUT, 21, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizBarSeries] BarBrush
      * The brush used to fill the Bars
               PROPERTY-GET, 22, @BarBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IHorizBarSeries] BarPen
      * The pen used to draw the Bar borders
               PROPERTY-GET, 23, @BarPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-GET, 24, @BarStyle
                       RETURNING "EBarStyle", TYPE 3
      *[Class: @IHorizBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-PUT, 24, @BarStyle,
                   "EBarStyle (Property_Value)", TYPE 3
      *[Class: @IHorizBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-GET, 25, @BarWidthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IHorizBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-PUT, 25, @BarWidthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-GET, 26, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-PUT, 26, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-GET, 27, @OffsetPercent
                       RETURNING "long", TYPE 3
      *[Class: @IHorizBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-PUT, 27, @OffsetPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-GET, 28, @SideMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-PUT, 28, @SideMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-GET, 29, @UseOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-PUT, 29, @UseOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-GET, 30, @Origin
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-PUT, 30, @Origin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBarSeries] GetOriginPos
      * Returns the baseline pixel coordinate of ValueIndexth Bar
               METHOD, 31, @GetOriginPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IHorizBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-GET, 32, @AutoBarSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-PUT, 32, @AutoBarSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizBarSeries] BarImageLoad
      * Load Bar image
               METHOD, 33, @BarImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IHorizBarSeries] BarImageClear
      * Clear Bar image
               METHOD, 34, @BarImageClear
      *[Class: @IHorizBarSeries] Gradient
      * Sets the characteristics of gradients within Bars of a Bar Series.
               PROPERTY-GET, 45, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IHorizBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-GET, 2, @StackGroup
                       RETURNING "long", TYPE 3
      *[Class: @IHorizBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-PUT, 2, @StackGroup,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-GET, 111, @ConePercent
                       RETURNING "long", TYPE 3
      *[Class: @IHorizBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-PUT, 111, @ConePercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizBarSeries] TickLines
      * The pen used to draw the TickLines
               PROPERTY-GET, 201, @TickLines
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizBarSeries] DepthPercent
               PROPERTY-GET, 202, @DepthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IHorizBarSeries] DepthPercent
               PROPERTY-PUT, 202, @DepthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizBarSeries] BarHeight
      * Custom Bar height in pixels (overrides BarWidthPercent)
               PROPERTY-GET, 40, @BarHeight
                       RETURNING "long", TYPE 3
      *[Class: @IHorizBarSeries] BarHeight
      * Custom Bar height in pixels (overrides BarWidthPercent)
               PROPERTY-PUT, 40, @BarHeight,
                   "long (Property_Value)", TYPE 3
           
      * Financial Candle Bar and Candle Stick series
           
      * ICandleSeries
           CLASS @ICandleSeries
               CLSID, 33A36289-30EE-41B3-9192-C3444EE2DD6F
               NAME, "ICandleSeries"
      *[Class: @ICandleSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @ICandleSeries] Dark3D
      * Dark shading
               PROPERTY-GET, 2, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @ICandleSeries] Dark3D
      * Dark shading
               PROPERTY-PUT, 2, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICandleSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ICandleSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICandleSeries] CandleStyle
      * The Candle style ( Bar or Stick )
               PROPERTY-GET, 35, @CandleStyle
                       RETURNING "ECandleStyle", TYPE 3
      *[Class: @ICandleSeries] CandleStyle
      * The Candle style ( Bar or Stick )
               PROPERTY-PUT, 35, @CandleStyle,
                   "ECandleStyle (Property_Value)", TYPE 3
      *[Class: @ICandleSeries] CandleWidth
      * The width in pixels of each Candle bar
               PROPERTY-GET, 36, @CandleWidth
                       RETURNING "long", TYPE 3
      *[Class: @ICandleSeries] CandleWidth
      * The width in pixels of each Candle bar
               PROPERTY-PUT, 36, @CandleWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICandleSeries] CloseValues
      * The list of Close price values
               PROPERTY-GET, 30, @CloseValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICandleSeries] DateValues
      * The list of Date values
               PROPERTY-GET, 31, @DateValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICandleSeries] DownCloseColor
      * The color used to fill Candles with lower closing prices
               PROPERTY-GET, 37, @DownCloseColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICandleSeries] DownCloseColor
      * The color used to fill Candles with lower closing prices
               PROPERTY-PUT, 37, @DownCloseColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICandleSeries] HighValues
      * The list of High price values
               PROPERTY-GET, 32, @HighValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICandleSeries] LowValues
      * The list of Low price values
               PROPERTY-GET, 33, @LowValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICandleSeries] OpenValues
      * The list of Open price values
               PROPERTY-GET, 34, @OpenValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICandleSeries] ShowCloseTick
      * Shows the Candle tick for the Close price
               PROPERTY-GET, 38, @ShowCloseTick
                       RETURNING "boolean", TYPE 11
      *[Class: @ICandleSeries] ShowCloseTick
      * Shows the Candle tick for the Close price
               PROPERTY-PUT, 38, @ShowCloseTick,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICandleSeries] ShowOpenTick
      * Shows the Candle tick for the Open price
               PROPERTY-GET, 39, @ShowOpenTick
                       RETURNING "boolean", TYPE 11
      *[Class: @ICandleSeries] ShowOpenTick
      * Shows the Candle tick for the Open price
               PROPERTY-PUT, 39, @ShowOpenTick,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICandleSeries] UpCloseColor
      * The color used to fill the Candle for greater Closing prices
               PROPERTY-GET, 40, @UpCloseColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICandleSeries] UpCloseColor
      * The color used to fill the Candle for greater Closing prices
               PROPERTY-PUT, 40, @UpCloseColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICandleSeries] AddCandle
      * Adds a new Candle point to the Series
               METHOD, 42, @AddCandle,
                   "double" @DateValue, TYPE 5,
                   "double" @OpenValue, TYPE 5,
                   "double" @HighValue, TYPE 5,
                   "double" @LowValue, TYPE 5,
                   "double" @CloseValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @ICandleSeries] HighLowPen
      * To set the pen properties for the HighLow
               PROPERTY-GET, 301, @HighLowPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICandleSeries] ColorStyle
      * Gets Candle ColorStyle
               PROPERTY-GET, 302, @ColorStyle
                       RETURNING "ECandleColorStyle", TYPE 3
      *[Class: @ICandleSeries] ColorStyle
      * Gets Candle ColorStyle
               PROPERTY-PUT, 302, @ColorStyle,
                   "ECandleColorStyle (Property_Value)", TYPE 3
      *[Class: @ICandleSeries] UpCloseGradient
      * Gradient for UpClose Values
               PROPERTY-GET, 303, @UpCloseGradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ICandleSeries] DownCloseGradient
      * Gradient for DownClose Values
               PROPERTY-GET, 304, @DownCloseGradient
                       RETURNING "IGradient*", TYPE 9
           
      * Ancestor Class Polar/Radar Series
           
      * ICustomPolarSeries
           CLASS @ICustomPolarSeries
               CLSID, BC177EC6-5309-4FEA-9C0F-23C97ED93AAD
               NAME, "ICustomPolarSeries"
      *[Class: @ICustomPolarSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @ICustomPolarSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomPolarSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @ICustomPolarSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomPolarSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @ICustomPolarSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @ICustomPolarSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @ICustomPolarSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @ICustomPolarSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICustomPolarSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICustomPolarSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomPolarSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomPolarSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @ICustomPolarSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomPolarSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @ICustomPolarSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ICustomPolarSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-GET, 30, @AngleIncrement
                       RETURNING "double", TYPE 5
      *[Class: @ICustomPolarSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-PUT, 30, @AngleIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomPolarSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-GET, 31, @CloseCircle
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomPolarSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-PUT, 31, @CloseCircle,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomPolarSeries] Pen
      * The Pen used to draw the polar lines
               PROPERTY-GET, 32, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustomPolarSeries] Pointer
      * The pointer attributes for polar points (point markers)
               PROPERTY-GET, 33, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @ICustomPolarSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-GET, 34, @RadiusIncrement
                       RETURNING "double", TYPE 5
      *[Class: @ICustomPolarSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-PUT, 34, @RadiusIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomPolarSeries] AngleValues
      * The list of angle values for each polar point
               PROPERTY-GET, 35, @AngleValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICustomPolarSeries] RadiusValues
      * The list of radius values for each polar point
               PROPERTY-GET, 36, @RadiusValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICustomPolarSeries] DrawRing
      * Draws a circular ring at "Value" radius in the "Z" plane
               METHOD, 38, @DrawRing,
                   "double" @Value, TYPE 5,
                   "long" @Z, TYPE 3
      *[Class: @ICustomPolarSeries] CirclePen
      * The pen used to draw the circle border
               PROPERTY-GET, 39, @CirclePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustomPolarSeries] CircleLabels
      * Outer circle Label characteristics
               PROPERTY-GET, 40, @CircleLabels
                       RETURNING "ICircleLabels*", TYPE 9
      *[Class: @ICustomPolarSeries] Brush
      * Background Brush
               PROPERTY-GET, 3, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ICustomPolarSeries] LoadBackImage
      * Load bitmap to background
               METHOD, 13, @LoadBackImage,
                   "BSTR" @FileName, TYPE 8
      *[Class: @ICustomPolarSeries] ClearBackImage
      * Clear BackImage
               METHOD, 14, @ClearBackImage
      *[Class: @ICustomPolarSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-GET, 155, @ClockWiseLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomPolarSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-PUT, 155, @ClockWiseLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomPolarSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-GET, 156, @CircleLabelsInside
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomPolarSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-PUT, 156, @CircleLabelsInside,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomPolarSeries] Transparency
      * Fill transparency
               PROPERTY-GET, 115, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ICustomPolarSeries] Transparency
      * Fill transparency
               PROPERTY-PUT, 115, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomPolarSeries] CircleGradient
      * Circle gradient characteristics for the back area of the polar serie.
               PROPERTY-GET, 301, @CircleGradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ICustomPolarSeries] DrawZone
      * Draws an elliptical "zone"  (like a donut) from Min to Max (in axis 
               METHOD, 302, @DrawZone,
                   "double" @Min, TYPE 5,
                   "double" @Max, TYPE 5,
                   "long" @Z, TYPE 3
           
      * Ancestor Class 3D Series Types
           
      * ICustom3DSeries
           CLASS @ICustom3DSeries
               CLSID, 572AB9C0-A7A4-44A1-B4C2-A25F04B1FF3B
               NAME, "ICustom3DSeries"
      *[Class: @ICustom3DSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustom3DSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICustom3DSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustom3DSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ICustom3DSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustom3DSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @ICustom3DSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @ICustom3DSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
           
      * Vertical Bar Series with Error "T" on top
           
      * IErrorBarSeries
           CLASS @IErrorBarSeries
               CLSID, C3989F2F-FA98-47AB-9CE2-3A1FC82A2A5F
               NAME, "IErrorBarSeries"
      *[Class: @IErrorBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-GET, 20, @MultiBar
                       RETURNING "EMultiBar", TYPE 3
      *[Class: @IErrorBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-PUT, 20, @MultiBar,
                   "EMultiBar (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-GET, 21, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-PUT, 21, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorBarSeries] BarBrush
      * The brush used to fill the Bars
               PROPERTY-GET, 22, @BarBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IErrorBarSeries] BarPen
      * The pen used to draw the Bar borders
               PROPERTY-GET, 23, @BarPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IErrorBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-GET, 24, @BarStyle
                       RETURNING "EBarStyle", TYPE 3
      *[Class: @IErrorBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-PUT, 24, @BarStyle,
                   "EBarStyle (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-GET, 25, @BarWidthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IErrorBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-PUT, 25, @BarWidthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-GET, 26, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-PUT, 26, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-GET, 27, @OffsetPercent
                       RETURNING "long", TYPE 3
      *[Class: @IErrorBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-PUT, 27, @OffsetPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-GET, 28, @SideMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-PUT, 28, @SideMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-GET, 29, @UseOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-PUT, 29, @UseOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-GET, 30, @Origin
                       RETURNING "double", TYPE 5
      *[Class: @IErrorBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-PUT, 30, @Origin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IErrorBarSeries] GetOriginPos
      * Returns the baseline pixel coordinate of ValueIndexth Bar
               METHOD, 31, @GetOriginPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IErrorBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-GET, 32, @AutoBarSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-PUT, 32, @AutoBarSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorBarSeries] BarImageLoad
      * Load Bar image
               METHOD, 33, @BarImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IErrorBarSeries] BarImageClear
      * Clear Bar image
               METHOD, 34, @BarImageClear
      *[Class: @IErrorBarSeries] Gradient
      * Sets the characteristics of gradients within Bars of a Bar Series.
               PROPERTY-GET, 45, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IErrorBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-GET, 2, @StackGroup
                       RETURNING "long", TYPE 3
      *[Class: @IErrorBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-PUT, 2, @StackGroup,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-GET, 111, @ConePercent
                       RETURNING "long", TYPE 3
      *[Class: @IErrorBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-PUT, 111, @ConePercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] TickLines
      * The pen used to draw the TickLines
               PROPERTY-GET, 201, @TickLines
                       RETURNING "IPen*", TYPE 9
      *[Class: @IErrorBarSeries] DepthPercent
               PROPERTY-GET, 202, @DepthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IErrorBarSeries] DepthPercent
               PROPERTY-PUT, 202, @DepthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-GET, 40, @BarWidth
                       RETURNING "long", TYPE 3
      *[Class: @IErrorBarSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-PUT, 40, @BarWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] ErrorPen
      * The Pen used to draw the error bar lines
               PROPERTY-GET, 50, @ErrorPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IErrorBarSeries] ErrorValues
      * The list of Error values for each error bar
               PROPERTY-GET, 51, @ErrorValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IErrorBarSeries] ErrorWidth
      * The width (in pixels or scales) of the error bar lines
               PROPERTY-GET, 52, @ErrorWidth
                       RETURNING "long", TYPE 3
      *[Class: @IErrorBarSeries] ErrorWidth
      * The width (in pixels or scales) of the error bar lines
               PROPERTY-PUT, 52, @ErrorWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] ErrorWidthUnits
      * Controls how ErrorWidth size is expressed (in pixels or scales)
               PROPERTY-GET, 53, @ErrorWidthUnits
                       RETURNING "EErrorWidthUnits", TYPE 3
      *[Class: @IErrorBarSeries] ErrorWidthUnits
      * Controls how ErrorWidth size is expressed (in pixels or scales)
               PROPERTY-PUT, 53, @ErrorWidthUnits,
                   "EErrorWidthUnits (Property_Value)", TYPE 3
      *[Class: @IErrorBarSeries] AddErrorBar
      * Adds a new Error bar point to the Series
               METHOD, 54, @AddErrorBar,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AError, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
           
      * Financial Volume Series. Thin vertical Bar lines
           
      * IVolumeSeries
           CLASS @IVolumeSeries
               CLSID, 76FD2175-D350-4AA2-8039-DF0219CE0E02
               NAME, "IVolumeSeries"
      *[Class: @IVolumeSeries] VolumeValues
      * The list of volume values for each volume bar point
               PROPERTY-GET, 30, @VolumeValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IVolumeSeries] LinePen
      * The pen used to draw the line
               PROPERTY-GET, 4, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IVolumeSeries] UseYOrigin
      * When True Volume Lines aligned to the YOrigin value
               PROPERTY-GET, 1, @UseYOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IVolumeSeries] UseYOrigin
      * When True Volume Lines aligned to the YOrigin value
               PROPERTY-PUT, 1, @UseYOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IVolumeSeries] YOrigin
      * Defines the bottom position of Volume Lines
               PROPERTY-GET, 2, @YOrigin
                       RETURNING "double", TYPE 5
      *[Class: @IVolumeSeries] YOrigin
      * Defines the bottom position of Volume Lines
               PROPERTY-PUT, 2, @YOrigin,
                   "double (Property_Value)", TYPE 5
           
      * Calculates Addition of values
           
      * IAddFunction
           CLASS @IAddFunction
               CLSID, CE406E6D-5E36-4E5C-B428-7FC09FFC6D52
               NAME, "IAddFunction"
           
      * Calculates Subtraction of values
           
      * ISubtractFunction
           CLASS @ISubtractFunction
               CLSID, 5B4D6681-BF0D-4C93-9FFF-F69EC33006B0
               NAME, "ISubtractFunction"
           
      * Calculates Multiplication of values
           
      * IMultiplyFunction
           CLASS @IMultiplyFunction
               CLSID, F584F055-E4B7-4DA7-98B6-5271377A64F8
               NAME, "IMultiplyFunction"
           
      * Calculates Division of values
           
      * IDivideFunction
           CLASS @IDivideFunction
               CLSID, 36252E45-A8BA-4A80-BD9E-C92066806930
               NAME, "IDivideFunction"
           
      * Calculates the Average value
           
      * IAverageFunction
           CLASS @IAverageFunction
               CLSID, 6E4BDC15-A889-49DF-9FCB-291D8FB653B1
               NAME, "IAverageFunction"
      *[Class: @IAverageFunction] IncludeNulls
      * Include nulls as points in average calculation
               PROPERTY-GET, 1, @IncludeNulls
                       RETURNING "boolean", TYPE 11
      *[Class: @IAverageFunction] IncludeNulls
      * Include nulls as points in average calculation
               PROPERTY-PUT, 1, @IncludeNulls,
                   "boolean (Property_Value)", TYPE 11
           
      * Calculates the High value
           
      * IHighFunction
           CLASS @IHighFunction
               CLSID, 6A34DD9E-CB93-4BF9-933C-CFF73A9D8259
               NAME, "IHighFunction"
           
      * Calculates the Low value
           
      * ILowFunction
           CLASS @ILowFunction
               CLSID, A24D7CBE-1A71-43B0-8A4F-F41588FD0191
               NAME, "ILowFunction"
           
      * Calculates Curve Fitting using polynomial of "PolyDegree" factors
           
      * ICurveFittingFunction
           CLASS @ICurveFittingFunction
               CLSID, B46CB7AA-0292-4F3C-A624-96AF77AE1DEC
               NAME, "ICurveFittingFunction"
      *[Class: @ICurveFittingFunction] PolyDegree
      * The number of polynomial degrees used to calculate fitting
               PROPERTY-GET, 1, @PolyDegree
                       RETURNING "long", TYPE 3
      *[Class: @ICurveFittingFunction] PolyDegree
      * The number of polynomial degrees used to calculate fitting
               PROPERTY-PUT, 1, @PolyDegree,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICurveFittingFunction] TypeFitting
      * The fitting style (polynomical)
               PROPERTY-GET, 2, @TypeFitting
                       RETURNING "ETypeFitting", TYPE 3
      *[Class: @ICurveFittingFunction] TypeFitting
      * The fitting style (polynomical)
               PROPERTY-PUT, 2, @TypeFitting,
                   "ETypeFitting (Property_Value)", TYPE 3
      *[Class: @ICurveFittingFunction] FirstPoint
      * Sets the first point index used to display the fitting
               PROPERTY-GET, 3, @FirstPoint
                       RETURNING "long", TYPE 3
      *[Class: @ICurveFittingFunction] FirstPoint
      * Sets the first point index used to display the fitting
               PROPERTY-PUT, 3, @FirstPoint,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICurveFittingFunction] LastPoint
      * Sets the last point index used to display the fitting
               PROPERTY-GET, 4, @LastPoint
                       RETURNING "long", TYPE 3
      *[Class: @ICurveFittingFunction] LastPoint
      * Sets the last point index used to display the fitting
               PROPERTY-PUT, 4, @LastPoint,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICurveFittingFunction] FirstCalcPoint
      * Sets the first point index used to calculate the fitting
               PROPERTY-GET, 5, @FirstCalcPoint
                       RETURNING "long", TYPE 3
      *[Class: @ICurveFittingFunction] FirstCalcPoint
      * Sets the first point index used to calculate the fitting
               PROPERTY-PUT, 5, @FirstCalcPoint,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICurveFittingFunction] LastCalcPoint
      * Sets the last point index used to calculate the fitting
               PROPERTY-GET, 6, @LastCalcPoint
                       RETURNING "long", TYPE 3
      *[Class: @ICurveFittingFunction] LastCalcPoint
      * Sets the last point index used to calculate the fitting
               PROPERTY-PUT, 6, @LastCalcPoint,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICurveFittingFunction] AnswerVector
      * Returns polynomial coefficients used to calculate Curve-Fitting points
               PROPERTY-GET, 7, @AnswerVector,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ICurveFittingFunction] GetCurveYValue
      * Calculates the Y value corresponding to a given X value
               METHOD, 8, @GetCurveYValue,
                   "double" @X, TYPE 5
                       RETURNING "double", TYPE 5
           
      * Calculates Exponential Average
           
      * IExpAvgFunction
           CLASS @IExpAvgFunction
               CLSID, 16DAAA3E-ED25-497B-8B0B-AE35F598C2AD
               NAME, "IExpAvgFunction"
      *[Class: @IExpAvgFunction] Weight
      * The exponential average weight used to calculate the average
               PROPERTY-GET, 1, @Weight
                       RETURNING "double", TYPE 5
      *[Class: @IExpAvgFunction] Weight
      * The exponential average weight used to calculate the average
               PROPERTY-PUT, 1, @Weight,
                   "double (Property_Value)", TYPE 5
           
      * Calculates Moving Average ( average of last "Period" values )
           
      * IMovingAvgFunction
           CLASS @IMovingAvgFunction
               CLSID, D89F7597-272A-42DD-8999-73AD5D799AFA
               NAME, "IMovingAvgFunction"
      *[Class: @IMovingAvgFunction] Weighted
      * Controls if values are weighted when calculating the moving average
               PROPERTY-GET, 1, @Weighted
                       RETURNING "boolean", TYPE 11
      *[Class: @IMovingAvgFunction] Weighted
      * Controls if values are weighted when calculating the moving average
               PROPERTY-PUT, 1, @Weighted,
                   "boolean (Property_Value)", TYPE 11
           
      * TeeChart object for Font attributes
           
      * IChartFont
           CLASS @IChartFont
               CLSID, EBEDCFDC-A198-4879-8873-F20A29395688
               NAME, "IChartFont"
      *[Class: @IChartFont] Name
      * The Font name (Arial, Courier, etc)
               PROPERTY-GET, 1, @Name
                       RETURNING "BSTR", TYPE 8
      *[Class: @IChartFont] Name
      * The Font name (Arial, Courier, etc)
               PROPERTY-PUT, 1, @Name,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IChartFont] Size
      * The Font size
               PROPERTY-GET, 2, @Size
                       RETURNING "long", TYPE 3
      *[Class: @IChartFont] Size
      * The Font size
               PROPERTY-PUT, 2, @Size,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartFont] Bold
      * Enable Font Bold
               PROPERTY-GET, 3, @Bold
                       RETURNING "boolean", TYPE 11
      *[Class: @IChartFont] Bold
      * Enable Font Bold
               PROPERTY-PUT, 3, @Bold,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IChartFont] Italic
      * Enable Font Italic
               PROPERTY-GET, 4, @Italic
                       RETURNING "boolean", TYPE 11
      *[Class: @IChartFont] Italic
      * Enable Font Italic
               PROPERTY-PUT, 4, @Italic,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IChartFont] Underline
      * Enable Font Underline
               PROPERTY-GET, 5, @Underline
                       RETURNING "boolean", TYPE 11
      *[Class: @IChartFont] Underline
      * Enable Font Underline
               PROPERTY-PUT, 5, @Underline,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IChartFont] Strikethrough
      * Enable Font Strikethrough
               PROPERTY-GET, 6, @Strikethrough
                       RETURNING "boolean", TYPE 11
      *[Class: @IChartFont] Strikethrough
      * Enable Font Strikethrough
               PROPERTY-PUT, 6, @Strikethrough,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IChartFont] Charset
      * The character set of the font
               PROPERTY-GET, 8, @Charset
                       RETURNING "short", TYPE 2
      *[Class: @IChartFont] Charset
      * The character set of the font
               PROPERTY-PUT, 8, @Charset,
                   "short (Property_Value)", TYPE 2
      *[Class: @IChartFont] Color
      * The Font color
               PROPERTY-GET, 9, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IChartFont] Color
      * The Font color
               PROPERTY-PUT, 9, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IChartFont] Height
      * Font height
               PROPERTY-GET, 7, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IChartFont] Height
      * Font height
               PROPERTY-PUT, 7, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartFont] PixelsPerInch
      * Use to size fonts from onscreen Chart to printer
               PROPERTY-GET, 10, @PixelsPerInch
                       RETURNING "long", TYPE 3
           
      * Calculates Momentum: Value(t) - Value(t-Period)
           
      * IMomentumFunction
           CLASS @IMomentumFunction
               CLSID, 676579F0-DD63-45AB-A1C8-8E0BAF79382D
               NAME, "IMomentumFunction"
           
      * Allows transparency to display BackColor when using patterned brushes
           
      * ECanvasBackMode
           CLASS @ECanvasBackMode
               CLSID, 7CE13668-B8F1-4183-B382-E28205A33FA9
               NAME, "ECanvasBackMode"
      * "long cbmOpaque"
               ENUMERATOR, @cbmOpaque, 2
      * "long cbmTransparent"
               ENUMERATOR, @cbmTransparent, 1
      * "long cbmNone"
               ENUMERATOR, @cbmNone, 0
           
      * Alignment for Canvas TextOut
           
      * ECanvasTextAlign
           CLASS @ECanvasTextAlign
               CLSID, E2C81874-DF61-40BD-B258-1202D362082F
               NAME, "ECanvasTextAlign"
      * "long ctaLeft"
               ENUMERATOR, @ctaLeft, 0
      * "long ctaCenter"
               ENUMERATOR, @ctaCenter, 1
      * "long ctaRight"
               ENUMERATOR, @ctaRight, 2
           
      * PieOtherSlice interface
           
      * IPieOtherSlice
           CLASS @IPieOtherSlice
               CLSID, B69D6373-C0A2-4C3D-9930-03C1EF1DBF04
               NAME, "IPieOtherSlice"
      *[Class: @IPieOtherSlice] Style
      * Defines how Other Pie slice will be obtained
               PROPERTY-GET, 1, @Style
                       RETURNING "EPieOtherStyle", TYPE 3
      *[Class: @IPieOtherSlice] Style
      * Defines how Other Pie slice will be obtained
               PROPERTY-PUT, 1, @Style,
                   "EPieOtherStyle (Property_Value)", TYPE 3
      *[Class: @IPieOtherSlice] Text
      * Label for Otherslice
               PROPERTY-GET, 2, @Text
                       RETURNING "BSTR", TYPE 8
      *[Class: @IPieOtherSlice] Text
      * Label for Otherslice
               PROPERTY-PUT, 2, @Text,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IPieOtherSlice] Value
      * Value of Otherslice threshold
               PROPERTY-GET, 3, @Value
                       RETURNING "double", TYPE 5
      *[Class: @IPieOtherSlice] Value
      * Value of Otherslice threshold
               PROPERTY-PUT, 3, @Value,
                   "double (Property_Value)", TYPE 5
      *[Class: @IPieOtherSlice] Legend
      * It controls a sub-legend filled with pie slices that belong to "Other" 
               PROPERTY-GET, 201, @Legend
                       RETURNING "ILegend*", TYPE 9
           
      * Type defines how Other Pie slice will be obtained
           
      * EPieOtherStyle
           CLASS @EPieOtherStyle
               CLSID, E09E86D8-CA82-4D59-A172-6D21255765F0
               NAME, "EPieOtherStyle"
      * "long poNone"
               ENUMERATOR, @poNone, 0
      * "long poBelowPercent"
               ENUMERATOR, @poBelowPercent, 1
      * "long poBelowValue"
               ENUMERATOR, @poBelowValue, 2
           
      * ExplodedSlices interface
           
      * IExplodedSlices
           CLASS @IExplodedSlices
               CLSID, 57821C6A-E2CA-4BCE-AE1E-5B71BD5ABA8A
               NAME, "IExplodedSlices"
      *[Class: @IExplodedSlices] Value
      * Value (distance) to explode slice
               PROPERTY-GET, 1, @Value,
                   "long" @Index, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IExplodedSlices] Value
      * Value (distance) to explode slice
               PROPERTY-PUT, 1, @Value,
                   "long" @Index, TYPE 3,
                   "long (Property_Value)", TYPE 3
           
      * Ancestor class, Surface color palettes.
           
      * ICustom3DPaletteSeries
           CLASS @ICustom3DPaletteSeries
               CLSID, 84473F82-D3C3-4CB9-899F-F2E770597639
               NAME, "ICustom3DPaletteSeries"
      *[Class: @ICustom3DPaletteSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DPaletteSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DPaletteSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DPaletteSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DPaletteSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustom3DPaletteSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICustom3DPaletteSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DPaletteSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustom3DPaletteSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ICustom3DPaletteSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustom3DPaletteSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @ICustom3DPaletteSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @ICustom3DPaletteSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DPaletteSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DPaletteSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICustom3DPaletteSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICustom3DPaletteSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICustom3DPaletteSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICustom3DPaletteSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DPaletteSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustom3DPaletteSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustom3DPaletteSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustom3DPaletteSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustom3DPaletteSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustom3DPaletteSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @ICustom3DPaletteSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @ICustom3DPaletteSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICustom3DPaletteSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICustom3DPaletteSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICustom3DPaletteSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @ICustom3DPaletteSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @ICustom3DPaletteSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @ICustom3DPaletteSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustom3DPaletteSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustom3DPaletteSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DPaletteSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustom3DPaletteSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DPaletteSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
           
      * Ancestor Class, Surface and Contour Series
           
      * ICustom3DGridSeries
           CLASS @ICustom3DGridSeries
               CLSID, 65E7F4F2-9297-4B01-997D-844DB5114C21
               NAME, "ICustom3DGridSeries"
      *[Class: @ICustom3DGridSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DGridSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DGridSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DGridSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DGridSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustom3DGridSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ICustom3DGridSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DGridSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustom3DGridSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ICustom3DGridSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustom3DGridSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @ICustom3DGridSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @ICustom3DGridSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DGridSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DGridSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICustom3DGridSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICustom3DGridSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICustom3DGridSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICustom3DGridSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DGridSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustom3DGridSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustom3DGridSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustom3DGridSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustom3DGridSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustom3DGridSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @ICustom3DGridSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @ICustom3DGridSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICustom3DGridSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICustom3DGridSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICustom3DGridSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @ICustom3DGridSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @ICustom3DGridSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @ICustom3DGridSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustom3DGridSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustom3DGridSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DGridSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustom3DGridSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DGridSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustom3DGridSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-GET, 6, @NumXValues
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DGridSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-PUT, 6, @NumXValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustom3DGridSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-GET, 7, @NumZValues
                       RETURNING "long", TYPE 3
      *[Class: @ICustom3DGridSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-PUT, 7, @NumZValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustom3DGridSeries] GetXZValue
      * Returns the surface cell value for XZ indexes
               METHOD, 15, @GetXZValue,
                   "long" @X, TYPE 3,
                   "long" @Z, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ICustom3DGridSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-GET, 313, @IrregularGrid
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustom3DGridSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-PUT, 313, @IrregularGrid,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustom3DGridSeries] SmoothGrid3D
      * Smooth the Serie using a simple linear algorithm
               METHOD, 401, @SmoothGrid3D
      *[Class: @ICustom3DGridSeries] ReuseGridIndex
               PROPERTY-GET, 402, @ReuseGridIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustom3DGridSeries] ReuseGridIndex
               PROPERTY-PUT, 402, @ReuseGridIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustom3DGridSeries] FillGridIndex
               METHOD, 403, @FillGridIndex,
                   "long" @StartIndex, TYPE 3
           
      * Bezier Series interface
           
      * IBezierSeries
           CLASS @IBezierSeries
               CLSID, 0B6BA684-14BF-47B0-AF49-AB669896FB58
               NAME, "IBezierSeries"
      *[Class: @IBezierSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IBezierSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-GET, 2, @Stairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IBezierSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-PUT, 2, @Stairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBezierSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-GET, 3, @InvertedStairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IBezierSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-PUT, 3, @InvertedStairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBezierSeries] LinePen
      * The pen used to draw the line
               PROPERTY-GET, 4, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBezierSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-GET, 5, @LineBrush
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @IBezierSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-PUT, 5, @LineBrush,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @IBezierSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-GET, 6, @ClickableLine
                       RETURNING "boolean", TYPE 11
      *[Class: @IBezierSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-PUT, 6, @ClickableLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBezierSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-GET, 76, @LineHeight
                       RETURNING "long", TYPE 3
      *[Class: @IBezierSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-PUT, 76, @LineHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBezierSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IBezierSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBezierSeries] Brush
      * Accesses Brush attributes including images
               PROPERTY-GET, 9, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IBezierSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-GET, 81, @ColorEachLine
                       RETURNING "boolean", TYPE 11
      *[Class: @IBezierSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-PUT, 81, @ColorEachLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBezierSeries] Outline
      * Outline border of Line
               PROPERTY-GET, 7, @Outline
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBezierSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-GET, 82, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IBezierSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-PUT, 82, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBezierSeries] Shadow
      * Accesses Shadow attributes
               PROPERTY-GET, 201, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IBezierSeries] NumBezierPoints
      * Default 32: Defines the number of points in a Bezier Series.
               PROPERTY-GET, 77, @NumBezierPoints
                       RETURNING "long", TYPE 3
      *[Class: @IBezierSeries] NumBezierPoints
      * Default 32: Defines the number of points in a Bezier Series.
               PROPERTY-PUT, 77, @NumBezierPoints,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBezierSeries] BezierStyle
      * Selects the Bezier style type for the Bezier plot.
               PROPERTY-GET, 8, @BezierStyle
                       RETURNING "EBezierStyle", TYPE 3
      *[Class: @IBezierSeries] BezierStyle
      * Selects the Bezier style type for the Bezier plot.
               PROPERTY-PUT, 8, @BezierStyle,
                   "EBezierStyle (Property_Value)", TYPE 3
           
      * Radar Series interface
           
      * IRadarSeries
           CLASS @IRadarSeries
               CLSID, 00F7FAE1-F71E-4A77-82FF-0C05E145221A
               NAME, "IRadarSeries"
      *[Class: @IRadarSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @IRadarSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IRadarSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @IRadarSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IRadarSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @IRadarSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @IRadarSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @IRadarSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @IRadarSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IRadarSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IRadarSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @IRadarSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IRadarSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @IRadarSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IRadarSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IRadarSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IRadarSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-GET, 30, @AngleIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IRadarSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-PUT, 30, @AngleIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IRadarSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-GET, 31, @CloseCircle
                       RETURNING "boolean", TYPE 11
      *[Class: @IRadarSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-PUT, 31, @CloseCircle,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IRadarSeries] Pen
      * The Pen used to draw the polar lines
               PROPERTY-GET, 32, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IRadarSeries] Pointer
      * The pointer attributes for polar points (point markers)
               PROPERTY-GET, 33, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IRadarSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-GET, 34, @RadiusIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IRadarSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-PUT, 34, @RadiusIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IRadarSeries] AngleValues
      * The list of angle values for each polar point
               PROPERTY-GET, 35, @AngleValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IRadarSeries] RadiusValues
      * The list of radius values for each polar point
               PROPERTY-GET, 36, @RadiusValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IRadarSeries] DrawRing
      * Draws a circular ring at "Value" radius in the "Z" plane
               METHOD, 38, @DrawRing,
                   "double" @Value, TYPE 5,
                   "long" @Z, TYPE 3
      *[Class: @IRadarSeries] CirclePen
      * The pen used to draw the circle border
               PROPERTY-GET, 39, @CirclePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IRadarSeries] CircleLabels
      * Outer circle Label characteristics
               PROPERTY-GET, 40, @CircleLabels
                       RETURNING "ICircleLabels*", TYPE 9
      *[Class: @IRadarSeries] Brush
      * Background Brush
               PROPERTY-GET, 3, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IRadarSeries] LoadBackImage
      * Load bitmap to background
               METHOD, 13, @LoadBackImage,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IRadarSeries] ClearBackImage
      * Clear BackImage
               METHOD, 14, @ClearBackImage
      *[Class: @IRadarSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-GET, 155, @ClockWiseLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IRadarSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-PUT, 155, @ClockWiseLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IRadarSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-GET, 156, @CircleLabelsInside
                       RETURNING "boolean", TYPE 11
      *[Class: @IRadarSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-PUT, 156, @CircleLabelsInside,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IRadarSeries] Transparency
      * Fill transparency
               PROPERTY-GET, 115, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IRadarSeries] Transparency
      * Fill transparency
               PROPERTY-PUT, 115, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IRadarSeries] CircleGradient
      * Circle gradient characteristics for the back area of the polar serie.
               PROPERTY-GET, 301, @CircleGradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IRadarSeries] DrawZone
      * Draws an elliptical "zone"  (like a donut) from Min to Max (in axis 
               METHOD, 302, @DrawZone,
                   "double" @Min, TYPE 5,
                   "double" @Max, TYPE 5,
                   "long" @Z, TYPE 3
           
      * ErrorSeries interface
           
      * IErrorSeries
           CLASS @IErrorSeries
               CLSID, 49198D92-8B38-4A76-8E0F-AC0A86A1ED07
               NAME, "IErrorSeries"
      *[Class: @IErrorSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-GET, 20, @MultiBar
                       RETURNING "EMultiBar", TYPE 3
      *[Class: @IErrorSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-PUT, 20, @MultiBar,
                   "EMultiBar (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-GET, 21, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-PUT, 21, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorSeries] BarBrush
      * The brush used to fill the Bars
               PROPERTY-GET, 22, @BarBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IErrorSeries] BarPen
      * The pen used to draw the Bar borders
               PROPERTY-GET, 23, @BarPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IErrorSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-GET, 24, @BarStyle
                       RETURNING "EBarStyle", TYPE 3
      *[Class: @IErrorSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-PUT, 24, @BarStyle,
                   "EBarStyle (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-GET, 25, @BarWidthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IErrorSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-PUT, 25, @BarWidthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-GET, 26, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-PUT, 26, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-GET, 27, @OffsetPercent
                       RETURNING "long", TYPE 3
      *[Class: @IErrorSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-PUT, 27, @OffsetPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-GET, 28, @SideMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-PUT, 28, @SideMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-GET, 29, @UseOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-PUT, 29, @UseOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-GET, 30, @Origin
                       RETURNING "double", TYPE 5
      *[Class: @IErrorSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-PUT, 30, @Origin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IErrorSeries] GetOriginPos
      * Returns the baseline pixel coordinate of ValueIndexth Bar
               METHOD, 31, @GetOriginPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IErrorSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-GET, 32, @AutoBarSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IErrorSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-PUT, 32, @AutoBarSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IErrorSeries] BarImageLoad
      * Load Bar image
               METHOD, 33, @BarImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IErrorSeries] BarImageClear
      * Clear Bar image
               METHOD, 34, @BarImageClear
      *[Class: @IErrorSeries] Gradient
      * Sets the characteristics of gradients within Bars of a Bar Series.
               PROPERTY-GET, 45, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IErrorSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-GET, 2, @StackGroup
                       RETURNING "long", TYPE 3
      *[Class: @IErrorSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-PUT, 2, @StackGroup,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-GET, 111, @ConePercent
                       RETURNING "long", TYPE 3
      *[Class: @IErrorSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-PUT, 111, @ConePercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] TickLines
      * The pen used to draw the TickLines
               PROPERTY-GET, 201, @TickLines
                       RETURNING "IPen*", TYPE 9
      *[Class: @IErrorSeries] DepthPercent
               PROPERTY-GET, 202, @DepthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IErrorSeries] DepthPercent
               PROPERTY-PUT, 202, @DepthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-GET, 40, @BarWidth
                       RETURNING "long", TYPE 3
      *[Class: @IErrorSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-PUT, 40, @BarWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] ErrorPen
      * The Pen used to draw the error bar lines
               PROPERTY-GET, 50, @ErrorPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IErrorSeries] ErrorValues
      * The list of Error values for each error bar
               PROPERTY-GET, 51, @ErrorValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IErrorSeries] ErrorWidth
      * The width (in pixels or scales) of the error bar lines
               PROPERTY-GET, 52, @ErrorWidth
                       RETURNING "long", TYPE 3
      *[Class: @IErrorSeries] ErrorWidth
      * The width (in pixels or scales) of the error bar lines
               PROPERTY-PUT, 52, @ErrorWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] ErrorWidthUnits
      * Controls how ErrorWidth size is expressed (in pixels or scales)
               PROPERTY-GET, 53, @ErrorWidthUnits
                       RETURNING "EErrorWidthUnits", TYPE 3
      *[Class: @IErrorSeries] ErrorWidthUnits
      * Controls how ErrorWidth size is expressed (in pixels or scales)
               PROPERTY-PUT, 53, @ErrorWidthUnits,
                   "EErrorWidthUnits (Property_Value)", TYPE 3
      *[Class: @IErrorSeries] AddErrorBar
      * Adds a new Error bar point to the Series
               METHOD, 54, @AddErrorBar,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AError, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IErrorSeries] ErrorStyle
      * ErrorSeries Style
               PROPERTY-GET, 1, @ErrorStyle
                       RETURNING "EErrorSeriesStyle", TYPE 3
      *[Class: @IErrorSeries] ErrorStyle
      * ErrorSeries Style
               PROPERTY-PUT, 1, @ErrorStyle,
                   "EErrorSeriesStyle (Property_Value)", TYPE 3
           
      * Interface to Point3D Series characteristics
           
      * IPoint3DSeries
           CLASS @IPoint3DSeries
               CLSID, A353E06F-6D68-4C32-8029-C16AED92C705
               NAME, "IPoint3DSeries"
      *[Class: @IPoint3DSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IPoint3DSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @IPoint3DSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @IPoint3DSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @IPoint3DSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPoint3DSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPoint3DSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IPoint3DSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IPoint3DSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IPoint3DSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPoint3DSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @IPoint3DSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @IPoint3DSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IPoint3DSeries] DepthSize
      * Depth of Points
               PROPERTY-GET, 101, @DepthSize
                       RETURNING "double", TYPE 5
      *[Class: @IPoint3DSeries] DepthSize
      * Depth of Points
               PROPERTY-PUT, 101, @DepthSize,
                   "double (Property_Value)", TYPE 5
      *[Class: @IPoint3DSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 102, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IPoint3DSeries] LinePen
      * Pen for line between points
               PROPERTY-GET, 4, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPoint3DSeries] BaseLine
      * Show/Hide the BaseLine
               PROPERTY-GET, 301, @BaseLine
                       RETURNING "IPen*", TYPE 9
           
      * Draws XYZ Grid of values in 3D
           
      * ISurfaceSeries
           CLASS @ISurfaceSeries
               CLSID, EDB9BAF3-6791-48E4-B3F1-CFA41F81CC16
               NAME, "ISurfaceSeries"
      *[Class: @ISurfaceSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @ISurfaceSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @ISurfaceSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISurfaceSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ISurfaceSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ISurfaceSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ISurfaceSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ISurfaceSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ISurfaceSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @ISurfaceSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @ISurfaceSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISurfaceSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ISurfaceSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISurfaceSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ISurfaceSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISurfaceSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @ISurfaceSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISurfaceSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @ISurfaceSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISurfaceSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @ISurfaceSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @ISurfaceSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISurfaceSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISurfaceSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ISurfaceSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @ISurfaceSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @ISurfaceSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @ISurfaceSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @ISurfaceSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISurfaceSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @ISurfaceSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @ISurfaceSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @ISurfaceSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
      *[Class: @ISurfaceSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-GET, 6, @NumXValues
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-PUT, 6, @NumXValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISurfaceSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-GET, 7, @NumZValues
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-PUT, 7, @NumZValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISurfaceSeries] GetXZValue
      * Returns the surface cell value for XZ indexes
               METHOD, 15, @GetXZValue,
                   "long" @X, TYPE 3,
                   "long" @Z, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ISurfaceSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-GET, 313, @IrregularGrid
                       RETURNING "boolean", TYPE 11
      *[Class: @ISurfaceSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-PUT, 313, @IrregularGrid,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISurfaceSeries] SmoothGrid3D
      * Smooth the Serie using a simple linear algorithm
               METHOD, 401, @SmoothGrid3D
      *[Class: @ISurfaceSeries] ReuseGridIndex
               PROPERTY-GET, 402, @ReuseGridIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @ISurfaceSeries] ReuseGridIndex
               PROPERTY-PUT, 402, @ReuseGridIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISurfaceSeries] FillGridIndex
               METHOD, 403, @FillGridIndex,
                   "long" @StartIndex, TYPE 3
      *[Class: @ISurfaceSeries] DotFrame
      * When True, surface cells are drawn using a small single point
               PROPERTY-GET, 132, @DotFrame
                       RETURNING "boolean", TYPE 11
      *[Class: @ISurfaceSeries] DotFrame
      * When True, surface cells are drawn using a small single point
               PROPERTY-PUT, 132, @DotFrame,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISurfaceSeries] WireFrame
      * When True, surface cells are not filled
               PROPERTY-GET, 20, @WireFrame
                       RETURNING "boolean", TYPE 11
      *[Class: @ISurfaceSeries] WireFrame
      * When True, surface cells are not filled
               PROPERTY-PUT, 20, @WireFrame,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISurfaceSeries] SideBrush
      * Specifies the color and pattern to use when filling in the sides of a 
               PROPERTY-GET, 3, @SideBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ISurfaceSeries] SmoothPalette
      * When set to True, each cell is filled using a color calculated as the 
               PROPERTY-GET, 21, @SmoothPalette
                       RETURNING "boolean", TYPE 11
      *[Class: @ISurfaceSeries] SmoothPalette
      * When set to True, each cell is filled using a color calculated as the 
               PROPERTY-PUT, 21, @SmoothPalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISurfaceSeries] Transparency
      * Percentage of transparency, from 0 to 100, for all the surface cells.
               PROPERTY-GET, 501, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceSeries] Transparency
      * Percentage of transparency, from 0 to 100, for all the surface cells.
               PROPERTY-PUT, 501, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISurfaceSeries] FastBrush
      * Fast Brush for Surface Series
               PROPERTY-GET, 502, @FastBrush
                       RETURNING "boolean", TYPE 11
      *[Class: @ISurfaceSeries] FastBrush
      * Fast Brush for Surface Series
               PROPERTY-PUT, 502, @FastBrush,
                   "boolean (Property_Value)", TYPE 11
           
      * Custom Mark positions
           
      * ISeriesMarksPositions
           CLASS @ISeriesMarksPositions
               CLSID, 4278272E-7406-4D93-BA71-4C55C1D91D90
               NAME, "ISeriesMarksPositions"
      *[Class: @ISeriesMarksPositions] Position
      * Position indexth Mark
               PROPERTY-GET, 1, @Position,
                   "long" @Index, TYPE 3
                       RETURNING "ISeriesMarkPosition*", TYPE 9
      *[Class: @ISeriesMarksPositions] Automatic
      * Set indexth Mark position to Automatic
               METHOD, 2, @Automatic,
                   "long" @Index, TYPE 3
           
      * Position of Mark
           
      * ISeriesMarkPosition
           CLASS @ISeriesMarkPosition
               CLSID, E0CAA718-5AC0-46A9-BE97-E42516B1DFBB
               NAME, "ISeriesMarkPosition"
      *[Class: @ISeriesMarkPosition] ArrowFrom
      * Source co-ordinate of Arrow
               PROPERTY-GET, 1, @ArrowFrom
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @ISeriesMarkPosition] ArrowTo
      * Destination co-ordinate of Arrow
               PROPERTY-GET, 2, @ArrowTo
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @ISeriesMarkPosition] Custom
      * Enable custom Mark positioning
               PROPERTY-GET, 3, @Custom
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeriesMarkPosition] Custom
      * Enable custom Mark positioning
               PROPERTY-PUT, 3, @Custom,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeriesMarkPosition] Height
      * Height of Mark
               PROPERTY-GET, 4, @Height
                       RETURNING "long", TYPE 3
      *[Class: @ISeriesMarkPosition] Height
      * Height of Mark
               PROPERTY-PUT, 4, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeriesMarkPosition] LeftTop
      * Left Top position of Mark
               PROPERTY-GET, 5, @LeftTop
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @ISeriesMarkPosition] Width
      * Width of Mark
               PROPERTY-GET, 6, @Width
                       RETURNING "long", TYPE 3
      *[Class: @ISeriesMarkPosition] Width
      * Width of Mark
               PROPERTY-PUT, 6, @Width,
                   "long (Property_Value)", TYPE 3
           
      * Draws Circular Series of Angle / Value XY points
           
      * IPolarSeries
           CLASS @IPolarSeries
               CLSID, 6AD424EC-04C6-4E21-98E8-1BD045FA6935
               NAME, "IPolarSeries"
      *[Class: @IPolarSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @IPolarSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPolarSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @IPolarSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPolarSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @IPolarSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @IPolarSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @IPolarSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @IPolarSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IPolarSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IPolarSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @IPolarSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPolarSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @IPolarSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPolarSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IPolarSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IPolarSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-GET, 30, @AngleIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IPolarSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-PUT, 30, @AngleIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IPolarSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-GET, 31, @CloseCircle
                       RETURNING "boolean", TYPE 11
      *[Class: @IPolarSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-PUT, 31, @CloseCircle,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPolarSeries] Pen
      * The Pen used to draw the polar lines
               PROPERTY-GET, 32, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPolarSeries] Pointer
      * The pointer attributes for polar points (point markers)
               PROPERTY-GET, 33, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IPolarSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-GET, 34, @RadiusIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IPolarSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-PUT, 34, @RadiusIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IPolarSeries] AngleValues
      * The list of angle values for each polar point
               PROPERTY-GET, 35, @AngleValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPolarSeries] RadiusValues
      * The list of radius values for each polar point
               PROPERTY-GET, 36, @RadiusValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPolarSeries] DrawRing
      * Draws a circular ring at "Value" radius in the "Z" plane
               METHOD, 38, @DrawRing,
                   "double" @Value, TYPE 5,
                   "long" @Z, TYPE 3
      *[Class: @IPolarSeries] CirclePen
      * The pen used to draw the circle border
               PROPERTY-GET, 39, @CirclePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPolarSeries] CircleLabels
      * Outer circle Label characteristics
               PROPERTY-GET, 40, @CircleLabels
                       RETURNING "ICircleLabels*", TYPE 9
      *[Class: @IPolarSeries] Brush
      * Background Brush
               PROPERTY-GET, 3, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IPolarSeries] LoadBackImage
      * Load bitmap to background
               METHOD, 13, @LoadBackImage,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IPolarSeries] ClearBackImage
      * Clear BackImage
               METHOD, 14, @ClearBackImage
      *[Class: @IPolarSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-GET, 155, @ClockWiseLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IPolarSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-PUT, 155, @ClockWiseLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPolarSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-GET, 156, @CircleLabelsInside
                       RETURNING "boolean", TYPE 11
      *[Class: @IPolarSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-PUT, 156, @CircleLabelsInside,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPolarSeries] Transparency
      * Fill transparency
               PROPERTY-GET, 115, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IPolarSeries] Transparency
      * Fill transparency
               PROPERTY-PUT, 115, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPolarSeries] CircleGradient
      * Circle gradient characteristics for the back area of the polar serie.
               PROPERTY-GET, 301, @CircleGradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IPolarSeries] DrawZone
      * Draws an elliptical "zone"  (like a donut) from Min to Max (in axis 
               METHOD, 302, @DrawZone,
                   "double" @Min, TYPE 5,
                   "double" @Max, TYPE 5,
                   "long" @Z, TYPE 3
      *[Class: @IPolarSeries] AddPolar
      * Adds a new polar point to the Series
               METHOD, 37, @AddPolar,
                   "double" @Angle, TYPE 5,
                   "double" @Value, TYPE 5,
                   "BSTR" @ALabel, TYPE 8,
                   "OLE_COLOR" @Valu, TYPE 19
                       RETURNING "long", TYPE 3
           
      * Perimiter labels for Polar Series
           
      * ICircleLabels
           CLASS @ICircleLabels
               CLSID, 1902ED9F-8A2E-427A-AEE6-4B288D64428B
               NAME, "ICircleLabels"
      *[Class: @ICircleLabels] Visible
      * Enable Circle Labels
               PROPERTY-GET, 1, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @ICircleLabels] Visible
      * Enable Circle Labels
               PROPERTY-PUT, 1, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICircleLabels] Font
      * Label font
               PROPERTY-GET, 2, @Font
                       RETURNING "IChartFont*", TYPE 9
      *[Class: @ICircleLabels] Rotated
      * Rotate Labels in line with outer circle
               PROPERTY-GET, 3, @Rotated
                       RETURNING "boolean", TYPE 11
      *[Class: @ICircleLabels] Rotated
      * Rotate Labels in line with outer circle
               PROPERTY-PUT, 3, @Rotated,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICircleLabels] DegreeSymbol
      * Degree symbol for CircleLabels
               PROPERTY-GET, 4, @DegreeSymbol
                       RETURNING "BSTR", TYPE 8
      *[Class: @ICircleLabels] DegreeSymbol
      * Degree symbol for CircleLabels
               PROPERTY-PUT, 4, @DegreeSymbol,
                   "BSTR (Property_Value)", TYPE 8
           
      * Style for Error Series
           
      * EErrorSeriesStyle
           CLASS @EErrorSeriesStyle
               CLSID, F1EBD2CC-4A6C-40F6-89B5-90741C938BEE
               NAME, "EErrorSeriesStyle"
      * "long essLeft"
               ENUMERATOR, @essLeft, 0
      * "long essRight"
               ENUMERATOR, @essRight, 1
      * "long essLeftRight"
               ENUMERATOR, @essLeftRight, 2
      * "long essTop"
               ENUMERATOR, @essTop, 3
      * "long essBottom"
               ENUMERATOR, @essBottom, 4
      * "long essTopBottom"
               ENUMERATOR, @essTopBottom, 5
           
      * Where in range Period is applied
           
      * EFunctionPeriodAlign
           CLASS @EFunctionPeriodAlign
               CLSID, 7B5B5D44-D20A-4701-BBAA-37FACFFB5646
               NAME, "EFunctionPeriodAlign"
      * "long paFirst"
               ENUMERATOR, @paFirst, 0
      * "long paCenter"
               ENUMERATOR, @paCenter, 1
      * "long paLast"
               ENUMERATOR, @paLast, 2
           
      * Applies Period to Axis range or points
           
      * EFunctionPeriodStyle
           CLASS @EFunctionPeriodStyle
               CLSID, BFE214E6-3EB9-415A-902F-946C62D2E1B0
               NAME, "EFunctionPeriodStyle"
      * "long psNumPoints"
               ENUMERATOR, @psNumPoints, 0
      * "long psRange"
               ENUMERATOR, @psRange, 1
           
      * Maps trend to data
           
      * ITrendFunction
           CLASS @ITrendFunction
               CLSID, 33880DFF-2CCB-4D3E-A1E3-98E7CF226D23
               NAME, "ITrendFunction"
      *[Class: @ITrendFunction] CalculateTrend
               METHOD, 201, @CalculateTrend,
                   "double*" @m, TYPE 16389,
                   "double*" @b, TYPE 16389,
                   "long" @SourceSeriesIndex, TYPE 3,
                   "long" @FirstIndex, TYPE 3,
                   "long" @LastIndex, TYPE 3
                       RETURNING "long", TYPE 3
           
      * Returns Standard Deviation of data range
           
      * IStdDeviationFunction
           CLASS @IStdDeviationFunction
               CLSID, EABACC07-8261-4C83-9956-9ABC59567C26
               NAME, "IStdDeviationFunction"
      *[Class: @IStdDeviationFunction] Complete
      * Sets Std. Deviation to complete data range
               PROPERTY-GET, 1, @Complete
                       RETURNING "boolean", TYPE 11
      *[Class: @IStdDeviationFunction] Complete
      * Sets Std. Deviation to complete data range
               PROPERTY-PUT, 1, @Complete,
                   "boolean (Property_Value)", TYPE 11
           
      * Plots a Cumulative curve of data
           
      * ICumulativeFunction
           CLASS @ICumulativeFunction
               CLSID, E1252679-1F72-4A30-BAC0-3482127B44FB
               NAME, "ICumulativeFunction"
           
      * Plots Relative Strength Index
           
      * IRSIFunction
           CLASS @IRSIFunction
               CLSID, 057B296A-84D3-4D3E-AB92-CB3D10348492
               NAME, "IRSIFunction"
      *[Class: @IRSIFunction] Style
      * Sets the RSI function to use either Open or Close values.
               PROPERTY-GET, 1, @Style
                       RETURNING "ERSIStyle", TYPE 3
      *[Class: @IRSIFunction] Style
      * Sets the RSI function to use either Open or Close values.
               PROPERTY-PUT, 1, @Style,
                   "ERSIStyle (Property_Value)", TYPE 3
           
      * Returns Count of input points
           
      * ICountFunction
           CLASS @ICountFunction
               CLSID, 450C7ABD-B5B2-4083-97F6-06BA374E327C
               NAME, "ICountFunction"
           
      * Global environment characteristics
           
      * IEnvironment
           CLASS @IEnvironment
               CLSID, 73F946B1-C2D8-4389-A1FD-AD581CC5990F
               NAME, "IEnvironment"
      *[Class: @IEnvironment] NoPromptDBConnect
      * DB Connect mode for Connection Pooling
               PROPERTY-GET, 47, @NoPromptDBConnect
                       RETURNING "boolean", TYPE 11
      *[Class: @IEnvironment] NoPromptDBConnect
      * DB Connect mode for Connection Pooling
               PROPERTY-PUT, 47, @NoPromptDBConnect,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IEnvironment] IEPrintWithPage
      * Default False. Enables Chart printing from Internet Explorer's Print 
               PROPERTY-GET, 2, @IEPrintWithPage
                       RETURNING "boolean", TYPE 11
      *[Class: @IEnvironment] IEPrintWithPage
      * Default False. Enables Chart printing from Internet Explorer's Print 
               PROPERTY-PUT, 2, @IEPrintWithPage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IEnvironment] InternalRepaint
      * Repaints the internal Canvas
               METHOD, 1, @InternalRepaint
      *[Class: @IEnvironment] MouseWheelScroll
      * Enables/Disables scrolling with the mouse wheel
               PROPERTY-GET, 3, @MouseWheelScroll
                       RETURNING "boolean", TYPE 11
      *[Class: @IEnvironment] MouseWheelScroll
      * Enables/Disables scrolling with the mouse wheel
               PROPERTY-PUT, 3, @MouseWheelScroll,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IEnvironment] DecimalSeparator
      * Returns Locale Decimal Separator Character
               PROPERTY-GET, 4, @DecimalSeparator
                       RETURNING "BSTR", TYPE 8
           
      * TeeChart Component connectivity interface
           
      * ITeeLinked
           CLASS @ITeeLinked
               CLSID, D359C730-6723-48E5-BEC1-7357A518D610
               NAME, "ITeeLinked"
      *[Class: @ITeeLinked] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ITeeLinked] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeLinked] AboutBox
      * About...
               METHOD, -552, @AboutBox
           
      * Events associated with the TeeCommander
           
      * ITeeCommanderEvents
           CLASS @ITeeCommanderEvents
               CLSID, 857F07B2-3734-4AF0-A05E-64D833097E76
               NAME, "ITeeCommanderEvents"
      *[Class: @ITeeCommanderEvents] OnEditedChart
      * Called when the chart editor is closed.
               METHOD, 1, @OnEditedChart
           
      * Runtime TeeCommander control
           
      * ITeeCommander
           CLASS @ITeeCommander
               CLSID, 157BE712-B4BB-4C7B-825F-78CC07CF5363
               NAME, "ITeeCommander"
      *[Class: @ITeeCommander] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ITeeCommander] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeCommander] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ITeeCommander] LabelValues
      * Shows help text at toolbar
               PROPERTY-GET, 2, @LabelValues
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeCommander] LabelValues
      * Shows help text at toolbar
               PROPERTY-PUT, 2, @LabelValues,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeCommander] Color
      * Defines a color for the TeeCommander bar.
               PROPERTY-GET, -501, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeCommander] Color
      * Defines a color for the TeeCommander bar.
               PROPERTY-PUT, -501, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeCommander] Enabled
      * Enables/Disables the TeeCommander.
               PROPERTY-GET, -514, @Enabled
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeCommander] Enabled
      * Enables/Disables the TeeCommander.
               PROPERTY-PUT, -514, @Enabled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeCommander] Editor
      * Selects TeeEditor component whose properties to use
               PROPERTY-PUT, 3, @Editor,
                   "ITeeEditor* (Property_Value)", TYPE 9
      *[Class: @ITeeCommander] Previewer
      * Selects TeePreviewer component whose properties to use
               PROPERTY-PUT, 4, @Previewer,
                   "ITeePreviewer* (Property_Value)", TYPE 9
      *[Class: @ITeeCommander] EditorLink
      * Link to TeeEditor component whose properties to use
               PROPERTY-PUT, 5, @EditorLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeCommander] PreviewerLink
      * Selects TeePreviewer component whose properties to use
               PROPERTY-PUT, 6, @PreviewerLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeCommander] Vertical
      * When True sets TeeCommander vertically
               PROPERTY-GET, 7, @Vertical
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeCommander] Vertical
      * When True sets TeeCommander vertically
               PROPERTY-PUT, 7, @Vertical,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeCommander] Controls
      * Displays the sepcified array of TeeCommander buttons
               PROPERTY-GET, 9, @Controls
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ITeeCommander] Controls
      * Displays the sepcified array of TeeCommander buttons
               PROPERTY-PUT, 9, @Controls,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ITeeCommander] Buttons
      * As Controls, displays the specified array of TeeCommander buttons
               PROPERTY-GET, 8, @Buttons
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ITeeCommander] Buttons
      * As Controls, displays the specified array of TeeCommander buttons
               PROPERTY-PUT, 8, @Buttons,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ITeeCommander] BevelInner
      * Inner bevel
               PROPERTY-GET, 301, @BevelInner
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ITeeCommander] BevelInner
      * Inner bevel
               PROPERTY-PUT, 301, @BevelInner,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ITeeCommander] BevelOuter
      * Outer bevel
               PROPERTY-GET, 302, @BevelOuter
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ITeeCommander] BevelOuter
      * Outer bevel
               PROPERTY-PUT, 302, @BevelOuter,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ITeeCommander] BevelWidth
      * BevelInner and BevelOuter widths
               PROPERTY-GET, 303, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ITeeCommander] BevelWidth
      * BevelInner and BevelOuter widths
               PROPERTY-PUT, 303, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeCommander] BevelOffset
      * BevelInner and BevelOuter widths
               PROPERTY-GET, 304, @BevelOffset
                       RETURNING "long", TYPE 3
      *[Class: @ITeeCommander] BevelOffset
      * BevelInner and BevelOuter widths
               PROPERTY-PUT, 304, @BevelOffset,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeCommander] BorderStyle
      * Controls if panel draws a border or not
               PROPERTY-GET, 305, @BorderStyle
                       RETURNING "EBorderStyle", TYPE 3
      *[Class: @ITeeCommander] BorderStyle
      * Controls if panel draws a border or not
               PROPERTY-PUT, 305, @BorderStyle,
                   "EBorderStyle (Property_Value)", TYPE 3
      *[Class: @ITeeCommander] DefaultButton
               PROPERTY-GET, 306, @DefaultButton
                       RETURNING "ETeeCommanderControls", TYPE 3
      *[Class: @ITeeCommander] DefaultButton
               PROPERTY-PUT, 306, @DefaultButton,
                   "ETeeCommanderControls (Property_Value)", TYPE 3
      *[Class: @ITeeCommander] Button3D
               PROPERTY-GET, 307, @Button3D
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] ButtonCopy
               PROPERTY-GET, 308, @ButtonCopy
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] ButtonDepth
               PROPERTY-GET, 309, @ButtonDepth
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] ButtonEdit
               PROPERTY-GET, 310, @ButtonEdit
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] ButtonMove
               PROPERTY-GET, 311, @ButtonMove
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] ButtonNormal
               PROPERTY-GET, 312, @ButtonNormal
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] ButtonPrint
               PROPERTY-GET, 313, @ButtonPrint
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] ButtonRotate
               PROPERTY-GET, 314, @ButtonRotate
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] ButtonSave
               PROPERTY-GET, 315, @ButtonSave
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] ButtonZoom
               PROPERTY-GET, 316, @ButtonZoom
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @ITeeCommander] RepositionControls
      * This method will reorder all Visible buttons in the toolbar, eliminating 
               METHOD, 317, @RepositionControls
      *[Class: @ITeeCommander] Gradient
               PROPERTY-GET, 318, @Gradient
                       RETURNING "IGradient*", TYPE 9
           
      * Runtime TeeListbox control
           
      * ITeeListBox
           CLASS @ITeeListBox
               CLSID, 9F3317BB-D51C-4213-B046-95C06C499E03
               NAME, "ITeeListBox"
      *[Class: @ITeeListBox] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ITeeListBox] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeListBox] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ITeeListBox] Color
      * Returns the listbox background color
               PROPERTY-GET, -501, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeListBox] Color
      * Returns the listbox background color
               PROPERTY-PUT, -501, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeListBox] UpdateSeries
      * Repaints the list box refreshing chart series
               METHOD, 2, @UpdateSeries
      *[Class: @ITeeListBox] SelectedSeries
      * Returns the current series selected in the list box
               PROPERTY-GET, 3, @SelectedSeries
                       RETURNING "long", TYPE 3
      *[Class: @ITeeListBox] SelectedSeries
      * Returns the current series selected in the list box
               PROPERTY-PUT, 3, @SelectedSeries,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeListBox] ShowActive
      * Shows / hides the series checkbox
               PROPERTY-GET, 4, @ShowActive
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeListBox] ShowActive
      * Shows / hides the series checkbox
               PROPERTY-PUT, 4, @ShowActive,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeListBox] ShowColor
      * Shows / hides the series color rectangles
               PROPERTY-GET, 5, @ShowColor
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeListBox] ShowColor
      * Shows / hides the series color rectangles
               PROPERTY-PUT, 5, @ShowColor,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeListBox] ShowTitle
      * Shows / hides the series names
               PROPERTY-GET, 6, @ShowTitle
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeListBox] ShowTitle
      * Shows / hides the series names
               PROPERTY-PUT, 6, @ShowTitle,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeListBox] ShowIcon
      * Shows / hides the series type icons
               PROPERTY-GET, 7, @ShowIcon
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeListBox] ShowIcon
      * Shows / hides the series type icons
               PROPERTY-PUT, 7, @ShowIcon,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeListBox] SeriesGroup
      * Assign a SeriesGroup
               PROPERTY-GET, 301, @SeriesGroup
                       RETURNING "ISeriesGroup*", TYPE 9
      *[Class: @ITeeListBox] SeriesGroup
      * Assign a SeriesGroup
               PROPERTY-PUT, 301, @SeriesGroup,
                   "ISeriesGroup* (Property_Value)", TYPE 9
      *[Class: @ITeeListBox] CheckStyle
      * Get Style of the CheckBoxes
               PROPERTY-GET, 302, @CheckStyle
                       RETURNING "ECheckBoxesStyle", TYPE 3
      *[Class: @ITeeListBox] CheckStyle
      * Get Style of the CheckBoxes
               PROPERTY-PUT, 302, @CheckStyle,
                   "ECheckBoxesStyle (Property_Value)", TYPE 3
      *[Class: @ITeeListBox] ShowEditor
      * Show InLine Editor
               METHOD, 303, @ShowEditor
      *[Class: @ITeeListBox] HideEditor
      * Hide InLne Editor
               METHOD, 304, @HideEditor
      *[Class: @ITeeListBox] ItemHeight
      * Gets the Height of the items
               PROPERTY-GET, 305, @ItemHeight
                       RETURNING "long", TYPE 3
      *[Class: @ITeeListBox] ItemHeight
      * Gets the Height of the items
               PROPERTY-PUT, 305, @ItemHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeListBox] ClearItems
      * Clear the Items of the ListBox
               METHOD, 306, @ClearItems
      *[Class: @ITeeListBox] Repaint
      * Forces ListBox screen update
               METHOD, 307, @Repaint
      *[Class: @ITeeListBox] Sorted
               PROPERTY-GET, 308, @Sorted
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeListBox] Sorted
               PROPERTY-PUT, 308, @Sorted,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeListBox] AskDelete
      * Asks before to delete the Series
               PROPERTY-GET, 309, @AskDelete
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeListBox] AskDelete
      * Asks before to delete the Series
               PROPERTY-PUT, 309, @AskDelete,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeListBox] AllowDeleteSeries
      * Allow Delete Series
               PROPERTY-GET, 310, @AllowDeleteSeries
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeListBox] AllowDeleteSeries
      * Allow Delete Series
               PROPERTY-PUT, 310, @AllowDeleteSeries,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeListBox] AllowAddSeries
      * Allow Add Series
               PROPERTY-GET, 311, @AllowAddSeries
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeListBox] AllowAddSeries
      * Allow Add Series
               PROPERTY-PUT, 311, @AllowAddSeries,
                   "boolean (Property_Value)", TYPE 11
           
      * Events associated with the TeeListBox
           
      * ITeeListBoxEvents
           CLASS @ITeeListBoxEvents
               CLSID, 6A32DD32-256B-4460-AF95-29C30B50E124
               NAME, "ITeeListBoxEvents"
      *[Class: @ITeeListBoxEvents] OnDblClickSeries
      * Triggered when dblclicking on an item in the TeeListBox
               METHOD, 1, @OnDblClickSeries,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @ITeeListBoxEvents] OnClick
      * Triggers when ListBox clicked
               METHOD, 201, @OnClick
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITeeListBoxEvents] OnChangeActive
               METHOD, 202, @OnChangeActive,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @ITeeListBoxEvents] OnMouseUp
               METHOD, 203, @OnMouseUp,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITeeListBoxEvents] OnMouseDown
               METHOD, 204, @OnMouseDown,
                   "EMouseButton" @Button, TYPE 3,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
      *[Class: @ITeeListBoxEvents] OnMouseMove
               METHOD, 205, @OnMouseMove,
                   "EShiftState" @Shift, TYPE 3,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
           
      * TeeChart ListBox v7
           
      * TeeListBox
           CLASS @TeeListBox
               CLSID, FD4C6B63-1B9B-4F0C-BC1C-7FBD314416BF
               NAME, "TeeListBox"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "ITeeListBox"
               DEFAULT-SOURCE, "6A32DD32-256B-4460-AF95-29C30B50E124"
      *[Class: @TeeListBox] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @TeeListBox] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeeListBox] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @TeeListBox] Color
      * Returns the listbox background color
               PROPERTY-GET, -501, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @TeeListBox] Color
      * Returns the listbox background color
               PROPERTY-PUT, -501, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @TeeListBox] UpdateSeries
      * Repaints the list box refreshing chart series
               METHOD, 2, @UpdateSeries
      *[Class: @TeeListBox] SelectedSeries
      * Returns the current series selected in the list box
               PROPERTY-GET, 3, @SelectedSeries
                       RETURNING "long", TYPE 3
      *[Class: @TeeListBox] SelectedSeries
      * Returns the current series selected in the list box
               PROPERTY-PUT, 3, @SelectedSeries,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeeListBox] ShowActive
      * Shows / hides the series checkbox
               PROPERTY-GET, 4, @ShowActive
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeListBox] ShowActive
      * Shows / hides the series checkbox
               PROPERTY-PUT, 4, @ShowActive,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeListBox] ShowColor
      * Shows / hides the series color rectangles
               PROPERTY-GET, 5, @ShowColor
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeListBox] ShowColor
      * Shows / hides the series color rectangles
               PROPERTY-PUT, 5, @ShowColor,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeListBox] ShowTitle
      * Shows / hides the series names
               PROPERTY-GET, 6, @ShowTitle
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeListBox] ShowTitle
      * Shows / hides the series names
               PROPERTY-PUT, 6, @ShowTitle,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeListBox] ShowIcon
      * Shows / hides the series type icons
               PROPERTY-GET, 7, @ShowIcon
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeListBox] ShowIcon
      * Shows / hides the series type icons
               PROPERTY-PUT, 7, @ShowIcon,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeListBox] SeriesGroup
      * Assign a SeriesGroup
               PROPERTY-GET, 301, @SeriesGroup
                       RETURNING "ISeriesGroup*", TYPE 9
      *[Class: @TeeListBox] SeriesGroup
      * Assign a SeriesGroup
               PROPERTY-PUT, 301, @SeriesGroup,
                   "ISeriesGroup* (Property_Value)", TYPE 9
      *[Class: @TeeListBox] CheckStyle
      * Get Style of the CheckBoxes
               PROPERTY-GET, 302, @CheckStyle
                       RETURNING "ECheckBoxesStyle", TYPE 3
      *[Class: @TeeListBox] CheckStyle
      * Get Style of the CheckBoxes
               PROPERTY-PUT, 302, @CheckStyle,
                   "ECheckBoxesStyle (Property_Value)", TYPE 3
      *[Class: @TeeListBox] ShowEditor
      * Show InLine Editor
               METHOD, 303, @ShowEditor
      *[Class: @TeeListBox] HideEditor
      * Hide InLne Editor
               METHOD, 304, @HideEditor
      *[Class: @TeeListBox] ItemHeight
      * Gets the Height of the items
               PROPERTY-GET, 305, @ItemHeight
                       RETURNING "long", TYPE 3
      *[Class: @TeeListBox] ItemHeight
      * Gets the Height of the items
               PROPERTY-PUT, 305, @ItemHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeeListBox] ClearItems
      * Clear the Items of the ListBox
               METHOD, 306, @ClearItems
      *[Class: @TeeListBox] Repaint
      * Forces ListBox screen update
               METHOD, 307, @Repaint
      *[Class: @TeeListBox] Sorted
               PROPERTY-GET, 308, @Sorted
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeListBox] Sorted
               PROPERTY-PUT, 308, @Sorted,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeListBox] AskDelete
      * Asks before to delete the Series
               PROPERTY-GET, 309, @AskDelete
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeListBox] AskDelete
      * Asks before to delete the Series
               PROPERTY-PUT, 309, @AskDelete,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeListBox] AllowDeleteSeries
      * Allow Delete Series
               PROPERTY-GET, 310, @AllowDeleteSeries
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeListBox] AllowDeleteSeries
      * Allow Delete Series
               PROPERTY-PUT, 310, @AllowDeleteSeries,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeListBox] AllowAddSeries
      * Allow Add Series
               PROPERTY-GET, 311, @AllowAddSeries
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeListBox] AllowAddSeries
      * Allow Add Series
               PROPERTY-PUT, 311, @AllowAddSeries,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeListBox] OnDblClickSeries
      * Triggered when dblclicking on an item in the TeeListBox
               EVENT, 1, @TeeListBoxOnDblClickSeries
      *            1 Parameter
      *                "long SeriesIndex"
      *[Class: @TeeListBox] OnClick
      * Triggers when ListBox clicked
               EVENT, 201, @TeeListBoxOnClick
      *            No Parameters
      *[Class: @TeeListBox] OnChangeActive
               EVENT, 202, @TeeListBoxOnChangeActive
      *            1 Parameter
      *                "long SeriesIndex"
      *[Class: @TeeListBox] OnMouseUp
               EVENT, 203, @TeeListBoxOnMouseUp
      *            4 Parameters
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TeeListBox] OnMouseDown
               EVENT, 204, @TeeListBoxOnMouseDown
      *            4 Parameters
      *                "EMouseButton Button"
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
      *[Class: @TeeListBox] OnMouseMove
               EVENT, 205, @TeeListBoxOnMouseMove
      *            3 Parameters
      *                "EShiftState Shift"
      *                "long X"
      *                "long Y"
           
      * Runtime Chart Editor
           
      * ITeeEditor
           CLASS @ITeeEditor
               CLSID, 1E0ED6AD-763B-4176-A5DD-7116C70058EE
               NAME, "ITeeEditor"
      *[Class: @ITeeEditor] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ITeeEditor] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeEditor] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ITeeEditor] EditorTitle
      * The caption of the editor dialog
               PROPERTY-GET, 2, @EditorTitle
                       RETURNING "BSTR", TYPE 8
      *[Class: @ITeeEditor] EditorTitle
      * The caption of the editor dialog
               PROPERTY-PUT, 2, @EditorTitle,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ITeeEditor] DefaultPage
      * Set default opening Editor page
               PROPERTY-GET, 3, @DefaultPage
                       RETURNING "ETeeEditorPage", TYPE 3
      *[Class: @ITeeEditor] DefaultPage
      * Set default opening Editor page
               PROPERTY-PUT, 3, @DefaultPage,
                   "ETeeEditorPage (Property_Value)", TYPE 3
      *[Class: @ITeeEditor] ShowEditor
      * Show Editor
               METHOD, 4, @ShowEditor
      *[Class: @ITeeEditor] AutoRepaint
      * Enables/disables AutoRepaint of Chart whilst changes are being made in 
               PROPERTY-GET, 5, @AutoRepaint
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditor] AutoRepaint
      * Enables/disables AutoRepaint of Chart whilst changes are being made in 
               PROPERTY-PUT, 5, @AutoRepaint,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditor] ShowPages
      * Editor page display
               PROPERTY-GET, 6, @ShowPages
                       RETURNING "ITeeEditorShowPages*", TYPE 9
      *[Class: @ITeeEditor] EditorLink
      * Link to TeeCommander component to which to apply TeeEditor 
               PROPERTY-GET, 8, @EditorLink
                       RETURNING "long", TYPE 3
      *[Class: @ITeeEditor] Options
      * Options for first Editor page
               PROPERTY-GET, 7, @Options
                       RETURNING "ITeeEditorOptions*", TYPE 9
      *[Class: @ITeeEditor] TreeView
      * View the Editor in Tree mode
               PROPERTY-GET, 301, @TreeView
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditor] TreeView
      * View the Editor in Tree mode
               PROPERTY-PUT, 301, @TreeView,
                   "boolean (Property_Value)", TYPE 11
           
      * Runtime Chart Print Previewer
           
      * ITeePreviewer
           CLASS @ITeePreviewer
               CLSID, 5ED19527-974E-4969-AF1E-7B7EF608D0C8
               NAME, "ITeePreviewer"
      *[Class: @ITeePreviewer] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ITeePreviewer] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeePreviewer] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ITeePreviewer] PreviewTitle
      * The caption of the Previewer dialog
               PROPERTY-GET, 2, @PreviewTitle
                       RETURNING "BSTR", TYPE 8
      *[Class: @ITeePreviewer] PreviewTitle
      * The caption of the Previewer dialog
               PROPERTY-PUT, 2, @PreviewTitle,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ITeePreviewer] ShowPreview
      * Show Print preview
               METHOD, 3, @ShowPreview
      *[Class: @ITeePreviewer] PaperColor
      * Colour of Preview paper
               PROPERTY-GET, 4, @PaperColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeePreviewer] PaperColor
      * Colour of Preview paper
               PROPERTY-PUT, 4, @PaperColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeePreviewer] PreviewerLink
      * Link to TeeCommander component to which to apply TeePreviewer 
               PROPERTY-GET, 5, @PreviewerLink
                       RETURNING "long", TYPE 3
      *[Class: @ITeePreviewer] Maximized
      * Returns if the preview dialog is maximized
               PROPERTY-GET, 6, @Maximized
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewer] Maximized
      * Returns if the preview dialog is maximized
               PROPERTY-PUT, 6, @Maximized,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewer] Options
      * Runtime display options
               PROPERTY-GET, 7, @Options
                       RETURNING "ITeePreviewerOptions*", TYPE 9
           
      * TeeChart Editor v7
           
      * TeeEditor
           CLASS @TeeEditor
               CLSID, 1507027F-44E5-4922-A32D-A368E5568EEB
               NAME, "TeeEditor"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "ITeeEditor"
      *[Class: @TeeEditor] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @TeeEditor] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeeEditor] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @TeeEditor] EditorTitle
      * The caption of the editor dialog
               PROPERTY-GET, 2, @EditorTitle
                       RETURNING "BSTR", TYPE 8
      *[Class: @TeeEditor] EditorTitle
      * The caption of the editor dialog
               PROPERTY-PUT, 2, @EditorTitle,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @TeeEditor] DefaultPage
      * Set default opening Editor page
               PROPERTY-GET, 3, @DefaultPage
                       RETURNING "ETeeEditorPage", TYPE 3
      *[Class: @TeeEditor] DefaultPage
      * Set default opening Editor page
               PROPERTY-PUT, 3, @DefaultPage,
                   "ETeeEditorPage (Property_Value)", TYPE 3
      *[Class: @TeeEditor] ShowEditor
      * Show Editor
               METHOD, 4, @ShowEditor
      *[Class: @TeeEditor] AutoRepaint
      * Enables/disables AutoRepaint of Chart whilst changes are being made in 
               PROPERTY-GET, 5, @AutoRepaint
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeEditor] AutoRepaint
      * Enables/disables AutoRepaint of Chart whilst changes are being made in 
               PROPERTY-PUT, 5, @AutoRepaint,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeEditor] ShowPages
      * Editor page display
               PROPERTY-GET, 6, @ShowPages
                       RETURNING "ITeeEditorShowPages*", TYPE 9
      *[Class: @TeeEditor] EditorLink
      * Link to TeeCommander component to which to apply TeeEditor 
               PROPERTY-GET, 8, @EditorLink
                       RETURNING "long", TYPE 3
      *[Class: @TeeEditor] Options
      * Options for first Editor page
               PROPERTY-GET, 7, @Options
                       RETURNING "ITeeEditorOptions*", TYPE 9
      *[Class: @TeeEditor] TreeView
      * View the Editor in Tree mode
               PROPERTY-GET, 301, @TreeView
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeEditor] TreeView
      * View the Editor in Tree mode
               PROPERTY-PUT, 301, @TreeView,
                   "boolean (Property_Value)", TYPE 11
           
      * TeeChart Print Previewer v7
           
      * TeePreviewer
           CLASS @TeePreviewer
               CLSID, 1B838A5C-6280-4E97-B983-657772DE71D1
               NAME, "TeePreviewer"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "ITeePreviewer"
      *[Class: @TeePreviewer] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @TeePreviewer] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeePreviewer] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @TeePreviewer] PreviewTitle
      * The caption of the Previewer dialog
               PROPERTY-GET, 2, @PreviewTitle
                       RETURNING "BSTR", TYPE 8
      *[Class: @TeePreviewer] PreviewTitle
      * The caption of the Previewer dialog
               PROPERTY-PUT, 2, @PreviewTitle,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @TeePreviewer] ShowPreview
      * Show Print preview
               METHOD, 3, @ShowPreview
      *[Class: @TeePreviewer] PaperColor
      * Colour of Preview paper
               PROPERTY-GET, 4, @PaperColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @TeePreviewer] PaperColor
      * Colour of Preview paper
               PROPERTY-PUT, 4, @PaperColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @TeePreviewer] PreviewerLink
      * Link to TeeCommander component to which to apply TeePreviewer 
               PROPERTY-GET, 5, @PreviewerLink
                       RETURNING "long", TYPE 3
      *[Class: @TeePreviewer] Maximized
      * Returns if the preview dialog is maximized
               PROPERTY-GET, 6, @Maximized
                       RETURNING "boolean", TYPE 11
      *[Class: @TeePreviewer] Maximized
      * Returns if the preview dialog is maximized
               PROPERTY-PUT, 6, @Maximized,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeePreviewer] Options
      * Runtime display options
               PROPERTY-GET, 7, @Options
                       RETURNING "ITeePreviewerOptions*", TYPE 9
           
      * TeeChart Commander v7
           
      * TeeCommander
           CLASS @TeeCommander
               CLSID, CD82C85E-37B7-48E3-9E88-31E140C13C86
               NAME, "TeeCommander"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "ITeeCommander"
               DEFAULT-SOURCE, "857F07B2-3734-4AF0-A05E-64D833097E76"
      *[Class: @TeeCommander] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @TeeCommander] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeeCommander] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @TeeCommander] LabelValues
      * Shows help text at toolbar
               PROPERTY-GET, 2, @LabelValues
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeCommander] LabelValues
      * Shows help text at toolbar
               PROPERTY-PUT, 2, @LabelValues,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeCommander] Color
      * Defines a color for the TeeCommander bar.
               PROPERTY-GET, -501, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @TeeCommander] Color
      * Defines a color for the TeeCommander bar.
               PROPERTY-PUT, -501, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @TeeCommander] Enabled
      * Enables/Disables the TeeCommander.
               PROPERTY-GET, -514, @Enabled
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeCommander] Enabled
      * Enables/Disables the TeeCommander.
               PROPERTY-PUT, -514, @Enabled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeCommander] Editor
      * Selects TeeEditor component whose properties to use
               PROPERTY-PUT, 3, @Editor,
                   "ITeeEditor* (Property_Value)", TYPE 9
      *[Class: @TeeCommander] Previewer
      * Selects TeePreviewer component whose properties to use
               PROPERTY-PUT, 4, @Previewer,
                   "ITeePreviewer* (Property_Value)", TYPE 9
      *[Class: @TeeCommander] EditorLink
      * Link to TeeEditor component whose properties to use
               PROPERTY-PUT, 5, @EditorLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeeCommander] PreviewerLink
      * Selects TeePreviewer component whose properties to use
               PROPERTY-PUT, 6, @PreviewerLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeeCommander] Vertical
      * When True sets TeeCommander vertically
               PROPERTY-GET, 7, @Vertical
                       RETURNING "boolean", TYPE 11
      *[Class: @TeeCommander] Vertical
      * When True sets TeeCommander vertically
               PROPERTY-PUT, 7, @Vertical,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeeCommander] Controls
      * Displays the sepcified array of TeeCommander buttons
               PROPERTY-GET, 9, @Controls
                       RETURNING "VARIANT", TYPE 12
      *[Class: @TeeCommander] Controls
      * Displays the sepcified array of TeeCommander buttons
               PROPERTY-PUT, 9, @Controls,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @TeeCommander] Buttons
      * As Controls, displays the specified array of TeeCommander buttons
               PROPERTY-GET, 8, @Buttons
                       RETURNING "VARIANT", TYPE 12
      *[Class: @TeeCommander] Buttons
      * As Controls, displays the specified array of TeeCommander buttons
               PROPERTY-PUT, 8, @Buttons,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @TeeCommander] BevelInner
      * Inner bevel
               PROPERTY-GET, 301, @BevelInner
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @TeeCommander] BevelInner
      * Inner bevel
               PROPERTY-PUT, 301, @BevelInner,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @TeeCommander] BevelOuter
      * Outer bevel
               PROPERTY-GET, 302, @BevelOuter
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @TeeCommander] BevelOuter
      * Outer bevel
               PROPERTY-PUT, 302, @BevelOuter,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @TeeCommander] BevelWidth
      * BevelInner and BevelOuter widths
               PROPERTY-GET, 303, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @TeeCommander] BevelWidth
      * BevelInner and BevelOuter widths
               PROPERTY-PUT, 303, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeeCommander] BevelOffset
      * BevelInner and BevelOuter widths
               PROPERTY-GET, 304, @BevelOffset
                       RETURNING "long", TYPE 3
      *[Class: @TeeCommander] BevelOffset
      * BevelInner and BevelOuter widths
               PROPERTY-PUT, 304, @BevelOffset,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeeCommander] BorderStyle
      * Controls if panel draws a border or not
               PROPERTY-GET, 305, @BorderStyle
                       RETURNING "EBorderStyle", TYPE 3
      *[Class: @TeeCommander] BorderStyle
      * Controls if panel draws a border or not
               PROPERTY-PUT, 305, @BorderStyle,
                   "EBorderStyle (Property_Value)", TYPE 3
      *[Class: @TeeCommander] DefaultButton
               PROPERTY-GET, 306, @DefaultButton
                       RETURNING "ETeeCommanderControls", TYPE 3
      *[Class: @TeeCommander] DefaultButton
               PROPERTY-PUT, 306, @DefaultButton,
                   "ETeeCommanderControls (Property_Value)", TYPE 3
      *[Class: @TeeCommander] Button3D
               PROPERTY-GET, 307, @Button3D
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] ButtonCopy
               PROPERTY-GET, 308, @ButtonCopy
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] ButtonDepth
               PROPERTY-GET, 309, @ButtonDepth
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] ButtonEdit
               PROPERTY-GET, 310, @ButtonEdit
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] ButtonMove
               PROPERTY-GET, 311, @ButtonMove
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] ButtonNormal
               PROPERTY-GET, 312, @ButtonNormal
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] ButtonPrint
               PROPERTY-GET, 313, @ButtonPrint
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] ButtonRotate
               PROPERTY-GET, 314, @ButtonRotate
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] ButtonSave
               PROPERTY-GET, 315, @ButtonSave
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] ButtonZoom
               PROPERTY-GET, 316, @ButtonZoom
                       RETURNING "ITeeCommanderButton*", TYPE 9
      *[Class: @TeeCommander] RepositionControls
      * This method will reorder all Visible buttons in the toolbar, eliminating 
               METHOD, 317, @RepositionControls
      *[Class: @TeeCommander] Gradient
               PROPERTY-GET, 318, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @TeeCommander] OnEditedChart
      * Called when the chart editor is closed.
               EVENT, 1, @TeeCommanderOnEditedChart
      *            No Parameters
           
      * Chart Editor pages
           
      * ETeeEditorPage
           CLASS @ETeeEditorPage
               CLSID, 5D1AC60D-BD28-4078-9CB4-268016E102A3
               NAME, "ETeeEditorPage"
      * "long epMain"
               ENUMERATOR, @epMain, 0
      * "long epGeneral"
               ENUMERATOR, @epGeneral, 1
      * "long epAxis"
               ENUMERATOR, @epAxis, 2
      * "long epTitles"
               ENUMERATOR, @epTitles, 3
      * "long epLegend"
               ENUMERATOR, @epLegend, 4
      * "long epPanel"
               ENUMERATOR, @epPanel, 5
      * "long epPaging"
               ENUMERATOR, @epPaging, 6
      * "long epWalls"
               ENUMERATOR, @epWalls, 7
      * "long epAspect"
               ENUMERATOR, @epAspect, 8
      * "long epSeriesGeneral"
               ENUMERATOR, @epSeriesGeneral, 9
      * "long epSeriesMarks"
               ENUMERATOR, @epSeriesMarks, 10
      * "long epAllSeries"
               ENUMERATOR, @epAllSeries, 11
      * "long epSeriesData"
               ENUMERATOR, @epSeriesData, 12
      * "long epExport"
               ENUMERATOR, @epExport, 13
      * "long epTools"
               ENUMERATOR, @epTools, 14
      * "long epPrintPreview"
               ENUMERATOR, @epPrintPreview, 15
      * "long epOpenGL"
               ENUMERATOR, @epOpenGL, 16
           
      * X,Y co-ordinates
           
      * ITeePoint2D
           CLASS @ITeePoint2D
               CLSID, 3E318CA5-F916-458D-8160-6DB2B9129D78
               NAME, "ITeePoint2D"
      *[Class: @ITeePoint2D] X
      * X co-ordinate
               PROPERTY-GET, 1, @X
                       RETURNING "double", TYPE 5
      *[Class: @ITeePoint2D] X
      * X co-ordinate
               PROPERTY-PUT, 1, @X,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITeePoint2D] Y
      * Y co-ordinate
               PROPERTY-GET, 2, @Y
                       RETURNING "double", TYPE 5
      *[Class: @ITeePoint2D] Y
      * Y co-ordinate
               PROPERTY-PUT, 2, @Y,
                   "double (Property_Value)", TYPE 5
           
      * Z co-ordinate
           
      * ITeePoint3D
           CLASS @ITeePoint3D
               CLSID, DE0777A0-0236-4432-B684-1DA2340A4CB7
               NAME, "ITeePoint3D"
      *[Class: @ITeePoint3D] X
      * X co-ordinate
               PROPERTY-GET, 1, @X
                       RETURNING "double", TYPE 5
      *[Class: @ITeePoint3D] X
      * X co-ordinate
               PROPERTY-PUT, 1, @X,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITeePoint3D] Y
      * Y co-ordinate
               PROPERTY-GET, 2, @Y
                       RETURNING "double", TYPE 5
      *[Class: @ITeePoint3D] Y
      * Y co-ordinate
               PROPERTY-PUT, 2, @Y,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITeePoint3D] Z
      * Z co-ordinate
               PROPERTY-GET, 3, @Z
                       RETURNING "double", TYPE 5
      *[Class: @ITeePoint3D] Z
      * Z co-ordinate
               PROPERTY-PUT, 3, @Z,
                   "double (Property_Value)", TYPE 5
           
      * Pages to show in Editor
           
      * ITeeEditorShowPages
           CLASS @ITeeEditorShowPages
               CLSID, F4560FC4-6DEE-4E32-8124-6A854E61EC6D
               NAME, "ITeeEditorShowPages"
      *[Class: @ITeeEditorShowPages] Main
      * Enables/Disables the display of the Editor's Main Page.
               PROPERTY-GET, 1, @Main
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] Main
      * Enables/Disables the display of the Editor's Main Page.
               PROPERTY-PUT, 1, @Main,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] General
      * Enables/Disables the display of the Editor's General Page.
               PROPERTY-GET, 2, @General
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] General
      * Enables/Disables the display of the Editor's General Page.
               PROPERTY-PUT, 2, @General,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] Axis
      * Enables/Disables the display of the Editor's Axis Page.
               PROPERTY-GET, 3, @Axis
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] Axis
      * Enables/Disables the display of the Editor's Axis Page.
               PROPERTY-PUT, 3, @Axis,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] Titles
      * Enables/Disables the display of the Editor's Titles Page.
               PROPERTY-GET, 4, @Titles
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] Titles
      * Enables/Disables the display of the Editor's Titles Page.
               PROPERTY-PUT, 4, @Titles,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] Legend
      * Enables/Disables the display of the Editor's Legend Page.
               PROPERTY-GET, 5, @Legend
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] Legend
      * Enables/Disables the display of the Editor's Legend Page.
               PROPERTY-PUT, 5, @Legend,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] Panel
      * Enables/Disables the display of the Editor's Panel Page.
               PROPERTY-GET, 6, @Panel
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] Panel
      * Enables/Disables the display of the Editor's Panel Page.
               PROPERTY-PUT, 6, @Panel,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] Paging
      * Enables/Disables the display of the Editor's Paging Page.
               PROPERTY-GET, 7, @Paging
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] Paging
      * Enables/Disables the display of the Editor's Paging Page.
               PROPERTY-PUT, 7, @Paging,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] Walls
      * Enables/Disables the display of the Editor's Walls Page.
               PROPERTY-GET, 8, @Walls
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] Walls
      * Enables/Disables the display of the Editor's Walls Page.
               PROPERTY-PUT, 8, @Walls,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] Aspect
      * Enables/Disables the display of the Editor's Aspect Page.
               PROPERTY-GET, 9, @Aspect
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] Aspect
      * Enables/Disables the display of the Editor's Aspect Page.
               PROPERTY-PUT, 9, @Aspect,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] SeriesGeneral
      * Enables/Disables the display of the Editor's Series General Page.
               PROPERTY-GET, 10, @SeriesGeneral
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] SeriesGeneral
      * Enables/Disables the display of the Editor's Series General Page.
               PROPERTY-PUT, 10, @SeriesGeneral,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] SeriesMarks
      * Enables/Disables the display of the Editor's Series Marks Page.
               PROPERTY-GET, 11, @SeriesMarks
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] SeriesMarks
      * Enables/Disables the display of the Editor's Series Marks Page.
               PROPERTY-PUT, 11, @SeriesMarks,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] Tools
      * Enables/Disables the display of the Editor's Tools Page.
               PROPERTY-GET, 12, @Tools
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] Tools
      * Enables/Disables the display of the Editor's Tools Page.
               PROPERTY-PUT, 12, @Tools,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] SeriesData
      * Enables/Disables the display of the Editor's Data Page.
               PROPERTY-GET, 13, @SeriesData
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] SeriesData
      * Enables/Disables the display of the Editor's Data Page.
               PROPERTY-PUT, 13, @SeriesData,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] ExportDialog
      * Enables/Disables the display of the Editor's Export Page.
               PROPERTY-GET, 14, @ExportDialog
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] ExportDialog
      * Enables/Disables the display of the Editor's Export Page.
               PROPERTY-PUT, 14, @ExportDialog,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] PrintPreview
      * Enables/Disables the display of the Editor's Print Page.
               PROPERTY-GET, 15, @PrintPreview
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] PrintPreview
      * Enables/Disables the display of the Editor's Print Page.
               PROPERTY-PUT, 15, @PrintPreview,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] OpenGL
      * Enables/Disables the display of the OpenGL Page.
               PROPERTY-GET, 16, @OpenGL
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] OpenGL
      * Enables/Disables the display of the OpenGL Page.
               PROPERTY-PUT, 16, @OpenGL,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] Themes
      * Enables/Disables the display of the Themes Page.
               PROPERTY-PUT, 201, @Themes,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorShowPages] ExportNative
      * Enables/Disables the display of the Native Export Page.
               PROPERTY-GET, 202, @ExportNative
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorShowPages] ExportNative
      * Enables/Disables the display of the Native Export Page.
               PROPERTY-PUT, 202, @ExportNative,
                   "boolean (Property_Value)", TYPE 11
           
      * Series Options for Editor
           
      * ITeeEditorOptions
           CLASS @ITeeEditorOptions
               CLSID, 59C33579-7766-44BD-9F6D-906AD31D91C1
               NAME, "ITeeEditorOptions"
      *[Class: @ITeeEditorOptions] Add
      * Enables / Disables adding new Series
               PROPERTY-GET, 1, @Add
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] Add
      * Enables / Disables adding new Series
               PROPERTY-PUT, 1, @Add,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorOptions] Delete
      * Enables / Disables deleting Series
               PROPERTY-GET, 2, @Delete
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] Delete
      * Enables / Disables deleting Series
               PROPERTY-PUT, 2, @Delete,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorOptions] Change
      * Enables / Disables changing the Series type
               PROPERTY-GET, 3, @Change
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] Change
      * Enables / Disables changing the Series type
               PROPERTY-PUT, 3, @Change,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorOptions] Clone
      * Enables / Disables cloning the Series
               PROPERTY-GET, 4, @Clone
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] Clone
      * Enables / Disables cloning the Series
               PROPERTY-PUT, 4, @Clone,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorOptions] DataSource
      * Enables / Disables modifying the Series datasource
               PROPERTY-GET, 5, @DataSource
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] DataSource
      * Enables / Disables modifying the Series datasource
               PROPERTY-PUT, 5, @DataSource,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorOptions] Title
      * Enables / Disables modifying the Series Title
               PROPERTY-GET, 6, @Title
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] Title
      * Enables / Disables modifying the Series Title
               PROPERTY-PUT, 6, @Title,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorOptions] Help
      * Enables / Disables Help at editor dialog
               PROPERTY-GET, 7, @Help
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] Help
      * Enables / Disables Help at editor dialog
               PROPERTY-PUT, 7, @Help,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorOptions] Groups
      * Enable/Disable the Groups Tab
               PROPERTY-GET, 201, @Groups
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] Groups
      * Enable/Disable the Groups Tab
               PROPERTY-PUT, 201, @Groups,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorOptions] AllGroups
      * Enable/Disable the AllGroups Tab
               PROPERTY-GET, 202, @AllGroups
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] AllGroups
      * Enable/Disable the AllGroups Tab
               PROPERTY-PUT, 202, @AllGroups,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeEditorOptions] OrderSeries
      * Enable/Disable the arrow buttons in Chart Editor
               PROPERTY-GET, 203, @OrderSeries
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeEditorOptions] OrderSeries
      * Enable/Disable the arrow buttons in Chart Editor
               PROPERTY-PUT, 203, @OrderSeries,
                   "boolean (Property_Value)", TYPE 11
           
      * Options for TeePreviewer display
           
      * ITeePreviewerOptions
           CLASS @ITeePreviewerOptions
               CLSID, FABB5149-A34E-44C2-88F9-4C0C24A0D7B4
               NAME, "ITeePreviewerOptions"
      *[Class: @ITeePreviewerOptions] ChangePrinter
      * Enables/Disables the ChangePrinter dialog in the TeePreviewer.
               PROPERTY-GET, 1, @ChangePrinter
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] ChangePrinter
      * Enables/Disables the ChangePrinter dialog in the TeePreviewer.
               PROPERTY-PUT, 1, @ChangePrinter,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewerOptions] SetupPrinter
      * Enables/Disables the SetupPrinter dialog in the TeePreviewer.
               PROPERTY-GET, 2, @SetupPrinter
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] SetupPrinter
      * Enables/Disables the SetupPrinter dialog in the TeePreviewer.
               PROPERTY-PUT, 2, @SetupPrinter,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewerOptions] ResizeImage
      * Enables/Disables the ResizeImage dialog in the TeePreviewer.
               PROPERTY-GET, 3, @ResizeImage
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] ResizeImage
      * Enables/Disables the ResizeImage dialog in the TeePreviewer.
               PROPERTY-PUT, 3, @ResizeImage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewerOptions] MoveImage
      * Enables/Disables the MoveImage dialog in the TeePreviewer.
               PROPERTY-GET, 4, @MoveImage
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] MoveImage
      * Enables/Disables the MoveImage dialog in the TeePreviewer.
               PROPERTY-PUT, 4, @MoveImage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewerOptions] ChangeDetail
      * Enables/Disables the ChangeDetail dialog in the TeePreviewer.
               PROPERTY-GET, 5, @ChangeDetail
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] ChangeDetail
      * Enables/Disables the ChangeDetail dialog in the TeePreviewer.
               PROPERTY-PUT, 5, @ChangeDetail,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewerOptions] ChangePaperOrientation
      * Enables/Disables the ChangePaperOrientation dialog in the TeePreviewer.
               PROPERTY-GET, 6, @ChangePaperOrientation
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] ChangePaperOrientation
      * Enables/Disables the ChangePaperOrientation dialog in the TeePreviewer.
               PROPERTY-PUT, 6, @ChangePaperOrientation,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewerOptions] ChangeMargins
      * Enables/Disables the ChangeMargins dialog in the TeePreviewer.
               PROPERTY-GET, 7, @ChangeMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] ChangeMargins
      * Enables/Disables the ChangeMargins dialog in the TeePreviewer.
               PROPERTY-PUT, 7, @ChangeMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewerOptions] DragImage
      * Enables/Disables the DragImage dialog in the TeePreviewer.
               PROPERTY-GET, 9, @DragImage
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] DragImage
      * Enables/Disables the DragImage dialog in the TeePreviewer.
               PROPERTY-PUT, 9, @DragImage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewerOptions] PrintPanel
      * Enables/Disables the PrintPanel dialog in the TeePreviewer.
               PROPERTY-GET, 10, @PrintPanel
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] PrintPanel
      * Enables/Disables the PrintPanel dialog in the TeePreviewer.
               PROPERTY-PUT, 10, @PrintPanel,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewerOptions] AsBitmap
      * Enables/Disables the AsBitmap dialog in the TeePreviewer.
               PROPERTY-GET, 11, @AsBitmap
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewerOptions] AsBitmap
      * Enables/Disables the AsBitmap dialog in the TeePreviewer.
               PROPERTY-PUT, 11, @AsBitmap,
                   "boolean (Property_Value)", TYPE 11
           
      * OpenGL 3D rendering properties
           
      * ITeeOpenGL
           CLASS @ITeeOpenGL
               CLSID, F26EAABE-76EF-4464-9282-3A9B34BD64B7
               NAME, "ITeeOpenGL"
      *[Class: @ITeeOpenGL] Active
      * Enable / Disable OpenGL 3D rendering
               PROPERTY-GET, 3, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeOpenGL] Active
      * Enable / Disable OpenGL 3D rendering
               PROPERTY-PUT, 3, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeOpenGL] AmbientLight
      * Percent of ambient light 0..100
               PROPERTY-GET, 1, @AmbientLight
                       RETURNING "long", TYPE 3
      *[Class: @ITeeOpenGL] AmbientLight
      * Percent of ambient light 0..100
               PROPERTY-PUT, 1, @AmbientLight,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeOpenGL] LightPosition
      * Position of light source
               PROPERTY-GET, 2, @LightPosition
                       RETURNING "ITeePoint3D*", TYPE 9
      *[Class: @ITeeOpenGL] LightColor
      * The light intensity (default = Gray )
               PROPERTY-GET, 4, @LightColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeOpenGL] LightColor
      * The light intensity (default = Gray )
               PROPERTY-PUT, 4, @LightColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeOpenGL] FontOutlines
      * Draws filled or outlined fonts
               PROPERTY-GET, 5, @FontOutlines
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeOpenGL] FontOutlines
      * Draws filled or outlined fonts
               PROPERTY-PUT, 5, @FontOutlines,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeOpenGL] ShadeQuality
      * Fill drawings using smooth color gradients
               PROPERTY-GET, 6, @ShadeQuality
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeOpenGL] ShadeQuality
      * Fill drawings using smooth color gradients
               PROPERTY-PUT, 6, @ShadeQuality,
                   "boolean (Property_Value)", TYPE 11
           
      * Clock Series
           
      * IClockSeries
           CLASS @IClockSeries
               CLSID, 3155A5BE-269B-4420-A10A-F6987ED34BCE
               NAME, "IClockSeries"
      *[Class: @IClockSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @IClockSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IClockSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @IClockSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IClockSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @IClockSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @IClockSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @IClockSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @IClockSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IClockSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IClockSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @IClockSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IClockSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @IClockSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IClockSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IClockSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IClockSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-GET, 30, @AngleIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IClockSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-PUT, 30, @AngleIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IClockSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-GET, 31, @CloseCircle
                       RETURNING "boolean", TYPE 11
      *[Class: @IClockSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-PUT, 31, @CloseCircle,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IClockSeries] Pen
      * The Pen used to draw the polar lines
               PROPERTY-GET, 32, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IClockSeries] Pointer
      * The pointer attributes for polar points (point markers)
               PROPERTY-GET, 33, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IClockSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-GET, 34, @RadiusIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IClockSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-PUT, 34, @RadiusIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IClockSeries] AngleValues
      * The list of angle values for each polar point
               PROPERTY-GET, 35, @AngleValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IClockSeries] RadiusValues
      * The list of radius values for each polar point
               PROPERTY-GET, 36, @RadiusValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IClockSeries] DrawRing
      * Draws a circular ring at "Value" radius in the "Z" plane
               METHOD, 38, @DrawRing,
                   "double" @Value, TYPE 5,
                   "long" @Z, TYPE 3
      *[Class: @IClockSeries] CirclePen
      * The pen used to draw the circle border
               PROPERTY-GET, 39, @CirclePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IClockSeries] CircleLabels
      * Outer circle Label characteristics
               PROPERTY-GET, 40, @CircleLabels
                       RETURNING "ICircleLabels*", TYPE 9
      *[Class: @IClockSeries] Brush
      * Background Brush
               PROPERTY-GET, 3, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IClockSeries] LoadBackImage
      * Load bitmap to background
               METHOD, 13, @LoadBackImage,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IClockSeries] ClearBackImage
      * Clear BackImage
               METHOD, 14, @ClearBackImage
      *[Class: @IClockSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-GET, 155, @ClockWiseLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IClockSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-PUT, 155, @ClockWiseLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IClockSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-GET, 156, @CircleLabelsInside
                       RETURNING "boolean", TYPE 11
      *[Class: @IClockSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-PUT, 156, @CircleLabelsInside,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IClockSeries] Transparency
      * Fill transparency
               PROPERTY-GET, 115, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IClockSeries] Transparency
      * Fill transparency
               PROPERTY-PUT, 115, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IClockSeries] CircleGradient
      * Circle gradient characteristics for the back area of the polar serie.
               PROPERTY-GET, 301, @CircleGradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IClockSeries] DrawZone
      * Draws an elliptical "zone"  (like a donut) from Min to Max (in axis 
               METHOD, 302, @DrawZone,
                   "double" @Min, TYPE 5,
                   "double" @Max, TYPE 5,
                   "long" @Z, TYPE 3
      *[Class: @IClockSeries] RomanNumbers
      * Displays clock numbers as decimal or roman
               PROPERTY-GET, 15, @RomanNumbers
                       RETURNING "boolean", TYPE 11
      *[Class: @IClockSeries] RomanNumbers
      * Displays clock numbers as decimal or roman
               PROPERTY-PUT, 15, @RomanNumbers,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IClockSeries] PenHours
      * HourHand Pen
               PROPERTY-GET, 16, @PenHours
                       RETURNING "IPen*", TYPE 9
      *[Class: @IClockSeries] PenMinutes
      * MinuteHand Pen
               PROPERTY-GET, 17, @PenMinutes
                       RETURNING "IPen*", TYPE 9
      *[Class: @IClockSeries] PenSeconds
      * SecondHand Pen
               PROPERTY-GET, 18, @PenSeconds
                       RETURNING "IPen*", TYPE 9
           
      * Wind Rose N-W-S-E polar series
           
      * IWindRoseSeries
           CLASS @IWindRoseSeries
               CLSID, BEDC072D-0B5E-4796-B97B-3F05CBCC9417
               NAME, "IWindRoseSeries"
      *[Class: @IWindRoseSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @IWindRoseSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWindRoseSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @IWindRoseSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWindRoseSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @IWindRoseSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @IWindRoseSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @IWindRoseSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @IWindRoseSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IWindRoseSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IWindRoseSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @IWindRoseSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWindRoseSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @IWindRoseSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWindRoseSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IWindRoseSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IWindRoseSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-GET, 30, @AngleIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IWindRoseSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-PUT, 30, @AngleIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IWindRoseSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-GET, 31, @CloseCircle
                       RETURNING "boolean", TYPE 11
      *[Class: @IWindRoseSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-PUT, 31, @CloseCircle,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWindRoseSeries] Pen
      * The Pen used to draw the polar lines
               PROPERTY-GET, 32, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IWindRoseSeries] Pointer
      * The pointer attributes for polar points (point markers)
               PROPERTY-GET, 33, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IWindRoseSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-GET, 34, @RadiusIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IWindRoseSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-PUT, 34, @RadiusIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IWindRoseSeries] AngleValues
      * The list of angle values for each polar point
               PROPERTY-GET, 35, @AngleValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IWindRoseSeries] RadiusValues
      * The list of radius values for each polar point
               PROPERTY-GET, 36, @RadiusValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IWindRoseSeries] DrawRing
      * Draws a circular ring at "Value" radius in the "Z" plane
               METHOD, 38, @DrawRing,
                   "double" @Value, TYPE 5,
                   "long" @Z, TYPE 3
      *[Class: @IWindRoseSeries] CirclePen
      * The pen used to draw the circle border
               PROPERTY-GET, 39, @CirclePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IWindRoseSeries] CircleLabels
      * Outer circle Label characteristics
               PROPERTY-GET, 40, @CircleLabels
                       RETURNING "ICircleLabels*", TYPE 9
      *[Class: @IWindRoseSeries] Brush
      * Background Brush
               PROPERTY-GET, 3, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IWindRoseSeries] LoadBackImage
      * Load bitmap to background
               METHOD, 13, @LoadBackImage,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IWindRoseSeries] ClearBackImage
      * Clear BackImage
               METHOD, 14, @ClearBackImage
      *[Class: @IWindRoseSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-GET, 155, @ClockWiseLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IWindRoseSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-PUT, 155, @ClockWiseLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWindRoseSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-GET, 156, @CircleLabelsInside
                       RETURNING "boolean", TYPE 11
      *[Class: @IWindRoseSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-PUT, 156, @CircleLabelsInside,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWindRoseSeries] Transparency
      * Fill transparency
               PROPERTY-GET, 115, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IWindRoseSeries] Transparency
      * Fill transparency
               PROPERTY-PUT, 115, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWindRoseSeries] CircleGradient
      * Circle gradient characteristics for the back area of the polar serie.
               PROPERTY-GET, 301, @CircleGradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IWindRoseSeries] DrawZone
      * Draws an elliptical "zone"  (like a donut) from Min to Max (in axis 
               METHOD, 302, @DrawZone,
                   "double" @Min, TYPE 5,
                   "double" @Max, TYPE 5,
                   "long" @Z, TYPE 3
           
      * Vertical Bar Series with Offset 3D values
           
      * IBar3DSeries
           CLASS @IBar3DSeries
               CLSID, C09765E5-EA5B-45C8-A677-A7E3442AD319
               NAME, "IBar3DSeries"
      *[Class: @IBar3DSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-GET, 20, @MultiBar
                       RETURNING "EMultiBar", TYPE 3
      *[Class: @IBar3DSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-PUT, 20, @MultiBar,
                   "EMultiBar (Property_Value)", TYPE 3
      *[Class: @IBar3DSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-GET, 21, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IBar3DSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-PUT, 21, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBar3DSeries] BarBrush
      * The brush used to fill the Bars
               PROPERTY-GET, 22, @BarBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IBar3DSeries] BarPen
      * The pen used to draw the Bar borders
               PROPERTY-GET, 23, @BarPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBar3DSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-GET, 24, @BarStyle
                       RETURNING "EBarStyle", TYPE 3
      *[Class: @IBar3DSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-PUT, 24, @BarStyle,
                   "EBarStyle (Property_Value)", TYPE 3
      *[Class: @IBar3DSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-GET, 25, @BarWidthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IBar3DSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-PUT, 25, @BarWidthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBar3DSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-GET, 26, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IBar3DSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-PUT, 26, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBar3DSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-GET, 27, @OffsetPercent
                       RETURNING "long", TYPE 3
      *[Class: @IBar3DSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-PUT, 27, @OffsetPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBar3DSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-GET, 28, @SideMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IBar3DSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-PUT, 28, @SideMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBar3DSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-GET, 29, @UseOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IBar3DSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-PUT, 29, @UseOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBar3DSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-GET, 30, @Origin
                       RETURNING "double", TYPE 5
      *[Class: @IBar3DSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-PUT, 30, @Origin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBar3DSeries] GetOriginPos
      * Returns the baseline pixel coordinate of ValueIndexth Bar
               METHOD, 31, @GetOriginPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IBar3DSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-GET, 32, @AutoBarSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IBar3DSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-PUT, 32, @AutoBarSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBar3DSeries] BarImageLoad
      * Load Bar image
               METHOD, 33, @BarImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IBar3DSeries] BarImageClear
      * Clear Bar image
               METHOD, 34, @BarImageClear
      *[Class: @IBar3DSeries] Gradient
      * Sets the characteristics of gradients within Bars of a Bar Series.
               PROPERTY-GET, 45, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IBar3DSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-GET, 2, @StackGroup
                       RETURNING "long", TYPE 3
      *[Class: @IBar3DSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-PUT, 2, @StackGroup,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBar3DSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-GET, 111, @ConePercent
                       RETURNING "long", TYPE 3
      *[Class: @IBar3DSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-PUT, 111, @ConePercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBar3DSeries] TickLines
      * The pen used to draw the TickLines
               PROPERTY-GET, 201, @TickLines
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBar3DSeries] DepthPercent
               PROPERTY-GET, 202, @DepthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IBar3DSeries] DepthPercent
               PROPERTY-PUT, 202, @DepthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBar3DSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-GET, 40, @BarWidth
                       RETURNING "long", TYPE 3
      *[Class: @IBar3DSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-PUT, 40, @BarWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBar3DSeries] AddBar
      * Adds a new Bar3D point to the Series
               METHOD, 1, @AddBar,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AOffset, TYPE 5,
                   "BSTR" @ALabel, TYPE 8,
                   "OLE_COLOR" @AColor, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IBar3DSeries] OffsetValues
      * The list of Series' OffsetValues
               PROPERTY-GET, 3, @OffsetValues
                       RETURNING "IValueList*", TYPE 9
           
      * Bar Series with Image picture
           
      * IImageBarSeries
           CLASS @IImageBarSeries
               CLSID, 2130B8BE-4CD2-403A-8E08-D86EE8AF0763
               NAME, "IImageBarSeries"
      *[Class: @IImageBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-GET, 20, @MultiBar
                       RETURNING "EMultiBar", TYPE 3
      *[Class: @IImageBarSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-PUT, 20, @MultiBar,
                   "EMultiBar (Property_Value)", TYPE 3
      *[Class: @IImageBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-GET, 21, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IImageBarSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-PUT, 21, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IImageBarSeries] BarBrush
      * The brush used to fill the Bars
               PROPERTY-GET, 22, @BarBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IImageBarSeries] BarPen
      * The pen used to draw the Bar borders
               PROPERTY-GET, 23, @BarPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IImageBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-GET, 24, @BarStyle
                       RETURNING "EBarStyle", TYPE 3
      *[Class: @IImageBarSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-PUT, 24, @BarStyle,
                   "EBarStyle (Property_Value)", TYPE 3
      *[Class: @IImageBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-GET, 25, @BarWidthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IImageBarSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-PUT, 25, @BarWidthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IImageBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-GET, 26, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IImageBarSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-PUT, 26, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IImageBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-GET, 27, @OffsetPercent
                       RETURNING "long", TYPE 3
      *[Class: @IImageBarSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-PUT, 27, @OffsetPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IImageBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-GET, 28, @SideMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IImageBarSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-PUT, 28, @SideMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IImageBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-GET, 29, @UseOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IImageBarSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-PUT, 29, @UseOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IImageBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-GET, 30, @Origin
                       RETURNING "double", TYPE 5
      *[Class: @IImageBarSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-PUT, 30, @Origin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IImageBarSeries] GetOriginPos
      * Returns the baseline pixel coordinate of ValueIndexth Bar
               METHOD, 31, @GetOriginPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IImageBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-GET, 32, @AutoBarSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IImageBarSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-PUT, 32, @AutoBarSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IImageBarSeries] BarImageLoad
      * Load Bar image
               METHOD, 33, @BarImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IImageBarSeries] BarImageClear
      * Clear Bar image
               METHOD, 34, @BarImageClear
      *[Class: @IImageBarSeries] Gradient
      * Sets the characteristics of gradients within Bars of a Bar Series.
               PROPERTY-GET, 45, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IImageBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-GET, 2, @StackGroup
                       RETURNING "long", TYPE 3
      *[Class: @IImageBarSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-PUT, 2, @StackGroup,
                   "long (Property_Value)", TYPE 3
      *[Class: @IImageBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-GET, 111, @ConePercent
                       RETURNING "long", TYPE 3
      *[Class: @IImageBarSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-PUT, 111, @ConePercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IImageBarSeries] TickLines
      * The pen used to draw the TickLines
               PROPERTY-GET, 201, @TickLines
                       RETURNING "IPen*", TYPE 9
      *[Class: @IImageBarSeries] DepthPercent
               PROPERTY-GET, 202, @DepthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IImageBarSeries] DepthPercent
               PROPERTY-PUT, 202, @DepthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IImageBarSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-GET, 40, @BarWidth
                       RETURNING "long", TYPE 3
      *[Class: @IImageBarSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-PUT, 40, @BarWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IImageBarSeries] LoadImage
      * Load
               METHOD, 1, @LoadImage,
                   "BSTR" @FileName, TYPE 8
                       RETURNING "boolean", TYPE 11
      *[Class: @IImageBarSeries] ClearImage
      * Clear
               METHOD, 3, @ClearImage
      *[Class: @IImageBarSeries] ImageTiled
      * Tiled
               PROPERTY-GET, 4, @ImageTiled
                       RETURNING "boolean", TYPE 11
      *[Class: @IImageBarSeries] ImageTiled
      * Tiled
               PROPERTY-PUT, 4, @ImageTiled,
                   "boolean (Property_Value)", TYPE 11
           
      * Use with Stream method to set Stream format
           
      * EStreamType
           CLASS @EStreamType
               CLSID, 5A7DAB3E-A853-481F-A1EF-67A5311D2431
               NAME, "EStreamType"
      * "long stJpeg"
               ENUMERATOR, @stJpeg, 0
      * "long stTeeTemplate"
               ENUMERATOR, @stTeeTemplate, 1
           
      * Access to the Tools characteristics.
           
      * ITools
           CLASS @ITools
               CLSID, 33513709-BC9E-4A91-930D-D13BB2F3C157
               NAME, "ITools"
      *[Class: @ITools] asTeeCursor
      * Accesses TeeCursor Tool characteristics.
               PROPERTY-GET, 1, @asTeeCursor
                       RETURNING "ICursorTool*", TYPE 9
      *[Class: @ITools] asDragMarks
      * Accesses DragMarks Tool characteristics.
               PROPERTY-GET, 2, @asDragMarks
                       RETURNING "IDragMarksTool*", TYPE 9
      *[Class: @ITools] asAxisArrow
      * Accesses AxisArrow Tool characteristics.
               PROPERTY-GET, 3, @asAxisArrow
                       RETURNING "IAxisArrowTool*", TYPE 9
      *[Class: @ITools] asDrawLine
      * Accesses DrawLine Tool characteristics.
               PROPERTY-GET, 4, @asDrawLine
                       RETURNING "IDrawLineTool*", TYPE 9
      *[Class: @ITools] asNearest
      * Accesses Nearest Tool characteristics.
               PROPERTY-GET, 5, @asNearest
                       RETURNING "INearestTool*", TYPE 9
      *[Class: @ITools] asColorband
      * Accesses Colorband Tool characteristics.
               PROPERTY-GET, 6, @asColorband
                       RETURNING "IColorBandTool*", TYPE 9
      *[Class: @ITools] asColorLine
      * Accesses ColorLine Tool characteristics.
               PROPERTY-GET, 7, @asColorLine
                       RETURNING "IColorLineTool*", TYPE 9
      *[Class: @ITools] asRotate
      * Accesses Rotate Tool characteristics.
               PROPERTY-GET, 8, @asRotate
                       RETURNING "IRotateTool*", TYPE 9
      *[Class: @ITools] asMarksTip
      * Accesses MarksTip Tool characteristics.
               PROPERTY-GET, 9, @asMarksTip
                       RETURNING "IMarksTipTool*", TYPE 9
      *[Class: @ITools] asChartImage
      * Accesses ChartImage Tool characteristics.
               PROPERTY-GET, 10, @asChartImage
                       RETURNING "IChartImageTool*", TYPE 9
      *[Class: @ITools] asAnnotation
      * Accesses Annotation Tool characteristics.
               PROPERTY-GET, 11, @asAnnotation
                       RETURNING "IAnnotationTool*", TYPE 9
      *[Class: @ITools] asPageNum
      * Accesses PageNumber Tool characteristics.
               PROPERTY-GET, 12, @asPageNum
                       RETURNING "IPageNumTool*", TYPE 9
      *[Class: @ITools] Active
      * Activates/Deactivates the specified Chart Tool
               PROPERTY-GET, 13, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @ITools] Active
      * Activates/Deactivates the specified Chart Tool
               PROPERTY-PUT, 13, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITools] Description
      * Returns a string description of the Chart Tool
               PROPERTY-GET, 14, @Description
                       RETURNING "BSTR", TYPE 8
      *[Class: @ITools] ToolType
      * Returns the class name of the Chart Tool
               PROPERTY-GET, 15, @ToolType
                       RETURNING "EToolClass", TYPE 3
      *[Class: @ITools] ShowEditor
      * Shows a dialog to modify the current tools properties
               METHOD, 201, @ShowEditor
      *[Class: @ITools] asGridTranspose
      * Accesses Grid Transpose Tool characteristics.
               PROPERTY-GET, 202, @asGridTranspose
                       RETURNING "IGridTransposeTool*", TYPE 9
      *[Class: @ITools] asExtraLegend
      * Accesses Extra Legend Tool characteristics.
               PROPERTY-GET, 203, @asExtraLegend
                       RETURNING "IExtraLegendTool*", TYPE 9
      *[Class: @ITools] asSeriesAnimation
      * Accesses Series Animation Tool characteristics.
               PROPERTY-GET, 204, @asSeriesAnimation
                       RETURNING "ISeriesAnimationTool*", TYPE 9
      *[Class: @ITools] asGantt
      * Accessed Gant tool characteristics.
               PROPERTY-GET, 205, @asGantt
                       RETURNING "IGanttTool*", TYPE 9
      *[Class: @ITools] asGridBand
      * Accesses Grid Band Tool characteristics.
               PROPERTY-GET, 206, @asGridBand
                       RETURNING "IGridBandTool*", TYPE 9
      *[Class: @ITools] asPie
      * Accesses Pie Tool characteristics.
               PROPERTY-GET, 207, @asPie
                       RETURNING "IPieTool*", TYPE 9
      *[Class: @ITools] asDragPoint
      * Accesses DragPoint Tooll characteristics
               PROPERTY-GET, 208, @asDragPoint
                       RETURNING "IDragPointTool*", TYPE 9
      *[Class: @ITools] asLegendScrollBar
      * Acces LegendScrollBar carachteristics
               PROPERTY-GET, 209, @asLegendScrollBar
                       RETURNING "ILegendScrollBarTool*", TYPE 9
      *[Class: @ITools] asLight
      * Acces Light tool carachteristics
               PROPERTY-GET, 210, @asLight
                       RETURNING "ILightTool*", TYPE 9
      *[Class: @ITools] asSurfaceNearest
      * Acces SurfaceNearest tool carachteristics
               PROPERTY-GET, 211, @asSurfaceNearest
                       RETURNING "ISurfaceNearestTool*", TYPE 9
      *[Class: @ITools] asAxisScroll
      * Axis Scroll tool enables mouse dragging of axis to scroll them.
               PROPERTY-GET, 212, @asAxisScroll
                       RETURNING "IAxisScrollTool*", TYPE 9
      *[Class: @ITools] asSeriesBand
      * To access to SeriesBand tool properties
               PROPERTY-GET, 213, @asSeriesBand
                       RETURNING "ISeriesBandTool*", TYPE 9
      *[Class: @ITools] asSelector
      * To access to the Selector Tool properties
               PROPERTY-GET, 214, @asSelector
                       RETURNING "ISelectorTool*", TYPE 9
      *[Class: @ITools] asRectangle
      * To access to the Rectangle Tool properties
               PROPERTY-GET, 215, @asRectangle
                       RETURNING "IRectangleTool*", TYPE 9
      *[Class: @ITools] ShowInEditor
      * Allow to show/hide a specific tool in the Editor
               PROPERTY-GET, 216, @ShowInEditor
                       RETURNING "boolean", TYPE 11
      *[Class: @ITools] ShowInEditor
      * Allow to show/hide a specific tool in the Editor
               PROPERTY-PUT, 216, @ShowInEditor,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITools] asDataTable
      * To access to the DataTable Tool properties
               PROPERTY-GET, 217, @asDataTable
                       RETURNING "IDataTableTool*", TYPE 9
           
      * Ancestor class for TeeChart Tool classes.
           
      * ICustomToolSeries
           CLASS @ICustomToolSeries
               CLSID, 9F6DEB9E-C40E-4F61-AF65-7FF593424DA3
               NAME, "ICustomToolSeries"
      *[Class: @ICustomToolSeries] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ICustomToolSeries] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
           
      * Defines the style of the Cursor Tool
           
      * ECursorToolStyle
           CLASS @ECursorToolStyle
               CLSID, 2C57ADCD-D08A-420B-B12D-A4EB7F362012
               NAME, "ECursorToolStyle"
      * "long cssHorizontal"
               ENUMERATOR, @cssHorizontal, 0
      * "long cssVertical"
               ENUMERATOR, @cssVertical, 1
      * "long cssBoth"
               ENUMERATOR, @cssBoth, 2
           
      * Allows the mousedrag of Marks for the selected Series.
           
      * IDragMarksTool
           CLASS @IDragMarksTool
               CLSID, 664CD301-FD11-472E-9B65-0156BB5B6A9B
               NAME, "IDragMarksTool"
      *[Class: @IDragMarksTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IDragMarksTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
           
      * Ancestor class for TeeChart Tool classes.
           
      * ICustomToolAxis
           CLASS @ICustomToolAxis
               CLSID, 67E6F7E3-DE3E-4272-B10B-4A9F68DD5294
               NAME, "ICustomToolAxis"
      *[Class: @ICustomToolAxis] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-GET, 13, @Axis
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ICustomToolAxis] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-PUT, 13, @Axis,
                   "VARIANT (Property_Value)", TYPE 12
           
      * Permits the ability to draw Lines on the Chart via mousedrags.
           
      * IDrawLineTool
           CLASS @IDrawLineTool
               CLSID, BD52CC8C-D05B-4D77-BD6F-CE9E6D349912
               NAME, "IDrawLineTool"
      *[Class: @IDrawLineTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IDrawLineTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IDrawLineTool] FromPoint
      * Sets the X and Y values from which lines are drawn.
               PROPERTY-GET, 1, @FromPoint
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IDrawLineTool] ToPoint
      * Sets the X and Y values to which lines are drawn.
               PROPERTY-GET, 2, @ToPoint
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IDrawLineTool] AxisPoint
      * Returns the coordinate position in pixels corresponding to the ""P"" 
               METHOD, 3, @AxisPoint,
                   "double" @X, TYPE 5,
                   "double" @Y, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IDrawLineTool] Clicked
      * Returns TDrawLine Line at x,y point.
               METHOD, 4, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IDrawLineTool] DeleteSelected
      * Delete currently selected TDrawLine.
               METHOD, 5, @DeleteSelected
      *[Class: @IDrawLineTool] ScreenPoint
      * Returns the corresponding point-value on respectively the horizontal and 
               METHOD, 6, @ScreenPoint,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IDrawLineTool] Lines
      * Contains the list of lines drawn on the chart by the user at run-time.
               PROPERTY-GET, 7, @Lines
                       RETURNING "IDrawLineList*", TYPE 9
      *[Class: @IDrawLineTool] Selected
      * Returns the line or lines that are currently selected.
               PROPERTY-GET, 8, @Selected
                       RETURNING "long", TYPE 3
      *[Class: @IDrawLineTool] Selected
      * Returns the line or lines that are currently selected.
               PROPERTY-PUT, 8, @Selected,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDrawLineTool] Button
      * Defines by which mousebutton the DrawLine Tool is activated.
               PROPERTY-GET, 9, @Button
                       RETURNING "EMouseButton", TYPE 3
      *[Class: @IDrawLineTool] Button
      * Defines by which mousebutton the DrawLine Tool is activated.
               PROPERTY-PUT, 9, @Button,
                   "EMouseButton (Property_Value)", TYPE 3
      *[Class: @IDrawLineTool] EnableDraw
      * Enables/disables the drawing of lines on the chart by the user at 
               PROPERTY-GET, 10, @EnableDraw
                       RETURNING "boolean", TYPE 11
      *[Class: @IDrawLineTool] EnableDraw
      * Enables/disables the drawing of lines on the chart by the user at 
               PROPERTY-PUT, 10, @EnableDraw,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDrawLineTool] EnableSelect
      * Enables selection of lines for repositioning on the Chart.
               PROPERTY-GET, 11, @EnableSelect
                       RETURNING "boolean", TYPE 11
      *[Class: @IDrawLineTool] EnableSelect
      * Enables selection of lines for repositioning on the Chart.
               PROPERTY-PUT, 11, @EnableSelect,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDrawLineTool] Pen
      * Element Pen characteristics.
               PROPERTY-GET, 13, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IDrawLineTool] AddLine
      * Add new line
               METHOD, 12, @AddLine,
                   "double" @FromX, TYPE 5,
                   "double" @FromY, TYPE 5,
                   "double" @ToX, TYPE 5,
                   "double" @ToY, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IDrawLineTool] ClickTolerance
      * Gets the ClickTolerance for the lines
               PROPERTY-GET, 301, @ClickTolerance
                       RETURNING "long", TYPE 3
      *[Class: @IDrawLineTool] ClickTolerance
      * Gets the ClickTolerance for the lines
               PROPERTY-PUT, 301, @ClickTolerance,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDrawLineTool] SelectNewLines
      * After a line has been painted it stills selected
               PROPERTY-GET, 302, @SelectNewLines
                       RETURNING "boolean", TYPE 11
      *[Class: @IDrawLineTool] SelectNewLines
      * After a line has been painted it stills selected
               PROPERTY-PUT, 302, @SelectNewLines,
                   "boolean (Property_Value)", TYPE 11
           
      * Moves a marker to the point nearest to the cursor.
           
      * INearestTool
           CLASS @INearestTool
               CLSID, BE7E193C-2BEE-4110-B8D0-018D0D79542F
               NAME, "INearestTool"
      *[Class: @INearestTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @INearestTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @INearestTool] Brush
      * Element Brush characteristics.
               PROPERTY-GET, 2, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @INearestTool] DrawLine
      * Set this property to True if a temporary line has to be drawn from the 
               PROPERTY-GET, 3, @DrawLine
                       RETURNING "boolean", TYPE 11
      *[Class: @INearestTool] DrawLine
      * Set this property to True if a temporary line has to be drawn from the 
               PROPERTY-PUT, 3, @DrawLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @INearestTool] FullRepaint
      * Default: True
               PROPERTY-GET, 4, @FullRepaint
                       RETURNING "boolean", TYPE 11
      *[Class: @INearestTool] FullRepaint
      * Default: True
               PROPERTY-PUT, 4, @FullRepaint,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @INearestTool] Pen
      * Element Pen characteristics.
               PROPERTY-GET, 5, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @INearestTool] Size
      * Default 20: Sets the size of the NearestTool shape.
               PROPERTY-GET, 7, @Size
                       RETURNING "long", TYPE 3
      *[Class: @INearestTool] Size
      * Default 20: Sets the size of the NearestTool shape.
               PROPERTY-PUT, 7, @Size,
                   "long (Property_Value)", TYPE 3
      *[Class: @INearestTool] Style
      * Sets the shape of the NearestTool.
               PROPERTY-GET, 8, @Style
                       RETURNING "ENearestToolStyle", TYPE 3
      *[Class: @INearestTool] Style
      * Sets the shape of the NearestTool.
               PROPERTY-PUT, 8, @Style,
                   "ENearestToolStyle (Property_Value)", TYPE 3
      *[Class: @INearestTool] Point
      * Returns Valueindex of nearest Point
               PROPERTY-GET, 1, @Point
                       RETURNING "long", TYPE 3
      *[Class: @INearestTool] Point
      * Returns Valueindex of nearest Point
               PROPERTY-PUT, 1, @Point,
                   "long (Property_Value)", TYPE 3
           
      * Adds bands of configurable colour to the interior region enclosed by the 
           
      * IColorBandTool
           CLASS @IColorBandTool
               CLSID, DC99423D-E0C5-46CA-9DAE-6340A531D2E1
               NAME, "IColorBandTool"
      *[Class: @IColorBandTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-GET, 13, @Axis
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IColorBandTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-PUT, 13, @Axis,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IColorBandTool] Brush
      * Element Brush characteristics.
               PROPERTY-GET, 3, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IColorBandTool] Pen
      * Element Pen characteristics.
               PROPERTY-GET, 5, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IColorBandTool] EndValue
      * Set EndValue to the Axis position to where the colorband has to be 
               PROPERTY-GET, 6, @EndValue
                       RETURNING "double", TYPE 5
      *[Class: @IColorBandTool] EndValue
      * Set EndValue to the Axis position to where the colorband has to be 
               PROPERTY-PUT, 6, @EndValue,
                   "double (Property_Value)", TYPE 5
      *[Class: @IColorBandTool] StartValue
      * Set StartValue to the Axis position from where the colorband has to be 
               PROPERTY-GET, 7, @StartValue
                       RETURNING "double", TYPE 5
      *[Class: @IColorBandTool] StartValue
      * Set StartValue to the Axis position from where the colorband has to be 
               PROPERTY-PUT, 7, @StartValue,
                   "double (Property_Value)", TYPE 5
      *[Class: @IColorBandTool] DrawBehind
      * Set to True to draw the ColorBand behind the Series.
               PROPERTY-GET, 1, @DrawBehind
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorBandTool] DrawBehind
      * Set to True to draw the ColorBand behind the Series.
               PROPERTY-PUT, 1, @DrawBehind,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorBandTool] Color
      * Sets Band colour.
               PROPERTY-GET, 2, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IColorBandTool] Color
      * Sets Band colour.
               PROPERTY-PUT, 2, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IColorBandTool] Gradient
      * Use to set Band colour gradient.
               PROPERTY-GET, 4, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IColorBandTool] Transparency
      * Sets the transparency of the ColorBand from 0 - 100%.
               PROPERTY-GET, 8, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IColorBandTool] Transparency
      * Sets the transparency of the ColorBand from 0 - 100%.
               PROPERTY-PUT, 8, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IColorBandTool] Clicked
      * Returns True when ColorBand is clicked
               METHOD, 301, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorBandTool] ResizeStart
      * Setting it to True allows to resize the Tool form the Start
               PROPERTY-GET, 302, @ResizeStart
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorBandTool] ResizeStart
      * Setting it to True allows to resize the Tool form the Start
               PROPERTY-PUT, 302, @ResizeStart,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorBandTool] ResizeEnd
      * Setting it to True allows to resize the Tool form the End
               PROPERTY-GET, 303, @ResizeEnd
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorBandTool] ResizeEnd
      * Setting it to True allows to resize the Tool form the End
               PROPERTY-PUT, 303, @ResizeEnd,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorBandTool] StartLinePen
      * Pen properties for the StartLine
               PROPERTY-GET, 304, @StartLinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IColorBandTool] EndLinePen
      * Pen properties for the EndLine
               PROPERTY-GET, 305, @EndLinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IColorBandTool] DrawBehindAxes
      * Set to True to draw the ColorBand behind the Axes.
               PROPERTY-GET, 306, @DrawBehindAxes
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorBandTool] DrawBehindAxes
      * Set to True to draw the ColorBand behind the Axes.
               PROPERTY-PUT, 306, @DrawBehindAxes,
                   "boolean (Property_Value)", TYPE 11
           
      * Adds coloured lines to the Chart
           
      * IColorLineTool
           CLASS @IColorLineTool
               CLSID, DAF62B83-3C7C-4C25-BCD4-9AE25AD6137F
               NAME, "IColorLineTool"
      *[Class: @IColorLineTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-GET, 13, @Axis
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IColorLineTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-PUT, 13, @Axis,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IColorLineTool] Pen
      * Element Pen characteristics.
               PROPERTY-GET, 3, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IColorLineTool] Value
      * Set Value to the Axis position where the colorline has to be drawn.
               PROPERTY-GET, 4, @Value
                       RETURNING "double", TYPE 5
      *[Class: @IColorLineTool] Value
      * Set Value to the Axis position where the colorline has to be drawn.
               PROPERTY-PUT, 4, @Value,
                   "double (Property_Value)", TYPE 5
      *[Class: @IColorLineTool] AllowDrag
      * Default False: When true allows mousedrag of Line.
               PROPERTY-GET, 1, @AllowDrag
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorLineTool] AllowDrag
      * Default False: When true allows mousedrag of Line.
               PROPERTY-PUT, 1, @AllowDrag,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorLineTool] Clicked
      * Returns True when the ColorLineTool is clicked.
               METHOD, 2, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorLineTool] DragRepaint
      * Repaint Chart when Line dragged
               PROPERTY-GET, 5, @DragRepaint
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorLineTool] DragRepaint
      * Repaint Chart when Line dragged
               PROPERTY-PUT, 5, @DragRepaint,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorLineTool] NoLimitDrag
      * If true, the end-user will be able to drag a line and move it outside 
               PROPERTY-GET, 6, @NoLimitDrag
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorLineTool] NoLimitDrag
      * If true, the end-user will be able to drag a line and move it outside 
               PROPERTY-PUT, 6, @NoLimitDrag,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorLineTool] Draw3D
      * Controls if color line displays as a single line or as a rectangle in 3D 
               PROPERTY-GET, 301, @Draw3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorLineTool] Draw3D
      * Controls if color line displays as a single line or as a rectangle in 3D 
               PROPERTY-PUT, 301, @Draw3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorLineTool] Style
      * Provides automatic positioning of color line inside axis scales
               PROPERTY-GET, 302, @Style
                       RETURNING "EColorLineStyle", TYPE 3
      *[Class: @IColorLineTool] Style
      * Provides automatic positioning of color line inside axis scales
               PROPERTY-PUT, 302, @Style,
                   "EColorLineStyle (Property_Value)", TYPE 3
      *[Class: @IColorLineTool] DrawBehind
      * In 3D mode, controls if color line will be displayed behind series or 
               PROPERTY-GET, 303, @DrawBehind
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorLineTool] DrawBehind
      * In 3D mode, controls if color line will be displayed behind series or 
               PROPERTY-PUT, 303, @DrawBehind,
                   "boolean (Property_Value)", TYPE 11
           
      * Changes the elevation and rotation of charts when dragging the mouse 
           
      * IRotateTool
           CLASS @IRotateTool
               CLSID, BB0A0937-7B02-4226-AEBB-4BDFC470A8FC
               NAME, "IRotateTool"
      *[Class: @IRotateTool] Active
      * Element Active True/False.
               PROPERTY-GET, 1, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @IRotateTool] Active
      * Element Active True/False.
               PROPERTY-PUT, 1, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IRotateTool] Button
      * Default mbLeft: Defines by which mousebutton the RotateTool is 
               PROPERTY-GET, 2, @Button
                       RETURNING "EMouseButton", TYPE 3
      *[Class: @IRotateTool] Button
      * Default mbLeft: Defines by which mousebutton the RotateTool is 
               PROPERTY-PUT, 2, @Button,
                   "EMouseButton (Property_Value)", TYPE 3
      *[Class: @IRotateTool] Description
      * Returns the description of the TTeeCustomTool. In this case the function 
               METHOD, 3, @Description
                       RETURNING "BSTR", TYPE 8
      *[Class: @IRotateTool] Outline
      * Pen properties of box that includes chart, which is shown when user 
               PROPERTY-GET, 201, @Outline
                       RETURNING "IPen*", TYPE 9
           
      * Adds the AxisArrow Tool to the Start, End or Both ends of an Axis.
           
      * EAxisArrowToolPosition
           CLASS @EAxisArrowToolPosition
               CLSID, 5F65D73A-D7A8-437C-BF78-D2E04656151A
               NAME, "EAxisArrowToolPosition"
      * "long aaStart"
               ENUMERATOR, @aaStart, 0
      * "long aaEnd"
               ENUMERATOR, @aaEnd, 1
      * "long aaBoth"
               ENUMERATOR, @aaBoth, 2
           
      * Style of the enclosing shape for the TNearestTool.
           
      * ENearestToolStyle
           CLASS @ENearestToolStyle
               CLSID, 60878EAA-F9A1-4F6F-B45D-768F5BF4A710
               NAME, "ENearestToolStyle"
      * "long hsNone"
               ENUMERATOR, @hsNone, 0
      * "long hsCircle"
               ENUMERATOR, @hsCircle, 1
      * "long hsRectangle"
               ENUMERATOR, @hsRectangle, 2
      * "long hsDiamond"
               ENUMERATOR, @hsDiamond, 3
           
      * Similar to a Line Series but with a Y Axis ordering of points .
           
      * IHorizLineSeries
           CLASS @IHorizLineSeries
               CLSID, 1B1C42F5-E809-4722-84CD-97213BBA2441
               NAME, "IHorizLineSeries"
      *[Class: @IHorizLineSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IHorizLineSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-GET, 2, @Stairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizLineSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-PUT, 2, @Stairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizLineSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-GET, 3, @InvertedStairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizLineSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-PUT, 3, @InvertedStairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizLineSeries] LinePen
      * The pen used to draw the line
               PROPERTY-GET, 4, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizLineSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-GET, 5, @LineBrush
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @IHorizLineSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-PUT, 5, @LineBrush,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @IHorizLineSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-GET, 6, @ClickableLine
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizLineSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-PUT, 6, @ClickableLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizLineSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-GET, 76, @LineHeight
                       RETURNING "long", TYPE 3
      *[Class: @IHorizLineSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-PUT, 76, @LineHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizLineSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizLineSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizLineSeries] Brush
      * Accesses Brush attributes including images
               PROPERTY-GET, 9, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IHorizLineSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-GET, 81, @ColorEachLine
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizLineSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-PUT, 81, @ColorEachLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizLineSeries] Outline
      * Outline border of Line
               PROPERTY-GET, 7, @Outline
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizLineSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-GET, 82, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IHorizLineSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-PUT, 82, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizLineSeries] Shadow
      * Accesses Shadow attributes
               PROPERTY-GET, 201, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IHorizLineSeries] Stacked
      * Controls how Line Series are stacked.
               PROPERTY-GET, 8, @Stacked
                       RETURNING "ECustomSeriesStack", TYPE 3
      *[Class: @IHorizLineSeries] Stacked
      * Controls how Line Series are stacked.
               PROPERTY-PUT, 8, @Stacked,
                   "ECustomSeriesStack (Property_Value)", TYPE 3
           
      * HighLowSeries is an abstract Series class that maintains lists for High 
           
      * IHighLowSeries
           CLASS @IHighLowSeries
               CLSID, 3A9D62D1-54CB-4915-A3F1-D93FBA13A77C
               NAME, "IHighLowSeries"
      *[Class: @IHighLowSeries] AddHighLow
      * Use AddHighLow to add a new High and Low value to a HighLow series.
               METHOD, 1, @AddHighLow,
                   "double" @AX, TYPE 5,
                   "double" @AHigh, TYPE 5,
                   "double" @ALow, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @AColor, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IHighLowSeries] HighBrush
      * Defines the Brush properties for the High value.
               PROPERTY-GET, 2, @HighBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IHighLowSeries] HighPen
      * Defines the Pen properties for the High value.
               PROPERTY-GET, 3, @HighPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHighLowSeries] HighValues
      * Allows access to TChartValueList properties for the High Value.
               PROPERTY-GET, 4, @HighValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IHighLowSeries] LowBrush
      * Defines the Brush properties for the Low value.
               PROPERTY-GET, 5, @LowBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IHighLowSeries] LowPen
      * Defines the Pen properties for the Low value.
               PROPERTY-GET, 6, @LowPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHighLowSeries] LowValues
      * Allows access to TChartValueList properties for the Low Value.
               PROPERTY-GET, 7, @LowValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IHighLowSeries] Pen
      * Defines the Pen properties for the entire HighLow series outline.
               PROPERTY-GET, 8, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHighLowSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IHighLowSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
           
      * Chart Header and Footer attributes
           
      * ITitles
           CLASS @ITitles
               CLSID, 140612D7-F212-4891-854F-BF7D004F55E0
               NAME, "ITitles"
      *[Class: @ITitles] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITitles] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITitles] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ITitles] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ITitles] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @ITitles] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITitles] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITitles] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITitles] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @ITitles] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITitles] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ITitles] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @ITitles] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ITitles] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITitles] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @ITitles] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ITitles] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ITitles] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ITitles] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITitles] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @ITitles] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ITitles] CustomPosition
      * Set to True to permit custom positioning of Shape.
               PROPERTY-GET, 219, @CustomPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @ITitles] CustomPosition
      * Set to True to permit custom positioning of Shape.
               PROPERTY-PUT, 219, @CustomPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITitles] Left
      * Left position in pixels.
               PROPERTY-GET, 210, @Left
                       RETURNING "long", TYPE 3
      *[Class: @ITitles] Left
      * Left position in pixels.
               PROPERTY-PUT, 210, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITitles] Top
      * Top position in pixels.
               PROPERTY-GET, 211, @Top
                       RETURNING "long", TYPE 3
      *[Class: @ITitles] Top
      * Top position in pixels.
               PROPERTY-PUT, 211, @Top,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITitles] AdjustFrame
      * Resizes Title frame to Title text dimensions
               PROPERTY-GET, 1, @AdjustFrame
                       RETURNING "boolean", TYPE 11
      *[Class: @ITitles] AdjustFrame
      * Resizes Title frame to Title text dimensions
               PROPERTY-PUT, 1, @AdjustFrame,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITitles] Alignment
      * Controls the Title horizontal position
               PROPERTY-GET, 2, @Alignment
                       RETURNING "ETitleAlignment", TYPE 3
      *[Class: @ITitles] Alignment
      * Controls the Title horizontal position
               PROPERTY-PUT, 2, @Alignment,
                   "ETitleAlignment (Property_Value)", TYPE 3
      *[Class: @ITitles] Brush
      * Brush used to fill Title background
               PROPERTY-GET, 3, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ITitles] Frame
      * Pen used to draw a border around the Title
               PROPERTY-GET, 5, @Frame
                       RETURNING "IPen*", TYPE 9
      *[Class: @ITitles] Text
      * Collection of Title Text strings
               PROPERTY-GET, 6, @Text
                       RETURNING "IStrings*", TYPE 9
      *[Class: @ITitles] Visible
      * Shows / Hides the Title
               PROPERTY-GET, 7, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @ITitles] Visible
      * Shows / Hides the Title
               PROPERTY-PUT, 7, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITitles] Clicked
      * Returns true when Click over Title Rect
               METHOD, 401, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "boolean", TYPE 11
      *[Class: @ITitles] Clear
      * Removes text of chart titles and footers
               METHOD, 402, @Clear
           
      * Used to define shapestyle.
           
      * EChartObjectShapeStyle
           CLASS @EChartObjectShapeStyle
               CLSID, CF888469-1F16-4CA8-BC8C-6C7E9B01B87C
               NAME, "EChartObjectShapeStyle"
      * "long fosRectangle"
               ENUMERATOR, @fosRectangle, 0
      * "long fosRoundRectangle"
               ENUMERATOR, @fosRoundRectangle, 1
           
      * Interface to control the deployment of TeeChart Tools.
           
      * IToolList
           CLASS @IToolList
               CLSID, 7BF6BB53-9B20-4CD5-AEF7-54486432984D
               NAME, "IToolList"
      *[Class: @IToolList] Add
      * Insert a new Tool at the end of the ToolsList. Add returns the index of 
               METHOD, 1, @Add,
                   "EToolClass" @ToolClass, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IToolList] Items
      * Access the TeeChart ToolType by index.
               PROPERTY-GET, 2, @Items,
                   "long" @Index, TYPE 3
                       RETURNING "ITools*", TYPE 9
      *[Class: @IToolList] ControlDefault
               PROPERTY-GET, 0, @ControlDefault,
                   "long" @Index, TYPE 3
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IToolList] Clear
      * Empties the ToolList and sets the Count to 0.
               METHOD, 5, @Clear
      *[Class: @IToolList] Delete
      * Removes the Tool at a specific position from the list.
               METHOD, 6, @Delete,
                   "long" @Index, TYPE 3
      *[Class: @IToolList] Count
      * Read Count to determine the number of entries in the ToolList.
               PROPERTY-GET, 7, @Count
                       RETURNING "long", TYPE 3
      *[Class: @IToolList] Active
      * Sets tools active to value
               PROPERTY-PUT, 201, @Active,
                   "boolean (Property_Value)", TYPE 11
           
      * List of Tool Classes that can be added to the ToolList.
           
      * EToolClass
           CLASS @EToolClass
               CLSID, 8E82CC62-69ED-4C97-AE29-B7577018D6F2
               NAME, "EToolClass"
      * "long tcCursor"
               ENUMERATOR, @tcCursor, 0
      * "long tcDragMarks"
               ENUMERATOR, @tcDragMarks, 1
      * "long tcAxisArrow"
               ENUMERATOR, @tcAxisArrow, 2
      * "long tcDrawLine"
               ENUMERATOR, @tcDrawLine, 3
      * "long tcNearest"
               ENUMERATOR, @tcNearest, 4
      * "long tcColorband"
               ENUMERATOR, @tcColorband, 5
      * "long tcColorLine"
               ENUMERATOR, @tcColorLine, 6
      * "long tcRotate"
               ENUMERATOR, @tcRotate, 7
      * "long tcMarksTip"
               ENUMERATOR, @tcMarksTip, 8
      * "long tcChartImage"
               ENUMERATOR, @tcChartImage, 9
      * "long tcAnnotate"
               ENUMERATOR, @tcAnnotate, 10
      * "long tcPageNumber"
               ENUMERATOR, @tcPageNumber, 11
      * "long tcGridTranspose"
               ENUMERATOR, @tcGridTranspose, 12
      * "long tcExtraLegend"
               ENUMERATOR, @tcExtraLegend, 13
      * "long tcSeriesAnimation"
               ENUMERATOR, @tcSeriesAnimation, 14
      * "long tcGantt"
               ENUMERATOR, @tcGantt, 15
      * "long tcGridBand"
               ENUMERATOR, @tcGridBand, 16
      * "long tcPie"
               ENUMERATOR, @tcPie, 17
      * "long tcDragPoint"
               ENUMERATOR, @tcDragPoint, 18
      * "long tcLegendScrollBar"
               ENUMERATOR, @tcLegendScrollBar, 19
      * "long tcLight"
               ENUMERATOR, @tcLight, 20
      * "long tcSurfaceNearest"
               ENUMERATOR, @tcSurfaceNearest, 21
      * "long tcAxisScroll"
               ENUMERATOR, @tcAxisScroll, 22
      * "long tcSeriesBand"
               ENUMERATOR, @tcSeriesBand, 23
      * "long tcSelector"
               ENUMERATOR, @tcSelector, 24
      * "long tcRectangle"
               ENUMERATOR, @tcRectangle, 25
      * "long tcDataTable"
               ENUMERATOR, @tcDataTable, 26
           
      * Describes characteristics of the colour box symbols that are placed 
           
      * ILegendSymbol
           CLASS @ILegendSymbol
               CLSID, 0D39D7DD-66FA-4E81-B67C-DCD996B4017B
               NAME, "ILegendSymbol"
      *[Class: @ILegendSymbol] Continuous
      * When set to True, the color rectangles of the different items are drawn 
               PROPERTY-GET, 1, @Continuous
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegendSymbol] Continuous
      * When set to True, the color rectangles of the different items are drawn 
               PROPERTY-PUT, 1, @Continuous,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegendSymbol] Position
      * Sets the position of the color rectangles.
               PROPERTY-GET, 2, @Position
                       RETURNING "ELegendSymbolPosition", TYPE 3
      *[Class: @ILegendSymbol] Position
      * Sets the position of the color rectangles.
               PROPERTY-PUT, 2, @Position,
                   "ELegendSymbolPosition (Property_Value)", TYPE 3
      *[Class: @ILegendSymbol] Width
      * Defines the width of the color rectangles (symbols).
               PROPERTY-GET, 3, @Width
                       RETURNING "long", TYPE 3
      *[Class: @ILegendSymbol] Width
      * Defines the width of the color rectangles (symbols).
               PROPERTY-PUT, 3, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegendSymbol] WidthUnits
      * Units used to set Width
               PROPERTY-GET, 4, @WidthUnits
                       RETURNING "ELegendSymbolSize", TYPE 3
      *[Class: @ILegendSymbol] WidthUnits
      * Units used to set Width
               PROPERTY-PUT, 4, @WidthUnits,
                   "ELegendSymbolSize (Property_Value)", TYPE 3
      *[Class: @ILegendSymbol] DefaultPen
      * Specifies if box legend border will be drawn using series pen or legend 
               PROPERTY-GET, 201, @DefaultPen
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegendSymbol] DefaultPen
      * Specifies if box legend border will be drawn using series pen or legend 
               PROPERTY-PUT, 201, @DefaultPen,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegendSymbol] Pen
      * Used to draw a border around the color box legend symbols
               PROPERTY-GET, 202, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ILegendSymbol] Squared
      * Specifies if box legend symbol will be squared or not
               PROPERTY-GET, 203, @Squared
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegendSymbol] Squared
      * Specifies if box legend symbol will be squared or not
               PROPERTY-PUT, 203, @Squared,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegendSymbol] Visible
      * Set Visible/invisible the Legend Symbols
               PROPERTY-GET, 204, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegendSymbol] Visible
      * Set Visible/invisible the Legend Symbols
               PROPERTY-PUT, 204, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegendSymbol] Gradient
               PROPERTY-GET, 205, @Gradient
                       RETURNING "IGradient*", TYPE 9
           
      * Position of Legend colour boxes.
           
      * ELegendSymbolPosition
           CLASS @ELegendSymbolPosition
               CLSID, E812BCBB-D402-470E-B898-8A1E02385250
               NAME, "ELegendSymbolPosition"
      * "long spLeft"
               ENUMERATOR, @spLeft, 0
      * "long spRight"
               ENUMERATOR, @spRight, 1
           
      * Defines whether the Legend Symbol size should be set as a percentage of 
           
      * ELegendSymbolSize
           CLASS @ELegendSymbolSize
               CLSID, 45ADD209-B8BC-4643-AA2F-D6D35CD2E1A8
               NAME, "ELegendSymbolSize"
      * "long lcsPercent"
               ENUMERATOR, @lcsPercent, 0
      * "long lcsPixels"
               ENUMERATOR, @lcsPixels, 1
           
      * The TeeFont Component gives access to additional properties and methods 
           
      * ITeeFont
           CLASS @ITeeFont
               CLSID, 2540F4CC-A137-47B0-A673-914B176EA49D
               NAME, "ITeeFont"
      *[Class: @ITeeFont] Name
      * The Font name (Arial, Courier, etc)
               PROPERTY-GET, 1, @Name
                       RETURNING "BSTR", TYPE 8
      *[Class: @ITeeFont] Name
      * The Font name (Arial, Courier, etc)
               PROPERTY-PUT, 1, @Name,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ITeeFont] Size
      * The Font size
               PROPERTY-GET, 2, @Size
                       RETURNING "long", TYPE 3
      *[Class: @ITeeFont] Size
      * The Font size
               PROPERTY-PUT, 2, @Size,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeFont] Bold
      * Enable Font Bold
               PROPERTY-GET, 3, @Bold
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeFont] Bold
      * Enable Font Bold
               PROPERTY-PUT, 3, @Bold,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeFont] Italic
      * Enable Font Italic
               PROPERTY-GET, 4, @Italic
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeFont] Italic
      * Enable Font Italic
               PROPERTY-PUT, 4, @Italic,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeFont] Underline
      * Enable Font Underline
               PROPERTY-GET, 5, @Underline
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeFont] Underline
      * Enable Font Underline
               PROPERTY-PUT, 5, @Underline,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeFont] Strikethrough
      * Enable Font Strikethrough
               PROPERTY-GET, 6, @Strikethrough
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeFont] Strikethrough
      * Enable Font Strikethrough
               PROPERTY-PUT, 6, @Strikethrough,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeFont] Charset
      * The character set of the font
               PROPERTY-GET, 8, @Charset
                       RETURNING "short", TYPE 2
      *[Class: @ITeeFont] Charset
      * The character set of the font
               PROPERTY-PUT, 8, @Charset,
                   "short (Property_Value)", TYPE 2
      *[Class: @ITeeFont] Color
      * The Font color
               PROPERTY-GET, 9, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeFont] Color
      * The Font color
               PROPERTY-PUT, 9, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeFont] Height
      * Font height
               PROPERTY-GET, 7, @Height
                       RETURNING "long", TYPE 3
      *[Class: @ITeeFont] Height
      * Font height
               PROPERTY-PUT, 7, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeFont] PixelsPerInch
      * Use to size fonts from onscreen Chart to printer
               PROPERTY-GET, 10, @PixelsPerInch
                       RETURNING "long", TYPE 3
      *[Class: @ITeeFont] InterCharSize
      * Defines the size of the space between characters.
               PROPERTY-GET, 11, @InterCharSize
                       RETURNING "long", TYPE 3
      *[Class: @ITeeFont] InterCharSize
      * Defines the size of the space between characters.
               PROPERTY-PUT, 11, @InterCharSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeFont] Shadow
      * Setting Shadow defines the shadows of fonts via TeeShadow properties and 
               PROPERTY-GET, 12, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ITeeFont] Outline
      * Font Outline Pen
               PROPERTY-GET, 13, @Outline
                       RETURNING "IPen*", TYPE 9
      *[Class: @ITeeFont] Gradient
      * Font fill Gradient
               PROPERTY-GET, 14, @Gradient
                       RETURNING "IGradient*", TYPE 9
           
      * TeeShadow is used by several TeeChart components to define the offset 
           
      * ITeeShadow
           CLASS @ITeeShadow
               CLSID, 86F4154F-EC08-4F15-9427-6485C88DFD12
               NAME, "ITeeShadow"
      *[Class: @ITeeShadow] HorizSize
      * Horizontal size of the shadow in pixels.
               PROPERTY-GET, 2, @HorizSize
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShadow] HorizSize
      * Horizontal size of the shadow in pixels.
               PROPERTY-PUT, 2, @HorizSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShadow] VertSize
      * Vertical size of the shadow in pixels.
               PROPERTY-GET, 3, @VertSize
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShadow] VertSize
      * Vertical size of the shadow in pixels.
               PROPERTY-PUT, 3, @VertSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShadow] Color
      * Shadow colour.
               PROPERTY-GET, 5, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeShadow] Color
      * Shadow colour.
               PROPERTY-PUT, 5, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeShadow] Transparency
      * Percentage of transparency for the shadow
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShadow] Transparency
      * Percentage of transparency for the shadow
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShadow] ShowEditor
      * Shows a dialog to modify the current shadow properties
               METHOD, 202, @ShowEditor
           
      * Default tzdBoth: Sets the direction of the zoom on a selected area.
           
      * ETeeZoomDirection
           CLASS @ETeeZoomDirection
               CLSID, DED8A89D-97CA-41A5-ADB2-5FBCBAD3DBF2
               NAME, "ETeeZoomDirection"
      * "long tzdHorizontal"
               ENUMERATOR, @tzdHorizontal, 0
      * "long tzdVertical"
               ENUMERATOR, @tzdVertical, 1
      * "long tzdBoth"
               ENUMERATOR, @tzdBoth, 2
           
      * The TeePreviewPanel is a panel that may be inserted on a form to show 
           
      * ITeePreviewPanel
           CLASS @ITeePreviewPanel
               CLSID, 64E8A82B-08E5-4E5E-BFEC-0F8FD1E3434F
               NAME, "ITeePreviewPanel"
      *[Class: @ITeePreviewPanel] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ITeePreviewPanel] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeePreviewPanel] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ITeePreviewPanel] AllowResize
      * Default True: When True permits mousedrag resize of the TChart for the 
               PROPERTY-GET, 2, @AllowResize
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewPanel] AllowResize
      * Default True: When True permits mousedrag resize of the TChart for the 
               PROPERTY-PUT, 2, @AllowResize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewPanel] AllowMove
      * Default True: When true allows mousedrag move of TChart on printed 
               PROPERTY-GET, 3, @AllowMove
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewPanel] AllowMove
      * Default True: When true allows mousedrag move of TChart on printed 
               PROPERTY-PUT, 3, @AllowMove,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewPanel] AsBitmap
      * Default False: displays the chart as bitmap or not.
               PROPERTY-GET, 4, @AsBitmap
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewPanel] AsBitmap
      * Default False: displays the chart as bitmap or not.
               PROPERTY-PUT, 4, @AsBitmap,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewPanel] DragImage
      * Default False: allows dragging of the chart on the preview panel.
               PROPERTY-GET, 5, @DragImage
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewPanel] DragImage
      * Default False: allows dragging of the chart on the preview panel.
               PROPERTY-PUT, 5, @DragImage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewPanel] Orientation
      * Default ppoDefault: specifies the orientation of the PreviewPanel.
               PROPERTY-GET, 6, @Orientation
                       RETURNING "ETeePreviewPanelOrientation", TYPE 3
      *[Class: @ITeePreviewPanel] Orientation
      * Default ppoDefault: specifies the orientation of the PreviewPanel.
               PROPERTY-PUT, 6, @Orientation,
                   "ETeePreviewPanelOrientation (Property_Value)", TYPE 
                       3
      *[Class: @ITeePreviewPanel] PaperColor
      * Default clWhite: Use Color to read or change the background color of the 
               PROPERTY-GET, 7, @PaperColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeePreviewPanel] PaperColor
      * Default clWhite: Use Color to read or change the background color of the 
               PROPERTY-PUT, 7, @PaperColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeePreviewPanel] ShadowColor
      * Use ShadowColor to read or change the Color of the PreviewPanel Shadow.
               PROPERTY-GET, 8, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeePreviewPanel] ShadowColor
      * Use ShadowColor to read or change the Color of the PreviewPanel Shadow.
               PROPERTY-PUT, 8, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeePreviewPanel] ShadowSize
      * Use ShadowSize property to define the Size of the PreviewPanel Shadow.
               PROPERTY-GET, 9, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @ITeePreviewPanel] ShadowSize
      * Use ShadowSize property to define the Size of the PreviewPanel Shadow.
               PROPERTY-PUT, 9, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeePreviewPanel] ShowImage
      * Use ShowImage property to show/hide the chart image.
               PROPERTY-GET, 10, @ShowImage
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeePreviewPanel] ShowImage
      * Use ShowImage property to show/hide the chart image.
               PROPERTY-PUT, 10, @ShowImage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeePreviewPanel] Title
      * Use the Title property to set the Preview Panel Title.
               PROPERTY-GET, 11, @Title
                       RETURNING "BSTR", TYPE 8
      *[Class: @ITeePreviewPanel] Title
      * Use the Title property to set the Preview Panel Title.
               PROPERTY-PUT, 11, @Title,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ITeePreviewPanel] Repaint
      * Repaints the Preview Panel.
               METHOD, 12, @Repaint
      *[Class: @ITeePreviewPanel] Panels
      * Use Panels to place several Charts on a Print Preview.
               PROPERTY-GET, 13, @Panels
                       RETURNING "ITeePanelsList*", TYPE 9
      *[Class: @ITeePreviewPanel] AddChart
      * Adds a specified TChart to the Preview panel.
               METHOD, 14, @AddChart,
                   "ITChart*" @Value, TYPE 9
      *[Class: @ITeePreviewPanel] Gradient
      * Defines Preview Panel Gradient characteristics.
               PROPERTY-GET, 15, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ITeePreviewPanel] Margins
      * Margins Pen
               PROPERTY-GET, 17, @Margins
                       RETURNING "IPen*", TYPE 9
      *[Class: @ITeePreviewPanel] PrintPage
      * Print PreviewPanel Page
               METHOD, 18, @PrintPage
      *[Class: @ITeePreviewPanel] AddChartLink
      * Add ChartLink where interface not supported
               METHOD, 16, @AddChartLink,
                   "long" @Value, TYPE 3
      *[Class: @ITeePreviewPanel] Canvas
      * Use this property to access all Canvas properties and methods.
               PROPERTY-GET, 301, @Canvas
                       RETURNING "ICanvas*", TYPE 9
      *[Class: @ITeePreviewPanel] PaperRect
      * Rectangle that determines the boundaries of paper.
               PROPERTY-GET, 302, @PaperRect
                       RETURNING "TeeRect", TYPE 0
           
      * Events interface for TeeChart Preview Panel.
           
      * ITeePreviewPanelEvents
           CLASS @ITeePreviewPanelEvents
               CLSID, 81311561-54BC-4D0A-A6BC-B0E51DB2F116
               NAME, "ITeePreviewPanelEvents"
      *[Class: @ITeePreviewPanelEvents] OnChangeMargins
      * The OnChangeMargins event is called when the position of a margin has 
               METHOD, 1, @OnChangeMargins,
                   "boolean" @DisableProportional, TYPE 11,
                   "long" @Left, TYPE 3,
                   "long" @Top, TYPE 3,
                   "long" @Right, TYPE 3,
                   "long" @Bottom, TYPE 3
                       RETURNING "HRESULT", TYPE 25
      *[Class: @ITeePreviewPanelEvents] OnAfterDraw
      * Called when the Chart Preview panel draws the chart.
               METHOD, 201, @OnAfterDraw
                       RETURNING "HRESULT", TYPE 25
           
      * TeeChart PreviewPanel v7
           
      * TeePreviewPanel
           CLASS @TeePreviewPanel
               CLSID, 68EF1B9D-597E-4386-B591-C011FF363DA4
               NAME, "TeePreviewPanel"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "ITeePreviewPanel"
               DEFAULT-SOURCE, "81311561-54BC-4D0A-A6BC-B0E51DB2F116"
      *[Class: @TeePreviewPanel] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @TeePreviewPanel] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeePreviewPanel] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @TeePreviewPanel] AllowResize
      * Default True: When True permits mousedrag resize of the TChart for the 
               PROPERTY-GET, 2, @AllowResize
                       RETURNING "boolean", TYPE 11
      *[Class: @TeePreviewPanel] AllowResize
      * Default True: When True permits mousedrag resize of the TChart for the 
               PROPERTY-PUT, 2, @AllowResize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeePreviewPanel] AllowMove
      * Default True: When true allows mousedrag move of TChart on printed 
               PROPERTY-GET, 3, @AllowMove
                       RETURNING "boolean", TYPE 11
      *[Class: @TeePreviewPanel] AllowMove
      * Default True: When true allows mousedrag move of TChart on printed 
               PROPERTY-PUT, 3, @AllowMove,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeePreviewPanel] AsBitmap
      * Default False: displays the chart as bitmap or not.
               PROPERTY-GET, 4, @AsBitmap
                       RETURNING "boolean", TYPE 11
      *[Class: @TeePreviewPanel] AsBitmap
      * Default False: displays the chart as bitmap or not.
               PROPERTY-PUT, 4, @AsBitmap,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeePreviewPanel] DragImage
      * Default False: allows dragging of the chart on the preview panel.
               PROPERTY-GET, 5, @DragImage
                       RETURNING "boolean", TYPE 11
      *[Class: @TeePreviewPanel] DragImage
      * Default False: allows dragging of the chart on the preview panel.
               PROPERTY-PUT, 5, @DragImage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeePreviewPanel] Orientation
      * Default ppoDefault: specifies the orientation of the PreviewPanel.
               PROPERTY-GET, 6, @Orientation
                       RETURNING "ETeePreviewPanelOrientation", TYPE 3
      *[Class: @TeePreviewPanel] Orientation
      * Default ppoDefault: specifies the orientation of the PreviewPanel.
               PROPERTY-PUT, 6, @Orientation,
                   "ETeePreviewPanelOrientation (Property_Value)", TYPE 
                       3
      *[Class: @TeePreviewPanel] PaperColor
      * Default clWhite: Use Color to read or change the background color of the 
               PROPERTY-GET, 7, @PaperColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @TeePreviewPanel] PaperColor
      * Default clWhite: Use Color to read or change the background color of the 
               PROPERTY-PUT, 7, @PaperColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @TeePreviewPanel] ShadowColor
      * Use ShadowColor to read or change the Color of the PreviewPanel Shadow.
               PROPERTY-GET, 8, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @TeePreviewPanel] ShadowColor
      * Use ShadowColor to read or change the Color of the PreviewPanel Shadow.
               PROPERTY-PUT, 8, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @TeePreviewPanel] ShadowSize
      * Use ShadowSize property to define the Size of the PreviewPanel Shadow.
               PROPERTY-GET, 9, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @TeePreviewPanel] ShadowSize
      * Use ShadowSize property to define the Size of the PreviewPanel Shadow.
               PROPERTY-PUT, 9, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @TeePreviewPanel] ShowImage
      * Use ShowImage property to show/hide the chart image.
               PROPERTY-GET, 10, @ShowImage
                       RETURNING "boolean", TYPE 11
      *[Class: @TeePreviewPanel] ShowImage
      * Use ShowImage property to show/hide the chart image.
               PROPERTY-PUT, 10, @ShowImage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @TeePreviewPanel] Title
      * Use the Title property to set the Preview Panel Title.
               PROPERTY-GET, 11, @Title
                       RETURNING "BSTR", TYPE 8
      *[Class: @TeePreviewPanel] Title
      * Use the Title property to set the Preview Panel Title.
               PROPERTY-PUT, 11, @Title,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @TeePreviewPanel] Repaint
      * Repaints the Preview Panel.
               METHOD, 12, @Repaint
      *[Class: @TeePreviewPanel] Panels
      * Use Panels to place several Charts on a Print Preview.
               PROPERTY-GET, 13, @Panels
                       RETURNING "ITeePanelsList*", TYPE 9
      *[Class: @TeePreviewPanel] AddChart
      * Adds a specified TChart to the Preview panel.
               METHOD, 14, @AddChart,
                   "ITChart*" @Value, TYPE 9
      *[Class: @TeePreviewPanel] Gradient
      * Defines Preview Panel Gradient characteristics.
               PROPERTY-GET, 15, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @TeePreviewPanel] Margins
      * Margins Pen
               PROPERTY-GET, 17, @Margins
                       RETURNING "IPen*", TYPE 9
      *[Class: @TeePreviewPanel] PrintPage
      * Print PreviewPanel Page
               METHOD, 18, @PrintPage
      *[Class: @TeePreviewPanel] AddChartLink
      * Add ChartLink where interface not supported
               METHOD, 16, @AddChartLink,
                   "long" @Value, TYPE 3
      *[Class: @TeePreviewPanel] Canvas
      * Use this property to access all Canvas properties and methods.
               PROPERTY-GET, 301, @Canvas
                       RETURNING "ICanvas*", TYPE 9
      *[Class: @TeePreviewPanel] PaperRect
      * Rectangle that determines the boundaries of paper.
               PROPERTY-GET, 302, @PaperRect
                       RETURNING "TeeRect", TYPE 0
      *[Class: @TeePreviewPanel] OnChangeMargins
      * The OnChangeMargins event is called when the position of a margin has 
               EVENT, 1, @TeePreviewPanelOnChangeMargins
      *            5 Parameters
      *                "boolean DisableProportional"
      *                "long Left"
      *                "long Top"
      *                "long Right"
      *                "long Bottom"
      *[Class: @TeePreviewPanel] OnAfterDraw
      * Called when the Chart Preview panel draws the chart.
               EVENT, 201, @TeePreviewPanelOnAfterDraw
      *            No Parameters
           
      * Specifies the orientation of the PreviewPanel.
           
      * ETeePreviewPanelOrientation
           CLASS @ETeePreviewPanelOrientation
               CLSID, 0CE6128D-9B0E-4581-9A39-086A38322973
               NAME, "ETeePreviewPanelOrientation"
      * "long ppoDefault"
               ENUMERATOR, @ppoDefault, 0
      * "long ppoPortrait"
               ENUMERATOR, @ppoPortrait, 1
      * "long ppoLandscape"
               ENUMERATOR, @ppoLandscape, 2
           
      * Offers a grid data representation of the data plotted in a TChart.
           
      * IChartGrid
           CLASS @IChartGrid
               CLSID, D2AC7C95-F049-4FFD-950F-12DD98A35FC8
               NAME, "IChartGrid"
      *[Class: @IChartGrid] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @IChartGrid] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartGrid] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @IChartGrid] Col
      * Deprecated - use Cols
               PROPERTY-GET, 2, @Col
                       RETURNING "long", TYPE 3
      *[Class: @IChartGrid] Col
      * Deprecated - use Cols
               PROPERTY-PUT, 2, @Col,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartGrid] ColCount
      * Deprecated - use Cols
               PROPERTY-GET, 3, @ColCount
                       RETURNING "long", TYPE 3
      *[Class: @IChartGrid] Colwidths
      * Deprecated - use Cols
               PROPERTY-GET, 4, @Colwidths,
                   "long" @Index, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IChartGrid] Colwidths
      * Deprecated - use Cols
               PROPERTY-PUT, 4, @Colwidths,
                   "long" @Index, TYPE 3,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartGrid] EditorMode
      * Determines whether the current cell can be edited.
               PROPERTY-GET, 5, @EditorMode
                       RETURNING "boolean", TYPE 11
      *[Class: @IChartGrid] EditorMode
      * Determines whether the current cell can be edited.
               PROPERTY-PUT, 5, @EditorMode,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IChartGrid] GridHeight
      * Specifies the height of the grid in pixels.
               PROPERTY-GET, 6, @GridHeight
                       RETURNING "long", TYPE 3
      *[Class: @IChartGrid] GridWidth
      * Specifies the width of the grid in pixels.
               PROPERTY-GET, 7, @GridWidth
                       RETURNING "long", TYPE 3
      *[Class: @IChartGrid] LeftCol
      * Specifies the index of the first visible scrollable column in the grid.
               PROPERTY-GET, 8, @LeftCol
                       RETURNING "long", TYPE 3
      *[Class: @IChartGrid] LeftCol
      * Specifies the index of the first visible scrollable column in the grid.
               PROPERTY-PUT, 8, @LeftCol,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartGrid] GridLink
      * Used to link ChartGrid to ChartGridNavigator in some environments
               PROPERTY-GET, 9, @GridLink
                       RETURNING "long", TYPE 3
      *[Class: @IChartGrid] RecalcDimensions
      * Recalculate Grid dimensions is called automatically by TeeChart.
               METHOD, 10, @RecalcDimensions
      *[Class: @IChartGrid] ShowLabels
      * Use ShowLabels property to show/hide the series labels in the grid.
               PROPERTY-GET, 11, @ShowLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IChartGrid] ShowLabels
      * Use ShowLabels property to show/hide the series labels in the grid.
               PROPERTY-PUT, 11, @ShowLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IChartGrid] ShowColors
      * Show/hide value colours
               PROPERTY-GET, 12, @ShowColors
                       RETURNING "boolean", TYPE 11
      *[Class: @IChartGrid] ShowColors
      * Show/hide value colours
               PROPERTY-PUT, 12, @ShowColors,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IChartGrid] ShowFields
      * Show/hide title fields
               PROPERTY-GET, 13, @ShowFields
                       RETURNING "boolean", TYPE 11
      *[Class: @IChartGrid] ShowFields
      * Show/hide title fields
               PROPERTY-PUT, 13, @ShowFields,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IChartGrid] Cols
      * Access ChartGrid Column collection
               METHOD, 19, @Cols
                       RETURNING "IChartGridCols*", TYPE 9
      *[Class: @IChartGrid] Rows
      * Access ChartGrid Row collection
               METHOD, 20, @Rows
                       RETURNING "IChartGridRows*", TYPE 9
      *[Class: @IChartGrid] DefaultColWidth
      * Default value for the grid column width.
               PROPERTY-GET, 301, @DefaultColWidth
                       RETURNING "long", TYPE 3
      *[Class: @IChartGrid] DefaultColWidth
      * Default value for the grid column width.
               PROPERTY-PUT, 301, @DefaultColWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartGrid] Grid3DMode
      * If true, the number of rows will be the NumXValues property, and the 
               PROPERTY-GET, 302, @Grid3DMode
                       RETURNING "boolean", TYPE 11
      *[Class: @IChartGrid] Grid3DMode
      * If true, the number of rows will be the NumXValues property, and the 
               PROPERTY-PUT, 302, @Grid3DMode,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IChartGrid] LabelHeader
      * Get the Header text of the Point Label
               PROPERTY-GET, 303, @LabelHeader
                       RETURNING "BSTR", TYPE 8
      *[Class: @IChartGrid] LabelHeader
      * Get the Header text of the Point Label
               PROPERTY-PUT, 303, @LabelHeader,
                   "BSTR (Property_Value)", TYPE 8
           
      * Events interface for TeeChart ChartGrid.
           
      * IChartGridEvents
           CLASS @IChartGridEvents
               CLSID, 4FDFD2C6-B512-4A50-B2F3-E838CD0528FB
               NAME, "IChartGridEvents"
      *[Class: @IChartGridEvents] OnClick
      * Called upon clicking ChartGrid.
               METHOD, 1, @OnClick
                       RETURNING "HRESULT", TYPE 25
           
      * The ChartGridNavigator should be associated to a ChartGrid via the 
           
      * IChartGridNavigator
           CLASS @IChartGridNavigator
               CLSID, 5BB988C7-80AB-401B-8E78-0DE002B4C2D4
               NAME, "IChartGridNavigator"
      *[Class: @IChartGridNavigator] Grid
      * Use the Grid property to link the Grid Navigator with a Chartgrid.
               PROPERTY-PUT, 4, @Grid,
                   "IChartGrid* (Property_Value)", TYPE 9
      *[Class: @IChartGridNavigator] GridLink
      * Used to link ChartGridNavigator to ChartGrid in some environments
               PROPERTY-PUT, 2, @GridLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartGridNavigator] EnableButtons
      * This method will enable/disable the gridnavigator buttons according to 
               METHOD, 3, @EnableButtons
      *[Class: @IChartGridNavigator] Color
      * NavigatorBar Color
               PROPERTY-GET, 201, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IChartGridNavigator] Color
      * NavigatorBar Color
               PROPERTY-PUT, 201, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
           
      * TeeChart ChartGridNavigator v7
           
      * ChartGridNavigator
           CLASS @ChartGridNavigator
               CLSID, 8DF3D0D9-1D19-41D6-BEDB-05640857EE75
               NAME, "ChartGridNavigator"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "IChartGridNavigator"
      *[Class: @ChartGridNavigator] Grid
      * Use the Grid property to link the Grid Navigator with a Chartgrid.
               PROPERTY-PUT, 4, @Grid,
                   "IChartGrid* (Property_Value)", TYPE 9
      *[Class: @ChartGridNavigator] GridLink
      * Used to link ChartGridNavigator to ChartGrid in some environments
               PROPERTY-PUT, 2, @GridLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ChartGridNavigator] EnableButtons
      * This method will enable/disable the gridnavigator buttons according to 
               METHOD, 3, @EnableButtons
      *[Class: @ChartGridNavigator] Color
      * NavigatorBar Color
               PROPERTY-GET, 201, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ChartGridNavigator] Color
      * NavigatorBar Color
               PROPERTY-PUT, 201, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
           
      * Navigator button bar for paging a Paged Chart. Use when MaxPointsPerPage 
           
      * IChartPageNavigator
           CLASS @IChartPageNavigator
               CLSID, 9A0B6E3C-FE98-4DD7-88FC-ADF5EBC82AC3
               NAME, "IChartPageNavigator"
      *[Class: @IChartPageNavigator] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @IChartPageNavigator] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartPageNavigator] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @IChartPageNavigator] EnableButtons
      * Use EnableButtons to refresh the TChartPageNavigator after any change of 
               METHOD, 2, @EnableButtons
      *[Class: @IChartPageNavigator] Color
      * NavigatorBar Color
               PROPERTY-GET, 301, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IChartPageNavigator] Color
      * NavigatorBar Color
               PROPERTY-PUT, 301, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
           
      * TeeChart ChartPageNavigator v7
           
      * ChartPageNavigator
           CLASS @ChartPageNavigator
               CLSID, 3A4FFDBD-21B6-4EE5-80A4-10E901006D93
               NAME, "ChartPageNavigator"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "IChartPageNavigator"
      *[Class: @ChartPageNavigator] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ChartPageNavigator] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ChartPageNavigator] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ChartPageNavigator] EnableButtons
      * Use EnableButtons to refresh the TChartPageNavigator after any change of 
               METHOD, 2, @EnableButtons
      *[Class: @ChartPageNavigator] Color
      * NavigatorBar Color
               PROPERTY-GET, 301, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ChartPageNavigator] Color
      * NavigatorBar Color
               PROPERTY-PUT, 301, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
           
      * TeeChart Chart Editor Panel
           
      * IChartEditorPanel
           CLASS @IChartEditorPanel
               CLSID, 78E1DA68-C85C-4F37-8A9B-6F0B2AD4ECE9
               NAME, "IChartEditorPanel"
      *[Class: @IChartEditorPanel] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @IChartEditorPanel] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartEditorPanel] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @IChartEditorPanel] SelectUnderMouse
      * Select item under mouse, activating relevant Editor page.
               METHOD, 3, @SelectUnderMouse
      *[Class: @IChartEditorPanel] BevelOuter
      * Sets the outer bevel of the Editor Panel.
               PROPERTY-GET, 2, @BevelOuter
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @IChartEditorPanel] BevelOuter
      * Sets the outer bevel of the Editor Panel.
               PROPERTY-PUT, 2, @BevelOuter,
                   "EPanelBevel (Property_Value)", TYPE 3
           
      * TeeChart ChartEditorPanel v7
           
      * ChartEditorPanel
           CLASS @ChartEditorPanel
               CLSID, EE8C7D63-6295-489B-90EF-6D2AF84EC005
               NAME, "ChartEditorPanel"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "IChartEditorPanel"
      *[Class: @ChartEditorPanel] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ChartEditorPanel] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ChartEditorPanel] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ChartEditorPanel] SelectUnderMouse
      * Select item under mouse, activating relevant Editor page.
               METHOD, 3, @SelectUnderMouse
      *[Class: @ChartEditorPanel] BevelOuter
      * Sets the outer bevel of the Editor Panel.
               PROPERTY-GET, 2, @BevelOuter
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ChartEditorPanel] BevelOuter
      * Sets the outer bevel of the Editor Panel.
               PROPERTY-PUT, 2, @BevelOuter,
                   "EPanelBevel (Property_Value)", TYPE 3
           
      * Constants for RSI function style
           
      * ERSIStyle
           CLASS @ERSIStyle
               CLSID, BC12F193-C33D-4DE9-ABB5-14B0092178D5
               NAME, "ERSIStyle"
      * "long rsiOpenClose"
               ENUMERATOR, @rsiOpenClose, 0
      * "long rsiClose"
               ENUMERATOR, @rsiClose, 1
           
      * Constants for Series stacking
           
      * ECustomSeriesStack
           CLASS @ECustomSeriesStack
               CLSID, 6D963B6A-3949-488D-A6A5-941E6AFD6F73
               NAME, "ECustomSeriesStack"
      * "long cssNone"
               ENUMERATOR, @cssNone, 0
      * "long cssOverlap"
               ENUMERATOR, @cssOverlap, 1
      * "long cssStack"
               ENUMERATOR, @cssStack, 2
      * "long cssStack100"
               ENUMERATOR, @cssStack100, 3
           
      * Constants for vertical alignment of Text
           
      * ETeeVertAlign
           CLASS @ETeeVertAlign
               CLSID, BBDE93B4-B9A6-4B48-B550-5A1F8C73FA46
               NAME, "ETeeVertAlign"
      * "long vaTop"
               ENUMERATOR, @vaTop, 0
      * "long vaCenter"
               ENUMERATOR, @vaCenter, 1
      * "long vaBottom"
               ENUMERATOR, @vaBottom, 2
           
      * Constants for the alignment of Axis Labels
           
      * EAxisLabelAlign
           CLASS @EAxisLabelAlign
               CLSID, 4BAA3B68-8B0A-483E-BC18-C8F1A86C51D7
               NAME, "EAxisLabelAlign"
      * "long alDefault"
               ENUMERATOR, @alDefault, 0
      * "long alOpposite"
               ENUMERATOR, @alOpposite, 1
           
      * ContourLevels stores information about ContourSeries Y position levels.
           
      * IContourLevels
           CLASS @IContourLevels
               CLSID, DFCA987D-F71F-4EDE-8384-8857905BBD11
               NAME, "IContourLevels"
      *[Class: @IContourLevels] Items
      * Accesses ContourLevel levels.
               PROPERTY-GET, 1, @Items,
                   "long" @Index, TYPE 3
                       RETURNING "IContourLevel*", TYPE 9
      *[Class: @IContourLevels] Clicked
               METHOD, 201, @Clicked,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3,
                   "long*" @SegmentIndex, TYPE 16387,
                   "long*" @PointIndex, TYPE 16387
                       RETURNING "long", TYPE 3
           
      * Contains characteristic information for ContourLevel.
           
      * IContourLevel
           CLASS @IContourLevel
               CLSID, BD6EEB57-FDD3-4005-BEF7-FF4144634472
               NAME, "IContourLevel"
      *[Class: @IContourLevel] Color
      * Colour of TContourSeries Level
               PROPERTY-GET, 1, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IContourLevel] Color
      * Colour of TContourSeries Level
               PROPERTY-PUT, 1, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IContourLevel] UpToValue
      * Sets the range to which to apply the TContourLevel.Color within the 
               PROPERTY-GET, 2, @UpToValue
                       RETURNING "double", TYPE 5
      *[Class: @IContourLevel] UpToValue
      * Sets the range to which to apply the TContourLevel.Color within the 
               PROPERTY-PUT, 2, @UpToValue,
                   "double (Property_Value)", TYPE 5
      *[Class: @IContourLevel] Segments
      * Returns a collection of "segments" (lists of Points) containing the 
               PROPERTY-GET, 201, @Segments,
                   "long" @Index, TYPE 3
                       RETURNING "ILevelSegment*", TYPE 9
      *[Class: @IContourLevel] NumSegments
      * Number of segments of a contour level.
               PROPERTY-GET, 202, @NumSegments
                       RETURNING "long", TYPE 3
      *[Class: @IContourLevel] Pen
      * Defines the Pen to use to draw this level segments.
               PROPERTY-GET, 203, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IContourLevel] ClearSegments
      * Removes all segments in level.
               METHOD, 204, @ClearSegments
      *[Class: @IContourLevel] Clicked
      * Returns True when the XY pixel coordinates are over a segment line. It 
               METHOD, 205, @Clicked,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3,
                   "long*" @SegmentIndex, TYPE 16387,
                   "long*" @PointIndex, TYPE 16387
                       RETURNING "boolean", TYPE 11
      *[Class: @IContourLevel] ClickedSegment
      * Returns True if the XY pixel coordinates are over any point of the 
               METHOD, 206, @ClickedSegment,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3,
                   "long" @SegmentIndex, TYPE 3,
                   "long*" @PointIndex, TYPE 16387
                       RETURNING "boolean", TYPE 11
      *[Class: @IContourLevel] DefaultPen
      * Returns True when this level has no special custom pen.
               PROPERTY-GET, 207, @DefaultPen
                       RETURNING "boolean", TYPE 11
           
      * Contains characteristic information for Donut Series
           
      * IDonutSeries
           CLASS @IDonutSeries
               CLSID, 961DD96F-6F44-4D94-AFAC-43EB70C8E989
               NAME, "IDonutSeries"
      *[Class: @IDonutSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDonutSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDonutSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IDonutSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IDonutSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @IDonutSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDonutSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDonutSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IDonutSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IDonutSeries] UsePatterns
      * Draw Pie slices using brush patterns
               PROPERTY-GET, 22, @UsePatterns
                       RETURNING "boolean", TYPE 11
      *[Class: @IDonutSeries] UsePatterns
      * Draw Pie slices using brush patterns
               PROPERTY-PUT, 22, @UsePatterns,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDonutSeries] PieValues
      * The list of pie values
               PROPERTY-GET, 23, @PieValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IDonutSeries] Dark3D
      * Controls if 3D Pie areas will be drawn with dark colors
               PROPERTY-GET, 24, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IDonutSeries] Dark3D
      * Controls if 3D Pie areas will be drawn with dark colors
               PROPERTY-PUT, 24, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDonutSeries] ExplodeBiggest
      * Explode biggest slice by value
               PROPERTY-GET, 25, @ExplodeBiggest
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] ExplodeBiggest
      * Explode biggest slice by value
               PROPERTY-PUT, 25, @ExplodeBiggest,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDonutSeries] OtherSlice
      * Enables slice grouping
               PROPERTY-GET, 26, @OtherSlice
                       RETURNING "IPieOtherSlice*", TYPE 9
      *[Class: @IDonutSeries] ExplodedSlice
      * Explode any slice
               PROPERTY-GET, 27, @ExplodedSlice
                       RETURNING "IExplodedSlices*", TYPE 9
      *[Class: @IDonutSeries] PiePen
      * Pie line pen
               PROPERTY-GET, 28, @PiePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IDonutSeries] Shadow
      * Sets the characteristics of the Pie Shadow.
               PROPERTY-GET, 3, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IDonutSeries] AngleSize
      * Determines the internal angle of the Pie slice displayed.
               PROPERTY-GET, 13, @AngleSize
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] AngleSize
      * Determines the internal angle of the Pie slice displayed.
               PROPERTY-PUT, 13, @AngleSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDonutSeries] AutoMarkPosition
      * When True, the Pie series will display marks trying to not overlap one 
               PROPERTY-GET, 301, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IDonutSeries] AutoMarkPosition
      * When True, the Pie series will display marks trying to not overlap one 
               PROPERTY-PUT, 301, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDonutSeries] Gradient
      * Pie Gradient Fill
               PROPERTY-GET, 302, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IDonutSeries] SliceHeight
      * Each pie or donut series slice can be displayed using a different 
               PROPERTY-GET, 303, @SliceHeight,
                   "long" @Index, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] SliceHeight
      * Each pie or donut series slice can be displayed using a different 
               PROPERTY-PUT, 303, @SliceHeight,
                   "long" @Index, TYPE 3,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDonutSeries] DarkPen
      * Pie Dark Border
               PROPERTY-GET, 304, @DarkPen
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] DarkPen
      * Pie Dark Border
               PROPERTY-PUT, 304, @DarkPen,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDonutSeries] DonutPercent
      * Determines the dimension of the middle hole.
               PROPERTY-GET, 111, @DonutPercent
                       RETURNING "long", TYPE 3
      *[Class: @IDonutSeries] DonutPercent
      * Determines the dimension of the middle hole.
               PROPERTY-PUT, 111, @DonutPercent,
                   "long (Property_Value)", TYPE 3
           
      * Tri surface uses triangulation to build the a surface between a set of X,
           
      * ITriSurfaceSeries
           CLASS @ITriSurfaceSeries
               CLSID, CA79B938-5278-48FF-A471-897DC45FFBF7
               NAME, "ITriSurfaceSeries"
      *[Class: @ITriSurfaceSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ITriSurfaceSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @ITriSurfaceSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @ITriSurfaceSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @ITriSurfaceSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITriSurfaceSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ITriSurfaceSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ITriSurfaceSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITriSurfaceSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ITriSurfaceSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ITriSurfaceSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @ITriSurfaceSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @ITriSurfaceSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ITriSurfaceSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ITriSurfaceSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITriSurfaceSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITriSurfaceSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITriSurfaceSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITriSurfaceSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @ITriSurfaceSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITriSurfaceSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @ITriSurfaceSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITriSurfaceSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @ITriSurfaceSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITriSurfaceSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @ITriSurfaceSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @ITriSurfaceSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITriSurfaceSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITriSurfaceSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITriSurfaceSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @ITriSurfaceSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @ITriSurfaceSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @ITriSurfaceSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @ITriSurfaceSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITriSurfaceSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @ITriSurfaceSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITriSurfaceSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @ITriSurfaceSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITriSurfaceSeries] Border
      * Changes the color and style of the TriSurface border.
               PROPERTY-GET, 3, @Border
                       RETURNING "IPen*", TYPE 9
      *[Class: @ITriSurfaceSeries] HideTriangles
      * Hide 'behind' triangles
               PROPERTY-GET, 6, @HideTriangles
                       RETURNING "boolean", TYPE 11
      *[Class: @ITriSurfaceSeries] HideTriangles
      * Hide 'behind' triangles
               PROPERTY-PUT, 6, @HideTriangles,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITriSurfaceSeries] CacheTriangles
      * Preserve rectangles for zoom/rotate
               PROPERTY-GET, 7, @CacheTriangles
                       RETURNING "boolean", TYPE 11
      *[Class: @ITriSurfaceSeries] CacheTriangles
      * Preserve rectangles for zoom/rotate
               PROPERTY-PUT, 7, @CacheTriangles,
                   "boolean (Property_Value)", TYPE 11
           
      * Graphical technique for identifying values that are truly unusual.
           
      * ICustomBoxSeries
           CLASS @ICustomBoxSeries
               CLSID, AF89929B-75A6-412E-AFA6-91DC92F9AE91
               NAME, "ICustomBoxSeries"
      *[Class: @ICustomBoxSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @ICustomBoxSeries] Dark3D
      * Dark shading
               PROPERTY-GET, 2, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomBoxSeries] Dark3D
      * Dark shading
               PROPERTY-PUT, 2, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICustomBoxSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ICustomBoxSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomBoxSeries] ExtrOut
      * Use ExtrOut property to control the appearance of extreme outlier 
               PROPERTY-GET, 13, @ExtrOut
                       RETURNING "IPointer*", TYPE 9
      *[Class: @ICustomBoxSeries] MedianPen
      * Change the color or style of the median line.
               PROPERTY-GET, 14, @MedianPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustomBoxSeries] MildOut
      * Use MildOut property to control the appearance of mild outlier points.
               PROPERTY-GET, 15, @MildOut
                       RETURNING "IPointer*", TYPE 9
      *[Class: @ICustomBoxSeries] Position
      * Specifies the position of box series.
               PROPERTY-GET, 16, @Position
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] Position
      * Specifies the position of box series.
               PROPERTY-PUT, 16, @Position,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] WhiskerLength
      * Defines the length of the whiskers as a function of the inter-quartile 
               PROPERTY-GET, 17, @WhiskerLength
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] WhiskerLength
      * Defines the length of the whiskers as a function of the inter-quartile 
               PROPERTY-PUT, 17, @WhiskerLength,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] WhiskerPen
      * Changes the color or style of whisker lines.
               PROPERTY-GET, 18, @WhiskerPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICustomBoxSeries] Box
      * Use Box property to control the appearance of TCustomBoxSeries box.
               PROPERTY-GET, 19, @Box
                       RETURNING "IPointer*", TYPE 9
      *[Class: @ICustomBoxSeries] Median
      * Read this property to obtain the median value and write to it to 
               PROPERTY-GET, 401, @Median
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] Median
      * Read this property to obtain the median value and write to it to 
               PROPERTY-PUT, 401, @Median,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] Quartile1
      * Read this property to obtain the first quartile and write to it to 
               PROPERTY-GET, 402, @Quartile1
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] Quartile1
      * Read this property to obtain the first quartile and write to it to 
               PROPERTY-PUT, 402, @Quartile1,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] Quartile3
      * Read this property to obtain the third quartile and write to it to 
               PROPERTY-GET, 403, @Quartile3
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] Quartile3
      * Read this property to obtain the third quartile and write to it to 
               PROPERTY-PUT, 403, @Quartile3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] InnerFence1
      * Read this property to obtain the lower inner fence and write to it to 
               PROPERTY-GET, 404, @InnerFence1
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] InnerFence1
      * Read this property to obtain the lower inner fence and write to it to 
               PROPERTY-PUT, 404, @InnerFence1,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] InnerFence3
      * Read this property to obtain the upper inner fence and write to it to 
               PROPERTY-GET, 405, @InnerFence3
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] InnerFence3
      * Read this property to obtain the upper inner fence and write to it to 
               PROPERTY-PUT, 405, @InnerFence3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] OuterFence1
      * Read this property to obtain the lower outer fence and write to it to 
               PROPERTY-GET, 406, @OuterFence1
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] OuterFence1
      * Read this property to obtain the lower outer fence and write to it to 
               PROPERTY-PUT, 406, @OuterFence1,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] OuterFence3
      * Read this property to obtain the upper outer fence and write to it to 
               PROPERTY-GET, 407, @OuterFence3
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] OuterFence3
      * Read this property to obtain the upper outer fence and write to it to 
               PROPERTY-PUT, 407, @OuterFence3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] AdjacentPoint1
      * Read this property to obtain the lower adjacent point and write to it to 
               PROPERTY-GET, 408, @AdjacentPoint1
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] AdjacentPoint1
      * Read this property to obtain the lower adjacent point and write to it to 
               PROPERTY-PUT, 408, @AdjacentPoint1,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] AdjacentPoint3
      * Read this property to obtain the upper adjacent point and write to it to 
               PROPERTY-GET, 409, @AdjacentPoint3
                       RETURNING "double", TYPE 5
      *[Class: @ICustomBoxSeries] AdjacentPoint3
      * Read this property to obtain the upper adjacent point and write to it to 
               PROPERTY-PUT, 409, @AdjacentPoint3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomBoxSeries] UseCustomValues
      * Setting this property to true you override the internal algorithm to 
               PROPERTY-GET, 410, @UseCustomValues
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomBoxSeries] UseCustomValues
      * Setting this property to true you override the internal algorithm to 
               PROPERTY-PUT, 410, @UseCustomValues,
                   "boolean (Property_Value)", TYPE 11
           
      * The HorizBoxPlotSeries plots a box series horizontally.
           
      * IHorizBoxPlotSeries
           CLASS @IHorizBoxPlotSeries
               CLSID, B8ECD4DD-5DFC-4E06-84B7-7CBE3BB22858
               NAME, "IHorizBoxPlotSeries"
      *[Class: @IHorizBoxPlotSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IHorizBoxPlotSeries] Dark3D
      * Dark shading
               PROPERTY-GET, 2, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizBoxPlotSeries] Dark3D
      * Dark shading
               PROPERTY-PUT, 2, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizBoxPlotSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IHorizBoxPlotSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizBoxPlotSeries] ExtrOut
      * Use ExtrOut property to control the appearance of extreme outlier 
               PROPERTY-GET, 13, @ExtrOut
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IHorizBoxPlotSeries] MedianPen
      * Change the color or style of the median line.
               PROPERTY-GET, 14, @MedianPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizBoxPlotSeries] MildOut
      * Use MildOut property to control the appearance of mild outlier points.
               PROPERTY-GET, 15, @MildOut
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IHorizBoxPlotSeries] Position
      * Specifies the position of box series.
               PROPERTY-GET, 16, @Position
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] Position
      * Specifies the position of box series.
               PROPERTY-PUT, 16, @Position,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] WhiskerLength
      * Defines the length of the whiskers as a function of the inter-quartile 
               PROPERTY-GET, 17, @WhiskerLength
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] WhiskerLength
      * Defines the length of the whiskers as a function of the inter-quartile 
               PROPERTY-PUT, 17, @WhiskerLength,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] WhiskerPen
      * Changes the color or style of whisker lines.
               PROPERTY-GET, 18, @WhiskerPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizBoxPlotSeries] Box
      * Use Box property to control the appearance of TCustomBoxSeries box.
               PROPERTY-GET, 19, @Box
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IHorizBoxPlotSeries] Median
      * Read this property to obtain the median value and write to it to 
               PROPERTY-GET, 401, @Median
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] Median
      * Read this property to obtain the median value and write to it to 
               PROPERTY-PUT, 401, @Median,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] Quartile1
      * Read this property to obtain the first quartile and write to it to 
               PROPERTY-GET, 402, @Quartile1
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] Quartile1
      * Read this property to obtain the first quartile and write to it to 
               PROPERTY-PUT, 402, @Quartile1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] Quartile3
      * Read this property to obtain the third quartile and write to it to 
               PROPERTY-GET, 403, @Quartile3
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] Quartile3
      * Read this property to obtain the third quartile and write to it to 
               PROPERTY-PUT, 403, @Quartile3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] InnerFence1
      * Read this property to obtain the lower inner fence and write to it to 
               PROPERTY-GET, 404, @InnerFence1
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] InnerFence1
      * Read this property to obtain the lower inner fence and write to it to 
               PROPERTY-PUT, 404, @InnerFence1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] InnerFence3
      * Read this property to obtain the upper inner fence and write to it to 
               PROPERTY-GET, 405, @InnerFence3
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] InnerFence3
      * Read this property to obtain the upper inner fence and write to it to 
               PROPERTY-PUT, 405, @InnerFence3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] OuterFence1
      * Read this property to obtain the lower outer fence and write to it to 
               PROPERTY-GET, 406, @OuterFence1
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] OuterFence1
      * Read this property to obtain the lower outer fence and write to it to 
               PROPERTY-PUT, 406, @OuterFence1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] OuterFence3
      * Read this property to obtain the upper outer fence and write to it to 
               PROPERTY-GET, 407, @OuterFence3
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] OuterFence3
      * Read this property to obtain the upper outer fence and write to it to 
               PROPERTY-PUT, 407, @OuterFence3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] AdjacentPoint1
      * Read this property to obtain the lower adjacent point and write to it to 
               PROPERTY-GET, 408, @AdjacentPoint1
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] AdjacentPoint1
      * Read this property to obtain the lower adjacent point and write to it to 
               PROPERTY-PUT, 408, @AdjacentPoint1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] AdjacentPoint3
      * Read this property to obtain the upper adjacent point and write to it to 
               PROPERTY-GET, 409, @AdjacentPoint3
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] AdjacentPoint3
      * Read this property to obtain the upper adjacent point and write to it to 
               PROPERTY-PUT, 409, @AdjacentPoint3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizBoxPlotSeries] UseCustomValues
      * Setting this property to true you override the internal algorithm to 
               PROPERTY-GET, 410, @UseCustomValues
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizBoxPlotSeries] UseCustomValues
      * Setting this property to true you override the internal algorithm to 
               PROPERTY-PUT, 410, @UseCustomValues,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizBoxPlotSeries] MaxYValue
      * The MaxYValue function returns the highest of all the current Series Y 
               METHOD, 9, @MaxYValue
                       RETURNING "double", TYPE 5
      *[Class: @IHorizBoxPlotSeries] MinYValue
      * Returns the Minimum Value of the Series Y Values Lists.
               METHOD, 10, @MinYValue
                       RETURNING "double", TYPE 5
           
      * HistogramSeries is a 2D Series that draws a 'barlike' plot with no gaps 
           
      * IHistogramSeries
           CLASS @IHistogramSeries
               CLSID, ACEDE0B9-5FC2-4C36-B87E-E38F47A0D0F3
               NAME, "IHistogramSeries"
      *[Class: @IHistogramSeries] LinesPen
      * The LinePen property determines what kind of pen will be used for 
               PROPERTY-GET, 21, @LinesPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHistogramSeries] Transparency
      * Fill Transparency
               PROPERTY-GET, 1, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IHistogramSeries] Transparency
      * Fill Transparency
               PROPERTY-PUT, 1, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHistogramSeries] LinePen
      * Border LinePen
               PROPERTY-GET, 3, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHistogramSeries] Brush
      * Series fill Brush
               PROPERTY-GET, 2, @Brush
                       RETURNING "IBrush*", TYPE 9
           
      * The ColorGridSeries component controls access to the properties and 
           
      * IColorGridSeries
           CLASS @IColorGridSeries
               CLSID, 65C6F13C-1513-4AEA-B808-C38BFBA19F59
               NAME, "IColorGridSeries"
      *[Class: @IColorGridSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IColorGridSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @IColorGridSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @IColorGridSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @IColorGridSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @IColorGridSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IColorGridSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IColorGridSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IColorGridSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IColorGridSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IColorGridSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @IColorGridSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @IColorGridSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IColorGridSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IColorGridSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IColorGridSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IColorGridSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IColorGridSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IColorGridSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @IColorGridSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @IColorGridSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorGridSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorGridSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorGridSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorGridSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @IColorGridSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @IColorGridSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IColorGridSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IColorGridSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IColorGridSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @IColorGridSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @IColorGridSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @IColorGridSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorGridSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorGridSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @IColorGridSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IColorGridSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @IColorGridSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
      *[Class: @IColorGridSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-GET, 6, @NumXValues
                       RETURNING "long", TYPE 3
      *[Class: @IColorGridSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-PUT, 6, @NumXValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @IColorGridSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-GET, 7, @NumZValues
                       RETURNING "long", TYPE 3
      *[Class: @IColorGridSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-PUT, 7, @NumZValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @IColorGridSeries] GetXZValue
      * Returns the surface cell value for XZ indexes
               METHOD, 15, @GetXZValue,
                   "long" @X, TYPE 3,
                   "long" @Z, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IColorGridSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-GET, 313, @IrregularGrid
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorGridSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-PUT, 313, @IrregularGrid,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorGridSeries] SmoothGrid3D
      * Smooth the Serie using a simple linear algorithm
               METHOD, 401, @SmoothGrid3D
      *[Class: @IColorGridSeries] ReuseGridIndex
               PROPERTY-GET, 402, @ReuseGridIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorGridSeries] ReuseGridIndex
               PROPERTY-PUT, 402, @ReuseGridIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorGridSeries] FillGridIndex
               METHOD, 403, @FillGridIndex,
                   "long" @StartIndex, TYPE 3
      *[Class: @IColorGridSeries] MaxXValue
      * Returns the Maximum Value of the Series X Values List.
               METHOD, 233, @MaxXValue
                       RETURNING "double", TYPE 5
      *[Class: @IColorGridSeries] MaxYValue
      * Returns the Maximum Value of the Series Y Values List.
               METHOD, 20, @MaxYValue
                       RETURNING "double", TYPE 5
      *[Class: @IColorGridSeries] MinYValue
      * Returns the Minimum Value of the Series Y Values List.
               METHOD, 21, @MinYValue
                       RETURNING "double", TYPE 5
      *[Class: @IColorGridSeries] CenteredPoints
      * If true, X and Z values determine the center point of each grid cell. 
               PROPERTY-GET, 501, @CenteredPoints
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorGridSeries] CenteredPoints
      * If true, X and Z values determine the center point of each grid cell. 
               PROPERTY-PUT, 501, @CenteredPoints,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IColorGridSeries] Bitmap
      * Defines the bitmap used as the color source for the color grid. Each 
               PROPERTY-PUT, 503, @Bitmap,
                   "long (Property_Value)", TYPE 3
      *[Class: @IColorGridSeries] SmoothBitmap
               PROPERTY-GET, 502, @SmoothBitmap
                       RETURNING "boolean", TYPE 11
      *[Class: @IColorGridSeries] SmoothBitmap
               PROPERTY-PUT, 502, @SmoothBitmap,
                   "boolean (Property_Value)", TYPE 11
           
      * The BarJoinSeries is only effective with Bar Series and draws a line 
           
      * IBarJoinSeries
           CLASS @IBarJoinSeries
               CLSID, 4E3A948F-DA23-45D2-B78E-603A19765FD4
               NAME, "IBarJoinSeries"
      *[Class: @IBarJoinSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-GET, 20, @MultiBar
                       RETURNING "EMultiBar", TYPE 3
      *[Class: @IBarJoinSeries] MultiBar
      * Controls how multiple Bar Series will be displayed
               PROPERTY-PUT, 20, @MultiBar,
                   "EMultiBar (Property_Value)", TYPE 3
      *[Class: @IBarJoinSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-GET, 21, @AutoMarkPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarJoinSeries] AutoMarkPosition
      * Adjusts Bar marks to avoid overlapping
               PROPERTY-PUT, 21, @AutoMarkPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarJoinSeries] BarBrush
      * The brush used to fill the Bars
               PROPERTY-GET, 22, @BarBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IBarJoinSeries] BarPen
      * The pen used to draw the Bar borders
               PROPERTY-GET, 23, @BarPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBarJoinSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-GET, 24, @BarStyle
                       RETURNING "EBarStyle", TYPE 3
      *[Class: @IBarJoinSeries] BarStyle
      * The Bar style (cube, pyramid, ellipse, etc)
               PROPERTY-PUT, 24, @BarStyle,
                   "EBarStyle (Property_Value)", TYPE 3
      *[Class: @IBarJoinSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-GET, 25, @BarWidthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IBarJoinSeries] BarWidthPercent
      * The Bar widths in percent ( default 70% )
               PROPERTY-PUT, 25, @BarWidthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarJoinSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-GET, 26, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarJoinSeries] Dark3D
      * When True, Bar sides are filled with darker colors
               PROPERTY-PUT, 26, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarJoinSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-GET, 27, @OffsetPercent
                       RETURNING "long", TYPE 3
      *[Class: @IBarJoinSeries] OffsetPercent
      * The Bars displacement in percent of Bar width
               PROPERTY-PUT, 27, @OffsetPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarJoinSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-GET, 28, @SideMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarJoinSeries] SideMargins
      * When True, the Series leaves additional margins from the axis
               PROPERTY-PUT, 28, @SideMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarJoinSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-GET, 29, @UseOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarJoinSeries] UseOrigin
      * When True, the Origin property is used as the Bars bottom
               PROPERTY-PUT, 29, @UseOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarJoinSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-GET, 30, @Origin
                       RETURNING "double", TYPE 5
      *[Class: @IBarJoinSeries] Origin
      * When UseOrigin is True, Origin is the bottom bar value
               PROPERTY-PUT, 30, @Origin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBarJoinSeries] GetOriginPos
      * Returns the baseline pixel coordinate of ValueIndexth Bar
               METHOD, 31, @GetOriginPos,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IBarJoinSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-GET, 32, @AutoBarSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IBarJoinSeries] AutoBarSize
      * Enables auto resize of Bar on zoom
               PROPERTY-PUT, 32, @AutoBarSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBarJoinSeries] BarImageLoad
      * Load Bar image
               METHOD, 33, @BarImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IBarJoinSeries] BarImageClear
      * Clear Bar image
               METHOD, 34, @BarImageClear
      *[Class: @IBarJoinSeries] Gradient
      * Sets the characteristics of gradients within Bars of a Bar Series.
               PROPERTY-GET, 45, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IBarJoinSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-GET, 2, @StackGroup
                       RETURNING "long", TYPE 3
      *[Class: @IBarJoinSeries] StackGroup
      * Assigns a BarSeries to a specified stack.
               PROPERTY-PUT, 2, @StackGroup,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarJoinSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-GET, 111, @ConePercent
                       RETURNING "long", TYPE 3
      *[Class: @IBarJoinSeries] ConePercent
      * Sets percentage of cone displayed.
               PROPERTY-PUT, 111, @ConePercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarJoinSeries] TickLines
      * The pen used to draw the TickLines
               PROPERTY-GET, 201, @TickLines
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBarJoinSeries] DepthPercent
               PROPERTY-GET, 202, @DepthPercent
                       RETURNING "long", TYPE 3
      *[Class: @IBarJoinSeries] DepthPercent
               PROPERTY-PUT, 202, @DepthPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarJoinSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-GET, 40, @BarWidth
                       RETURNING "long", TYPE 3
      *[Class: @IBarJoinSeries] BarWidth
      * Custom Bar width in pixels (overrides BarWidthPercent)
               PROPERTY-PUT, 40, @BarWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBarJoinSeries] JoinPen
      * Use the properties of JoinPen to change the color or style of the line 
               PROPERTY-GET, 1, @JoinPen
                       RETURNING "IPen*", TYPE 9
           
      * WaterFall series is like a Surface series. It draws vertical "slices", 
           
      * IWaterfallSeries
           CLASS @IWaterfallSeries
               CLSID, E1904CCF-0023-4CF6-857F-E917152C916C
               NAME, "IWaterfallSeries"
      *[Class: @IWaterfallSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IWaterfallSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @IWaterfallSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @IWaterfallSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @IWaterfallSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWaterfallSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IWaterfallSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IWaterfallSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IWaterfallSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IWaterfallSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IWaterfallSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @IWaterfallSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @IWaterfallSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IWaterfallSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IWaterfallSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IWaterfallSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IWaterfallSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IWaterfallSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IWaterfallSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @IWaterfallSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWaterfallSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @IWaterfallSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @IWaterfallSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IWaterfallSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IWaterfallSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IWaterfallSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @IWaterfallSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @IWaterfallSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @IWaterfallSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @IWaterfallSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IWaterfallSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @IWaterfallSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
      *[Class: @IWaterfallSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-GET, 6, @NumXValues
                       RETURNING "long", TYPE 3
      *[Class: @IWaterfallSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-PUT, 6, @NumXValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWaterfallSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-GET, 7, @NumZValues
                       RETURNING "long", TYPE 3
      *[Class: @IWaterfallSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-PUT, 7, @NumZValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWaterfallSeries] GetXZValue
      * Returns the surface cell value for XZ indexes
               METHOD, 15, @GetXZValue,
                   "long" @X, TYPE 3,
                   "long" @Z, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IWaterfallSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-GET, 313, @IrregularGrid
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-PUT, 313, @IrregularGrid,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] SmoothGrid3D
      * Smooth the Serie using a simple linear algorithm
               METHOD, 401, @SmoothGrid3D
      *[Class: @IWaterfallSeries] ReuseGridIndex
               PROPERTY-GET, 402, @ReuseGridIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] ReuseGridIndex
               PROPERTY-PUT, 402, @ReuseGridIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] FillGridIndex
               METHOD, 403, @FillGridIndex,
                   "long" @StartIndex, TYPE 3
      *[Class: @IWaterfallSeries] DotFrame
      * When True, surface cells are drawn using a small single point
               PROPERTY-GET, 132, @DotFrame
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] DotFrame
      * When True, surface cells are drawn using a small single point
               PROPERTY-PUT, 132, @DotFrame,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] WireFrame
      * When True, surface cells are not filled
               PROPERTY-GET, 20, @WireFrame
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] WireFrame
      * When True, surface cells are not filled
               PROPERTY-PUT, 20, @WireFrame,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] SideBrush
      * Specifies the color and pattern to use when filling in the sides of a 
               PROPERTY-GET, 3, @SideBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IWaterfallSeries] SmoothPalette
      * When set to True, each cell is filled using a color calculated as the 
               PROPERTY-GET, 21, @SmoothPalette
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] SmoothPalette
      * When set to True, each cell is filled using a color calculated as the 
               PROPERTY-PUT, 21, @SmoothPalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] Transparency
      * Percentage of transparency, from 0 to 100, for all the surface cells.
               PROPERTY-GET, 501, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IWaterfallSeries] Transparency
      * Percentage of transparency, from 0 to 100, for all the surface cells.
               PROPERTY-PUT, 501, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IWaterfallSeries] FastBrush
      * Fast Brush for Surface Series
               PROPERTY-GET, 502, @FastBrush
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] FastBrush
      * Fast Brush for Surface Series
               PROPERTY-PUT, 502, @FastBrush,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] Waterfall
      * Enables/Disables display of WaterFall Series as Surface Series
               PROPERTY-GET, 22, @Waterfall
                       RETURNING "boolean", TYPE 11
      *[Class: @IWaterfallSeries] Waterfall
      * Enables/Disables display of WaterFall Series as Surface Series
               PROPERTY-PUT, 22, @Waterfall,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IWaterfallSeries] WaterLines
      * Use the properties of WaterLines to change the color or style of the 
               PROPERTY-GET, 23, @WaterLines
                       RETURNING "IPen*", TYPE 9
           
      * The Smith Series is a graphical representation of transmission-line 
           
      * ISmithSeries
           CLASS @ISmithSeries
               CLSID, B3F89F06-9079-4C94-B100-1A6777F877E9
               NAME, "ISmithSeries"
      *[Class: @ISmithSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @ISmithSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISmithSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @ISmithSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISmithSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @ISmithSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @ISmithSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @ISmithSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @ISmithSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISmithSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ISmithSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @ISmithSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISmithSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @ISmithSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISmithSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @ISmithSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ISmithSeries] CCirclePen
      * xCircle (reactance circle) pen properties
               PROPERTY-GET, 21, @CCirclePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ISmithSeries] CirclePen
      * rCircle pen (biggest circle) pen properties
               PROPERTY-GET, 22, @CirclePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ISmithSeries] CLabels
      * Shows/hides xCircle labels.
               PROPERTY-GET, 13, @CLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @ISmithSeries] CLabels
      * Shows/hides xCircle labels.
               PROPERTY-PUT, 13, @CLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISmithSeries] CLabelsFont
      * xCircle labels font.
               PROPERTY-GET, 14, @CLabelsFont
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ISmithSeries] ResistenceValues
      * ValuesList (resistance values)
               PROPERTY-GET, 15, @ResistenceValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ISmithSeries] ReactanceValues
      * ValuesList (reactance values)
               PROPERTY-GET, 16, @ReactanceValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ISmithSeries] Pointer
      * Formatting attributes of pointshapes
               PROPERTY-GET, 17, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @ISmithSeries] RCirclePen
      * rCircle (resistance circle) pen properties
               PROPERTY-GET, 18, @RCirclePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ISmithSeries] RLabels
      * Shows/hides rCircle labels
               PROPERTY-GET, 19, @RLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @ISmithSeries] RLabels
      * Shows/hides rCircle labels
               PROPERTY-PUT, 19, @RLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISmithSeries] RLabelsFont
      * rCircle labels font.
               PROPERTY-GET, 20, @RLabelsFont
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ISmithSeries] ImagSymbol
      * Symbol for perimiter labels
               PROPERTY-GET, 301, @ImagSymbol
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISmithSeries] ImagSymbol
      * Symbol for perimiter labels
               PROPERTY-PUT, 301, @ImagSymbol,
                   "BSTR (Property_Value)", TYPE 8
           
      * The Pyramid series draws points stacked in a vertical pyramid shape.
           
      * IPyramidSeries
           CLASS @IPyramidSeries
               CLSID, 6AF057AA-D908-4A6F-8EB1-A29F4E2D7C44
               NAME, "IPyramidSeries"
      *[Class: @IPyramidSeries] SizePercent
      * Pyramid base size as percent of XAxis width
               PROPERTY-GET, 1, @SizePercent
                       RETURNING "long", TYPE 3
      *[Class: @IPyramidSeries] SizePercent
      * Pyramid base size as percent of XAxis width
               PROPERTY-PUT, 1, @SizePercent,
                   "long (Property_Value)", TYPE 3
           
      * You can use the Map Series for drawing a collection of polygon shapes.
           
      * IMapSeries
           CLASS @IMapSeries
               CLSID, 9E578A81-B1CC-4006-AD4B-26B811F4F2A8
               NAME, "IMapSeries"
      *[Class: @IMapSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IMapSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @IMapSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @IMapSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @IMapSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMapSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IMapSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IMapSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IMapSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IMapSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IMapSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @IMapSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @IMapSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IMapSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IMapSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IMapSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IMapSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IMapSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IMapSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @IMapSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMapSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @IMapSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMapSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @IMapSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMapSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @IMapSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @IMapSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IMapSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IMapSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IMapSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @IMapSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @IMapSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @IMapSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @IMapSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMapSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @IMapSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IMapSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @IMapSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
      *[Class: @IMapSeries] Shapes
      * Accesses the different Map polygon shapes
               PROPERTY-GET, 3, @Shapes
                       RETURNING "IMapPolygonList*", TYPE 9
           
      * Contour Series specific characteristics
           
      * IContourSeries
           CLASS @IContourSeries
               CLSID, 4E435CCC-2B1F-44BA-8605-24058834285D
               NAME, "IContourSeries"
      *[Class: @IContourSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IContourSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @IContourSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @IContourSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @IContourSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @IContourSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IContourSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IContourSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IContourSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IContourSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IContourSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @IContourSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @IContourSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IContourSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IContourSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IContourSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IContourSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IContourSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IContourSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @IContourSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @IContourSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @IContourSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IContourSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @IContourSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IContourSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @IContourSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @IContourSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IContourSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IContourSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IContourSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @IContourSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @IContourSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @IContourSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @IContourSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IContourSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @IContourSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IContourSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @IContourSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
      *[Class: @IContourSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-GET, 6, @NumXValues
                       RETURNING "long", TYPE 3
      *[Class: @IContourSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-PUT, 6, @NumXValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @IContourSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-GET, 7, @NumZValues
                       RETURNING "long", TYPE 3
      *[Class: @IContourSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-PUT, 7, @NumZValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @IContourSeries] GetXZValue
      * Returns the surface cell value for XZ indexes
               METHOD, 15, @GetXZValue,
                   "long" @X, TYPE 3,
                   "long" @Z, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IContourSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-GET, 313, @IrregularGrid
                       RETURNING "boolean", TYPE 11
      *[Class: @IContourSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-PUT, 313, @IrregularGrid,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IContourSeries] SmoothGrid3D
      * Smooth the Serie using a simple linear algorithm
               METHOD, 401, @SmoothGrid3D
      *[Class: @IContourSeries] ReuseGridIndex
               PROPERTY-GET, 402, @ReuseGridIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @IContourSeries] ReuseGridIndex
               PROPERTY-PUT, 402, @ReuseGridIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IContourSeries] FillGridIndex
               METHOD, 403, @FillGridIndex,
                   "long" @StartIndex, TYPE 3
      *[Class: @IContourSeries] NumLevels
      * Number of Levels in ContourSeries
               PROPERTY-GET, 20, @NumLevels
                       RETURNING "long", TYPE 3
      *[Class: @IContourSeries] NumLevels
      * Number of Levels in ContourSeries
               PROPERTY-PUT, 20, @NumLevels,
                   "long (Property_Value)", TYPE 3
      *[Class: @IContourSeries] YPositionLevel
      * Enables Y positioning for Contour Series
               PROPERTY-GET, 21, @YPositionLevel
                       RETURNING "boolean", TYPE 11
      *[Class: @IContourSeries] YPositionLevel
      * Enables Y positioning for Contour Series
               PROPERTY-PUT, 21, @YPositionLevel,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IContourSeries] YPosition
      * Sets ContourSeries Y position
               PROPERTY-GET, 22, @YPosition
                       RETURNING "double", TYPE 5
      *[Class: @IContourSeries] YPosition
      * Sets ContourSeries Y position
               PROPERTY-PUT, 22, @YPosition,
                   "double (Property_Value)", TYPE 5
      *[Class: @IContourSeries] Levels
      * Access ContourLevel characteristics selecting Level by index.
               PROPERTY-GET, 3, @Levels
                       RETURNING "IContourLevels*", TYPE 9
      *[Class: @IContourSeries] AutomaticLevels
      * Sets ContourSeries Automatic Levels.
               PROPERTY-GET, 23, @AutomaticLevels
                       RETURNING "boolean", TYPE 11
      *[Class: @IContourSeries] AutomaticLevels
      * Sets ContourSeries Automatic Levels.
               PROPERTY-PUT, 23, @AutomaticLevels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IContourSeries] CreateAutoLevels
      * Calculate Level values and colors.
               METHOD, 24, @CreateAutoLevels
      *[Class: @IContourSeries] Smoothing
      * Determines the properties to use to apply "smoothing" to contour level 
               PROPERTY-GET, 501, @Smoothing
                       RETURNING "ISmoothPoints*", TYPE 9
           
      * The BoxPlotSeries plots a box series verticaly.
           
      * IBoxPlotSeries
           CLASS @IBoxPlotSeries
               CLSID, DE534435-3AC1-4F5C-B241-32E52A397297
               NAME, "IBoxPlotSeries"
      *[Class: @IBoxPlotSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IBoxPlotSeries] Dark3D
      * Dark shading
               PROPERTY-GET, 2, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IBoxPlotSeries] Dark3D
      * Dark shading
               PROPERTY-PUT, 2, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBoxPlotSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IBoxPlotSeries] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBoxPlotSeries] ExtrOut
      * Use ExtrOut property to control the appearance of extreme outlier 
               PROPERTY-GET, 13, @ExtrOut
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IBoxPlotSeries] MedianPen
      * Change the color or style of the median line.
               PROPERTY-GET, 14, @MedianPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBoxPlotSeries] MildOut
      * Use MildOut property to control the appearance of mild outlier points.
               PROPERTY-GET, 15, @MildOut
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IBoxPlotSeries] Position
      * Specifies the position of box series.
               PROPERTY-GET, 16, @Position
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] Position
      * Specifies the position of box series.
               PROPERTY-PUT, 16, @Position,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] WhiskerLength
      * Defines the length of the whiskers as a function of the inter-quartile 
               PROPERTY-GET, 17, @WhiskerLength
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] WhiskerLength
      * Defines the length of the whiskers as a function of the inter-quartile 
               PROPERTY-PUT, 17, @WhiskerLength,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] WhiskerPen
      * Changes the color or style of whisker lines.
               PROPERTY-GET, 18, @WhiskerPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBoxPlotSeries] Box
      * Use Box property to control the appearance of TCustomBoxSeries box.
               PROPERTY-GET, 19, @Box
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IBoxPlotSeries] Median
      * Read this property to obtain the median value and write to it to 
               PROPERTY-GET, 401, @Median
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] Median
      * Read this property to obtain the median value and write to it to 
               PROPERTY-PUT, 401, @Median,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] Quartile1
      * Read this property to obtain the first quartile and write to it to 
               PROPERTY-GET, 402, @Quartile1
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] Quartile1
      * Read this property to obtain the first quartile and write to it to 
               PROPERTY-PUT, 402, @Quartile1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] Quartile3
      * Read this property to obtain the third quartile and write to it to 
               PROPERTY-GET, 403, @Quartile3
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] Quartile3
      * Read this property to obtain the third quartile and write to it to 
               PROPERTY-PUT, 403, @Quartile3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] InnerFence1
      * Read this property to obtain the lower inner fence and write to it to 
               PROPERTY-GET, 404, @InnerFence1
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] InnerFence1
      * Read this property to obtain the lower inner fence and write to it to 
               PROPERTY-PUT, 404, @InnerFence1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] InnerFence3
      * Read this property to obtain the upper inner fence and write to it to 
               PROPERTY-GET, 405, @InnerFence3
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] InnerFence3
      * Read this property to obtain the upper inner fence and write to it to 
               PROPERTY-PUT, 405, @InnerFence3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] OuterFence1
      * Read this property to obtain the lower outer fence and write to it to 
               PROPERTY-GET, 406, @OuterFence1
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] OuterFence1
      * Read this property to obtain the lower outer fence and write to it to 
               PROPERTY-PUT, 406, @OuterFence1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] OuterFence3
      * Read this property to obtain the upper outer fence and write to it to 
               PROPERTY-GET, 407, @OuterFence3
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] OuterFence3
      * Read this property to obtain the upper outer fence and write to it to 
               PROPERTY-PUT, 407, @OuterFence3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] AdjacentPoint1
      * Read this property to obtain the lower adjacent point and write to it to 
               PROPERTY-GET, 408, @AdjacentPoint1
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] AdjacentPoint1
      * Read this property to obtain the lower adjacent point and write to it to 
               PROPERTY-PUT, 408, @AdjacentPoint1,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] AdjacentPoint3
      * Read this property to obtain the upper adjacent point and write to it to 
               PROPERTY-GET, 409, @AdjacentPoint3
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] AdjacentPoint3
      * Read this property to obtain the upper adjacent point and write to it to 
               PROPERTY-PUT, 409, @AdjacentPoint3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBoxPlotSeries] UseCustomValues
      * Setting this property to true you override the internal algorithm to 
               PROPERTY-GET, 410, @UseCustomValues
                       RETURNING "boolean", TYPE 11
      *[Class: @IBoxPlotSeries] UseCustomValues
      * Setting this property to true you override the internal algorithm to 
               PROPERTY-PUT, 410, @UseCustomValues,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBoxPlotSeries] MaxXValue
      * Returns the Maximum Value of the Series X Values List.
               METHOD, 9, @MaxXValue
                       RETURNING "double", TYPE 5
      *[Class: @IBoxPlotSeries] MinXValue
      * Returns the Minimum Value of the Series X Values List.
               METHOD, 10, @MinXValue
                       RETURNING "double", TYPE 5
           
      * The TeePanelsList contains a list of all Panels on a multipage 
           
      * ITeePanelsList
           CLASS @ITeePanelsList
               CLSID, 7F96EFC2-DA5D-4E90-A755-56DD857946D0
               NAME, "ITeePanelsList"
      *[Class: @ITeePanelsList] Delete
      * Removes the item at the position given by the Index parameter.
               METHOD, 2, @Delete,
                   "long" @Index, TYPE 3
      *[Class: @ITeePanelsList] Clear
      * Deletes all items from the list.
               METHOD, 3, @Clear
      *[Class: @ITeePanelsList] Count
      * Indicates the number of entries in the list that are in use.
               PROPERTY-GET, 4, @Count
                       RETURNING "long", TYPE 3
           
      * Styles with which to display Bezier plot.
           
      * EBezierStyle
           CLASS @EBezierStyle
               CLSID, 2C9AE337-A309-4659-B74A-A91F06BEBD75
               NAME, "EBezierStyle"
      * "long bsWindows"
               ENUMERATOR, @bsWindows, 0
      * "long bsBezier3"
               ENUMERATOR, @bsBezier3, 1
      * "long bsBezier4"
               ENUMERATOR, @bsBezier4, 2
           
      * Use with Custom3DPaletteSeries.PaletteStyle. Selects Pale or Strong 
           
      * EPaletteStyle
           CLASS @EPaletteStyle
               CLSID, C914067D-8C3A-4AAA-953A-8FD2BEAA1542
               NAME, "EPaletteStyle"
      * "long psPale"
               ENUMERATOR, @psPale, 0
      * "long psStrong"
               ENUMERATOR, @psStrong, 1
      * "long psGrayScale"
               ENUMERATOR, @psGrayScale, 2
      * "long psInvGray"
               ENUMERATOR, @psInvGray, 3
      * "long psRainbow"
               ENUMERATOR, @psRainbow, 4
           
      * Add and associate Cursors to individual Series or to be general to the 
           
      * ICursorTool
           CLASS @ICursorTool
               CLSID, C45C10F2-31FB-4BE9-BE6F-3956751D1C0F
               NAME, "ICursorTool"
      *[Class: @ICursorTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ICursorTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ICursorTool] FollowMouse
      * Set FollowMouse to True to let TCursorTool stick to the mouse movements
               PROPERTY-GET, 2, @FollowMouse
                       RETURNING "boolean", TYPE 11
      *[Class: @ICursorTool] FollowMouse
      * Set FollowMouse to True to let TCursorTool stick to the mouse movements
               PROPERTY-PUT, 2, @FollowMouse,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICursorTool] Pen
      * Element Pen characteristics.
               PROPERTY-GET, 3, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICursorTool] Snap
      * Set Snap property to True to align the TCursorTool with the nearest 
               PROPERTY-GET, 5, @Snap
                       RETURNING "boolean", TYPE 11
      *[Class: @ICursorTool] Snap
      * Set Snap property to True to align the TCursorTool with the nearest 
               PROPERTY-PUT, 5, @Snap,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICursorTool] Style
      * Default cssBoth: defines which lines of the CursorTool are shown on top 
               PROPERTY-GET, 6, @Style
                       RETURNING "ECursorToolStyle", TYPE 3
      *[Class: @ICursorTool] Style
      * Default cssBoth: defines which lines of the CursorTool are shown on top 
               PROPERTY-PUT, 6, @Style,
                   "ECursorToolStyle (Property_Value)", TYPE 3
      *[Class: @ICursorTool] XVal
      * Reads/Writes the Cursor Tool XValue
               PROPERTY-GET, 1, @XVal
                       RETURNING "double", TYPE 5
      *[Class: @ICursorTool] XVal
      * Reads/Writes the Cursor Tool XValue
               PROPERTY-PUT, 1, @XVal,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICursorTool] YVal
      * Reads/Writes the Cursor Tool YValue
               PROPERTY-GET, 4, @YVal
                       RETURNING "double", TYPE 5
      *[Class: @ICursorTool] YVal
      * Reads/Writes the Cursor Tool YValue
               PROPERTY-PUT, 4, @YVal,
                   "double (Property_Value)", TYPE 5
           
      * The DrawLineList contains a list of all Lines drawn by the  DrawLine 
           
      * IDrawLineList
           CLASS @IDrawLineList
               CLSID, 63EC1F5E-A093-409E-8E81-CF70892EFDF4
               NAME, "IDrawLineList"
      *[Class: @IDrawLineList] Items
      * Accesses the individual lines.
               PROPERTY-GET, 2, @Items,
                   "long" @Index, TYPE 3
                       RETURNING "IDrawLine*", TYPE 9
      *[Class: @IDrawLineList] ControlDefault
               PROPERTY-GET, 0, @ControlDefault,
                   "long" @Index, TYPE 3
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IDrawLineList] Clear
      * Removes the item at the position given by the Index parameter.
               METHOD, 5, @Clear
      *[Class: @IDrawLineList] Delete
      * Removes the item at the position given by the Index parameter.
               METHOD, 6, @Delete,
                   "long" @Index, TYPE 3
      *[Class: @IDrawLineList] Count
      * Indicates the number of entries in the list that are in use.
               PROPERTY-GET, 7, @Count
                       RETURNING "long", TYPE 3
           
      * DrawLine is the Line component used by the DrawLineTool to draw custom 
           
      * IDrawLine
           CLASS @IDrawLine
               CLSID, 963B18BE-30C3-4637-B889-50F96F6390E7
               NAME, "IDrawLine"
      *[Class: @IDrawLine] EndPos
      * X, Y position of the End point of line.
               PROPERTY-GET, 1, @EndPos
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IDrawLine] StartPos
      * X, Y position of the Start point of line.
               PROPERTY-GET, 2, @StartPos
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IDrawLine] Pen
      * Element Pen characteristics.
               PROPERTY-GET, 3, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IDrawLine] DrawHandles
      * Mark the ends of each line drawn with Handles for drag relocation.
               METHOD, 4, @DrawHandles
      *[Class: @IDrawLine] EndHandle
      * Returns Rect of the TDrawLine end handle.
               METHOD, 5, @EndHandle
                       RETURNING "TeeRect", TYPE 0
      *[Class: @IDrawLine] StartHandle
      * Returns Rect of the TDrawLine start handle.
               METHOD, 6, @StartHandle
                       RETURNING "TeeRect", TYPE 0
           
      * The Axis Arrow tool is used to display small arrows at begin and / or 
           
      * IAxisArrowTool
           CLASS @IAxisArrowTool
               CLSID, 4BCA386D-1C47-4396-A02D-499E25A41EC7
               NAME, "IAxisArrowTool"
      *[Class: @IAxisArrowTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-GET, 13, @Axis
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IAxisArrowTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-PUT, 13, @Axis,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IAxisArrowTool] Position
      * Set the Position property to specify where on the Axis the arrows are 
               PROPERTY-GET, 2, @Position
                       RETURNING "EAxisArrowToolPosition", TYPE 3
      *[Class: @IAxisArrowTool] Position
      * Set the Position property to specify where on the Axis the arrows are 
               PROPERTY-PUT, 2, @Position,
                   "EAxisArrowToolPosition (Property_Value)", TYPE 3
      *[Class: @IAxisArrowTool] Brush
      * Element Brush characteristics.
               PROPERTY-GET, 4, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IAxisArrowTool] Length
      * Default value is 16
               PROPERTY-GET, 5, @Length
                       RETURNING "long", TYPE 3
      *[Class: @IAxisArrowTool] Length
      * Default value is 16
               PROPERTY-PUT, 5, @Length,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisArrowTool] Pen
      * Element Pen characteristics.
               PROPERTY-GET, 6, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAxisArrowTool] ScrollPercent
      * Default value is 10
               PROPERTY-GET, 7, @ScrollPercent
                       RETURNING "long", TYPE 3
      *[Class: @IAxisArrowTool] ScrollPercent
      * Default value is 10
               PROPERTY-PUT, 7, @ScrollPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisArrowTool] ScrollInverted
      * Inverts Chart scroll
               PROPERTY-GET, 1, @ScrollInverted
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisArrowTool] ScrollInverted
      * Inverts Chart scroll
               PROPERTY-PUT, 1, @ScrollInverted,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxisArrowTool] HeadWidth
               PROPERTY-GET, 301, @HeadWidth
                       RETURNING "long", TYPE 3
      *[Class: @IAxisArrowTool] HeadWidth
               PROPERTY-PUT, 301, @HeadWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisArrowTool] SizePercent
               PROPERTY-GET, 302, @SizePercent
                       RETURNING "long", TYPE 3
      *[Class: @IAxisArrowTool] SizePercent
               PROPERTY-PUT, 302, @SizePercent,
                   "long (Property_Value)", TYPE 3
           
      * Ancestor class for several TeeChart export formats.
           
      * IExportFormat
           CLASS @IExportFormat
               CLSID, 2C690C14-EFB6-44F1-9D4C-192C0379BF4F
               NAME, "IExportFormat"
      *[Class: @IExportFormat] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IExportFormat] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IExportFormat] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IExportFormat] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IExportFormat] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IExportFormat] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
           
      * Format used to define JPEG export characteristics.
           
      * IJPEGExport
           CLASS @IJPEGExport
               CLSID, 2CF41EAA-55C6-4F95-9263-B3E98C69B751
               NAME, "IJPEGExport"
      *[Class: @IJPEGExport] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IJPEGExport] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IJPEGExport] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IJPEGExport] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IJPEGExport] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IJPEGExport] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IJPEGExport] GrayScale
      * When True JPEG outputted in Grayscale
               PROPERTY-GET, 1, @GrayScale
                       RETURNING "boolean", TYPE 11
      *[Class: @IJPEGExport] GrayScale
      * When True JPEG outputted in Grayscale
               PROPERTY-PUT, 1, @GrayScale,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IJPEGExport] CompressionQuality
      * Quality is a percentage 0 - 100% of which 100% is best quality.
               PROPERTY-GET, 4, @CompressionQuality
                       RETURNING "long", TYPE 3
      *[Class: @IJPEGExport] CompressionQuality
      * Quality is a percentage 0 - 100% of which 100% is best quality.
               PROPERTY-PUT, 4, @CompressionQuality,
                   "long (Property_Value)", TYPE 3
           
      * The PNGExport class inlcudes characteristics of the PNG image export 
           
      * IPNGExport
           CLASS @IPNGExport
               CLSID, C8BCEDB3-4B23-4B98-8A4A-AA40EBADB60B
               NAME, "IPNGExport"
      *[Class: @IPNGExport] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IPNGExport] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPNGExport] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IPNGExport] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPNGExport] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IPNGExport] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IPNGExport] CompressionLevel
      * Sets the level of PNG compression.
               PROPERTY-GET, 1, @CompressionLevel
                       RETURNING "long", TYPE 3
      *[Class: @IPNGExport] CompressionLevel
      * Sets the level of PNG compression.
               PROPERTY-PUT, 1, @CompressionLevel,
                   "long (Property_Value)", TYPE 3
           
      * Use GIFExport to create and export the TeeChart in GIF format.
           
      * IGIFExport
           CLASS @IGIFExport
               CLSID, 8D20376F-8D68-4874-A1DC-04A72E770027
               NAME, "IGIFExport"
      *[Class: @IGIFExport] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IGIFExport] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGIFExport] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IGIFExport] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGIFExport] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IGIFExport] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IGIFExport] Compression
      * Sets the type of GIF compression
               PROPERTY-GET, 1, @Compression
                       RETURNING "EGIFCompression", TYPE 3
      *[Class: @IGIFExport] Compression
      * Sets the type of GIF compression
               PROPERTY-PUT, 1, @Compression,
                   "EGIFCompression (Property_Value)", TYPE 3
      *[Class: @IGIFExport] DitherMode
      * Sets the type of GIF dithermode
               PROPERTY-GET, 2, @DitherMode
                       RETURNING "EGIFDitherMode", TYPE 3
      *[Class: @IGIFExport] DitherMode
      * Sets the type of GIF dithermode
               PROPERTY-PUT, 2, @DitherMode,
                   "EGIFDitherMode (Property_Value)", TYPE 3
      *[Class: @IGIFExport] ColorReduction
      * Sets the type of GIF colorreduction
               PROPERTY-GET, 3, @ColorReduction
                       RETURNING "EGIFColorReduction", TYPE 3
      *[Class: @IGIFExport] ColorReduction
      * Sets the type of GIF colorreduction
               PROPERTY-PUT, 3, @ColorReduction,
                   "EGIFColorReduction (Property_Value)", TYPE 3
           
      * Compression type for GIF images.
           
      * EGIFCompression
           CLASS @EGIFCompression
               CLSID, 1BE81F9C-91BF-4944-A8D4-001135904D64
               NAME, "EGIFCompression"
      * "long gcLZW"
               ENUMERATOR, @gcLZW, 0
      * "long gcRLE"
               ENUMERATOR, @gcRLE, 1
           
      * DitherMode type for GIF images.
           
      * EGIFDitherMode
           CLASS @EGIFDitherMode
               CLSID, 0E52FEFF-7685-4E23-A16E-49EF0BC633C3
               NAME, "EGIFDitherMode"
      * "long dmNearest"
               ENUMERATOR, @dmNearest, 0
      * "long dmFloydSteinberg"
               ENUMERATOR, @dmFloydSteinberg, 1
      * "long dmStucki"
               ENUMERATOR, @dmStucki, 2
      * "long dmSierra"
               ENUMERATOR, @dmSierra, 3
      * "long dmJaJuNI"
               ENUMERATOR, @dmJaJuNI, 4
      * "long dmSteveArche"
               ENUMERATOR, @dmSteveArche, 5
      * "long dmBurkes"
               ENUMERATOR, @dmBurkes, 6
           
      * ColorReduction type for GIF images.
           
      * EGIFColorReduction
           CLASS @EGIFColorReduction
               CLSID, 00DE00C1-5DF4-4AE0-9905-C86BC04D4B56
               NAME, "EGIFColorReduction"
      * "long rmNone"
               ENUMERATOR, @rmNone, 0
      * "long rmWindows20"
               ENUMERATOR, @rmWindows20, 1
      * "long rmWindows256"
               ENUMERATOR, @rmWindows256, 2
      * "long rmWindowsGray"
               ENUMERATOR, @rmWindowsGray, 3
      * "long rmMonochrome"
               ENUMERATOR, @rmMonochrome, 4
      * "long rmGrayScale"
               ENUMERATOR, @rmGrayScale, 5
      * "long rmNetscape"
               ENUMERATOR, @rmNetscape, 6
      * "long rmQuantize"
               ENUMERATOR, @rmQuantize, 7
      * "long rmQuantize256"
               ENUMERATOR, @rmQuantize256, 8
           
      * Use PCXExport to create and export the TeeChart in PCX format.
           
      * IPCXExport
           CLASS @IPCXExport
               CLSID, 936E9FF3-0F4A-473A-9531-92EE384AA719
               NAME, "IPCXExport"
      *[Class: @IPCXExport] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IPCXExport] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPCXExport] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IPCXExport] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPCXExport] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IPCXExport] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
           
      * Use MetafileExport to create and export the TeeChart in Metafile 
           
      * IMetafileExport
           CLASS @IMetafileExport
               CLSID, E21BA45B-EEFA-4E2D-A867-33CDC761A26C
               NAME, "IMetafileExport"
      *[Class: @IMetafileExport] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IMetafileExport] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMetafileExport] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IMetafileExport] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMetafileExport] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IMetafileExport] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IMetafileExport] Enhanced
      * When true exports TChart in Enhanced Metafile format
               PROPERTY-GET, 1, @Enhanced
                       RETURNING "boolean", TYPE 11
      *[Class: @IMetafileExport] Enhanced
      * When true exports TChart in Enhanced Metafile format
               PROPERTY-PUT, 1, @Enhanced,
                   "boolean (Property_Value)", TYPE 11
           
      * Use BMPExport to create and export the TeeChart in BMP format.
           
      * IBMPExport
           CLASS @IBMPExport
               CLSID, 448739CD-7C37-43F4-AE7E-5AE35B2423FB
               NAME, "IBMPExport"
      *[Class: @IBMPExport] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IBMPExport] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBMPExport] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IBMPExport] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBMPExport] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IBMPExport] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IBMPExport] Colors
      * Sets the pixel format of the BMP image
               PROPERTY-GET, 1, @Colors
                       RETURNING "EPixelFormat", TYPE 3
      *[Class: @IBMPExport] Colors
      * Sets the pixel format of the BMP image
               PROPERTY-PUT, 1, @Colors,
                   "EPixelFormat (Property_Value)", TYPE 3
      *[Class: @IBMPExport] Monochrome
      * When True exports BMP as monochrome
               PROPERTY-GET, 2, @Monochrome
                       RETURNING "boolean", TYPE 11
      *[Class: @IBMPExport] Monochrome
      * When True exports BMP as monochrome
               PROPERTY-PUT, 2, @Monochrome,
                   "boolean (Property_Value)", TYPE 11
           
      * Pixel format types for BMP images.
           
      * EPixelFormat
           CLASS @EPixelFormat
               CLSID, 578732EB-5DB1-4421-82FD-B517C0F69C47
               NAME, "EPixelFormat"
      * "long pfDevice"
               ENUMERATOR, @pfDevice, 0
      * "long pf1bit"
               ENUMERATOR, @pf1bit, 1
      * "long pf4bit"
               ENUMERATOR, @pf4bit, 2
      * "long pf8bit"
               ENUMERATOR, @pf8bit, 3
      * "long pf15bit"
               ENUMERATOR, @pf15bit, 4
      * "long pf16bit"
               ENUMERATOR, @pf16bit, 5
      * "long pf24bit"
               ENUMERATOR, @pf24bit, 6
      * "long pf32bit"
               ENUMERATOR, @pf32bit, 7
           
      * The Marks Tip tool is used to display default Hint when the mouse is 
           
      * IMarksTipTool
           CLASS @IMarksTipTool
               CLSID, 448CD9A9-E55D-402F-A22D-6C75FED9EB83
               NAME, "IMarksTipTool"
      *[Class: @IMarksTipTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IMarksTipTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IMarksTipTool] MouseAction
      * Action Mouse Mark Tip on: Mouse Move or Click
               PROPERTY-GET, 1, @MouseAction
                       RETURNING "EMarkToolMouseAction", TYPE 3
      *[Class: @IMarksTipTool] MouseAction
      * Action Mouse Mark Tip on: Mouse Move or Click
               PROPERTY-PUT, 1, @MouseAction,
                   "EMarkToolMouseAction (Property_Value)", TYPE 3
      *[Class: @IMarksTipTool] Style
      * Use Series Marks Styles to define the text format of the Mark Tip.
               PROPERTY-GET, 2, @Style
                       RETURNING "EMarkStyle", TYPE 3
      *[Class: @IMarksTipTool] Style
      * Use Series Marks Styles to define the text format of the Mark Tip.
               PROPERTY-PUT, 2, @Style,
                   "EMarkStyle (Property_Value)", TYPE 3
      *[Class: @IMarksTipTool] Delay
      * Sets the time lag before the Tool Tip appears
               PROPERTY-GET, 3, @Delay
                       RETURNING "long", TYPE 3
      *[Class: @IMarksTipTool] Delay
      * Sets the time lag before the Tool Tip appears
               PROPERTY-PUT, 3, @Delay,
                   "long (Property_Value)", TYPE 3
           
      * The Image tool draws a picture (bitmap, jpeg, etc) behind chart Series.
           
      * IChartImageTool
           CLASS @IChartImageTool
               CLSID, E842A07D-568A-42B8-91F6-7360FC8A7162
               NAME, "IChartImageTool"
      *[Class: @IChartImageTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IChartImageTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IChartImageTool] ImageLoad
      * Loads image.
               METHOD, 1, @ImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IChartImageTool] ImageClear
      * Clears image.
               METHOD, 2, @ImageClear
           
      * Sets the behaviour of the mouse for the MarksTipTool.
           
      * EMarkToolMouseAction
           CLASS @EMarkToolMouseAction
               CLSID, 56864D57-ECC0-4EBF-A4B1-137FCB513560
               NAME, "EMarkToolMouseAction"
      * "long mtmMove"
               ENUMERATOR, @mtmMove, 0
      * "long mtmClick"
               ENUMERATOR, @mtmClick, 1
           
      * The Momentum Division function calculates the ratio of a point value 
           
      * IMomentumDivFunction
           CLASS @IMomentumDivFunction
               CLSID, A3B6CD78-A570-4766-983F-F7B2A9B81B82
               NAME, "IMomentumDivFunction"
           
      * The Exponential Trend function is similar to Trend, except that the 
           
      * IExpTrendFunction
           CLASS @IExpTrendFunction
               CLSID, C9F01FD2-EA29-48C5-9670-B41A71586811
               NAME, "IExpTrendFunction"
           
      * The Exponential Moving Average function calculates values using  FP = 2 
           
      * IExpMovAvgFunction
           CLASS @IExpMovAvgFunction
               CLSID, 222B5D11-AB96-4A40-B102-4B05492EBCA7
               NAME, "IExpMovAvgFunction"
           
      * The RMSFunction calculates the Root Mean Square value (RMS) for range of 
           
      * IRMSFunction
           CLASS @IRMSFunction
               CLSID, 0F0EE93E-D194-49C2-80EF-5612319D3BC5
               NAME, "IRMSFunction"
      *[Class: @IRMSFunction] Complete
      * The Complete boolean property defines the RMS formula.
               PROPERTY-GET, 1, @Complete
                       RETURNING "boolean", TYPE 11
      *[Class: @IRMSFunction] Complete
      * The Complete boolean property defines the RMS formula.
               PROPERTY-PUT, 1, @Complete,
                   "boolean (Property_Value)", TYPE 11
           
      * The MACD function (Moving Average Convergence Divergence), used in 
           
      * IMACDFunction
           CLASS @IMACDFunction
               CLSID, EB493174-BC60-415B-A399-6138A0D26795
               NAME, "IMACDFunction"
      *[Class: @IMACDFunction] Period2
      * The Period property controls how many points or X range(sse note below) 
               PROPERTY-GET, 1, @Period2
                       RETURNING "double", TYPE 5
      *[Class: @IMACDFunction] Period2
      * The Period property controls how many points or X range(sse note below) 
               PROPERTY-PUT, 1, @Period2,
                   "double (Property_Value)", TYPE 5
      *[Class: @IMACDFunction] MACDExp
      * Exponential associated with MACD (FastLine)
               PROPERTY-GET, 2, @MACDExp
                       RETURNING "ISeries*", TYPE 9
      *[Class: @IMACDFunction] Histogram
      * Histogram associated with MACD (Volume)
               PROPERTY-GET, 3, @Histogram
                       RETURNING "ISeries*", TYPE 9
      *[Class: @IMACDFunction] Period3
      * EMA of MACD as the signal/trigger line
               PROPERTY-GET, 4, @Period3
                       RETURNING "long", TYPE 3
      *[Class: @IMACDFunction] Period3
      * EMA of MACD as the signal/trigger line
               PROPERTY-PUT, 4, @Period3,
                   "long (Property_Value)", TYPE 3
           
      * The Stochastic function is used in financial charts.
           
      * IStochasticFunction
           CLASS @IStochasticFunction
               CLSID, C9D00788-FAB7-4C26-82F2-5F59F6B07BEA
               NAME, "IStochasticFunction"
           
      * The BollingerFunction intruduces the Bollinger Bands Trading Bands 
           
      * IBollingerFunction
           CLASS @IBollingerFunction
               CLSID, A768B269-89A1-40EE-B752-D0F7075524CF
               NAME, "IBollingerFunction"
      *[Class: @IBollingerFunction] Deviation
      * Default 2: Deviation defines the standard deviation (StdDev) multiplier, 
               PROPERTY-GET, 1, @Deviation
                       RETURNING "double", TYPE 5
      *[Class: @IBollingerFunction] Deviation
      * Default 2: Deviation defines the standard deviation (StdDev) multiplier, 
               PROPERTY-PUT, 1, @Deviation,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBollingerFunction] Exponential
      * When Exponential is true, then exponential moving average function will 
               PROPERTY-GET, 2, @Exponential
                       RETURNING "boolean", TYPE 11
      *[Class: @IBollingerFunction] Exponential
      * When Exponential is true, then exponential moving average function will 
               PROPERTY-PUT, 2, @Exponential,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IBollingerFunction] LowBand
      * LowBand Series stores the low band (Mean - Deviation*StdDev) values.
               PROPERTY-GET, 3, @LowBand
                       RETURNING "ISeries*", TYPE 9
           
      * The ADXFunction is normally used in financial trending applications to 
           
      * IADXFunction
           CLASS @IADXFunction
               CLSID, BA6779DB-B5E7-4329-A08D-10353EB8108A
               NAME, "IADXFunction"
      *[Class: @IADXFunction] DMDown
      * Access characteristics of the DMDown line (a FastLineSeries).
               PROPERTY-GET, 1, @DMDown
                       RETURNING "ISeries*", TYPE 9
      *[Class: @IADXFunction] DMUp
      * Access characteristics of the DMUp line (a FastLineSeries).
               PROPERTY-GET, 2, @DMUp
                       RETURNING "ISeries*", TYPE 9
           
      * Exports Chart in Native (*.tee) file format
           
      * INativeExport
           CLASS @INativeExport
               CLSID, 1E790CAB-F57B-43C7-AE84-E67BE2798F38
               NAME, "INativeExport"
      *[Class: @INativeExport] SaveToFile
      * Saves *.tee file to file
               METHOD, 1, @SaveToFile,
                   "BSTR" @FileName, TYPE 8,
                   "boolean" @IncludeData, TYPE 11
      *[Class: @INativeExport] SaveToStream
      * Saves *.tee file to stream
               METHOD, 2, @SaveToStream,
                   "boolean" @IncludeData, TYPE 11
                       RETURNING "VARIANT", TYPE 12
      *[Class: @INativeExport] SaveToBase64Stream
      * Export Chart template as Base64Stream
               METHOD, 201, @SaveToBase64Stream,
                   "boolean" @IncludeData, TYPE 11
                       RETURNING "VARIANT", TYPE 12
           
      * Exports Chart series Data.
           
      * IDataExport
           CLASS @IDataExport
               CLSID, EB185B44-B1CC-4BC8-B18F-051ECCB3D157
               NAME, "IDataExport"
      *[Class: @IDataExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-GET, 1, @IncludeHeader
                       RETURNING "boolean", TYPE 11
      *[Class: @IDataExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-PUT, 1, @IncludeHeader,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDataExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-GET, 2, @IncludeLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IDataExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-PUT, 2, @IncludeLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDataExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-GET, 3, @IncludeIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @IDataExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-PUT, 3, @IncludeIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDataExport] Series
      * Sets Series from which Data is exported
               PROPERTY-GET, 4, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IDataExport] Series
      * Sets Series from which Data is exported
               PROPERTY-PUT, 4, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IDataExport] SaveToFile
      * Saves series Data to file
               METHOD, 5, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IDataExport] SaveToStream
      * Saves series Data to Stream
               METHOD, 6, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IDataExport] AsString
      * Saves series Data as a String
               METHOD, 7, @AsString
                       RETURNING "BSTR", TYPE 8
           
      * Series Data export in XML format
           
      * IXMLExport
           CLASS @IXMLExport
               CLSID, 0CF678B7-6BF7-4FEB-9522-F0AAE5EB169D
               NAME, "IXMLExport"
      *[Class: @IXMLExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-GET, 1, @IncludeHeader
                       RETURNING "boolean", TYPE 11
      *[Class: @IXMLExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-PUT, 1, @IncludeHeader,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IXMLExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-GET, 2, @IncludeLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IXMLExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-PUT, 2, @IncludeLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IXMLExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-GET, 3, @IncludeIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @IXMLExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-PUT, 3, @IncludeIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IXMLExport] Series
      * Sets Series from which Data is exported
               PROPERTY-GET, 4, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IXMLExport] Series
      * Sets Series from which Data is exported
               PROPERTY-PUT, 4, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IXMLExport] SaveToFile
      * Saves series Data to file
               METHOD, 5, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IXMLExport] SaveToStream
      * Saves series Data to Stream
               METHOD, 6, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IXMLExport] AsString
      * Saves series Data as a String
               METHOD, 7, @AsString
                       RETURNING "BSTR", TYPE 8
           
      * Series Data export in XLS format
           
      * IXLSExport
           CLASS @IXLSExport
               CLSID, 77316D1C-8D8A-4473-8DA4-26C41CBA2A29
               NAME, "IXLSExport"
      *[Class: @IXLSExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-GET, 1, @IncludeHeader
                       RETURNING "boolean", TYPE 11
      *[Class: @IXLSExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-PUT, 1, @IncludeHeader,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IXLSExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-GET, 2, @IncludeLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IXLSExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-PUT, 2, @IncludeLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IXLSExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-GET, 3, @IncludeIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @IXLSExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-PUT, 3, @IncludeIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IXLSExport] Series
      * Sets Series from which Data is exported
               PROPERTY-GET, 4, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IXLSExport] Series
      * Sets Series from which Data is exported
               PROPERTY-PUT, 4, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IXLSExport] SaveToFile
      * Saves series Data to file
               METHOD, 5, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IXLSExport] SaveToStream
      * Saves series Data to Stream
               METHOD, 6, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IXLSExport] AsString
      * Saves series Data as a String
               METHOD, 7, @AsString
                       RETURNING "BSTR", TYPE 8
           
      * Series Data export in HTML format
           
      * IHTMLExport
           CLASS @IHTMLExport
               CLSID, A1D9E1AF-8C2B-427B-A544-CF2542E4F102
               NAME, "IHTMLExport"
      *[Class: @IHTMLExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-GET, 1, @IncludeHeader
                       RETURNING "boolean", TYPE 11
      *[Class: @IHTMLExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-PUT, 1, @IncludeHeader,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHTMLExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-GET, 2, @IncludeLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IHTMLExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-PUT, 2, @IncludeLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHTMLExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-GET, 3, @IncludeIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @IHTMLExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-PUT, 3, @IncludeIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHTMLExport] Series
      * Sets Series from which Data is exported
               PROPERTY-GET, 4, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IHTMLExport] Series
      * Sets Series from which Data is exported
               PROPERTY-PUT, 4, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IHTMLExport] SaveToFile
      * Saves series Data to file
               METHOD, 5, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IHTMLExport] SaveToStream
      * Saves series Data to Stream
               METHOD, 6, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IHTMLExport] AsString
      * Saves series Data as a String
               METHOD, 7, @AsString
                       RETURNING "BSTR", TYPE 8
           
      * Series Data export in Text format
           
      * ITextExport
           CLASS @ITextExport
               CLSID, 59108AA6-AB28-4E8E-B343-6273BD2FEB6D
               NAME, "ITextExport"
      *[Class: @ITextExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-GET, 1, @IncludeHeader
                       RETURNING "boolean", TYPE 11
      *[Class: @ITextExport] IncludeHeader
      * Enables/disables inclusion of Chart Header
               PROPERTY-PUT, 1, @IncludeHeader,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITextExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-GET, 2, @IncludeLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @ITextExport] IncludeLabels
      * Enables/disables inclusion of Axes Labels
               PROPERTY-PUT, 2, @IncludeLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITextExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-GET, 3, @IncludeIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @ITextExport] IncludeIndex
      * Enables/disables inclusion of Series Index
               PROPERTY-PUT, 3, @IncludeIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITextExport] Series
      * Sets Series from which Data is exported
               PROPERTY-GET, 4, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ITextExport] Series
      * Sets Series from which Data is exported
               PROPERTY-PUT, 4, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ITextExport] SaveToFile
      * Saves series Data to file
               METHOD, 5, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @ITextExport] SaveToStream
      * Saves series Data to Stream
               METHOD, 6, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ITextExport] AsString
      * Saves series Data as a String
               METHOD, 7, @AsString
                       RETURNING "BSTR", TYPE 8
      *[Class: @ITextExport] TextDelimiter
      * Defines delimiter (character) that separates values
               PROPERTY-GET, 8, @TextDelimiter
                       RETURNING "BSTR", TYPE 8
      *[Class: @ITextExport] TextDelimiter
      * Defines delimiter (character) that separates values
               PROPERTY-PUT, 8, @TextDelimiter,
                   "BSTR (Property_Value)", TYPE 8
           
      * List of all the Map polygon shapes
           
      * IMapPolygonList
           CLASS @IMapPolygonList
               CLSID, 696DB50E-A01A-4351-AE1B-A9E279928519
               NAME, "IMapPolygonList"
      *[Class: @IMapPolygonList] Add
      * Adds a poygon shape to the Map series
               METHOD, 1, @Add
                       RETURNING "long", TYPE 3
      *[Class: @IMapPolygonList] Polygon
      * Accesses Map polygon shape characteristics
               PROPERTY-GET, 2, @Polygon,
                   "long" @Index, TYPE 3
                       RETURNING "IMapPolygon*", TYPE 9
      *[Class: @IMapPolygonList] Count
      * Shapes Count
               PROPERTY-GET, 201, @Count
                       RETURNING "long", TYPE 3
           
      * Map polygon shape characteristics
           
      * IMapPolygon
           CLASS @IMapPolygon
               CLSID, 105215CD-52C0-4240-B750-1279617171E2
               NAME, "IMapPolygon"
      *[Class: @IMapPolygon] Brush
      * Access to Map polygon shape Brush properties
               PROPERTY-GET, 1, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IMapPolygon] Color
      * Map polygon shape colour
               PROPERTY-GET, 2, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IMapPolygon] Color
      * Map polygon shape colour
               PROPERTY-PUT, 2, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IMapPolygon] Gradient
      * Map polygon shape gradient
               PROPERTY-GET, 3, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IMapPolygon] ParentBrush
      * When true polygon uses the same Brush as its parentseries (Map)
               PROPERTY-GET, 5, @ParentBrush
                       RETURNING "boolean", TYPE 11
      *[Class: @IMapPolygon] ParentBrush
      * When true polygon uses the same Brush as its parentseries (Map)
               PROPERTY-PUT, 5, @ParentBrush,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMapPolygon] ParentPen
      * When true polygon uses the same Pen as its parentseries (Map)
               PROPERTY-GET, 6, @ParentPen
                       RETURNING "boolean", TYPE 11
      *[Class: @IMapPolygon] ParentPen
      * When true polygon uses the same Pen as its parentseries (Map)
               PROPERTY-PUT, 6, @ParentPen,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMapPolygon] Pen
      * Access to Map polygon shape Pen properties
               PROPERTY-GET, 7, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IMapPolygon] Text
      * Text string that labels the polygon
               PROPERTY-GET, 8, @Text
                       RETURNING "BSTR", TYPE 8
      *[Class: @IMapPolygon] Text
      * Text string that labels the polygon
               PROPERTY-PUT, 8, @Text,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IMapPolygon] Z
      * 3D MapSeries Z-axis position
               PROPERTY-GET, 9, @Z
                       RETURNING "double", TYPE 5
      *[Class: @IMapPolygon] Z
      * 3D MapSeries Z-axis position
               PROPERTY-PUT, 9, @Z,
                   "double (Property_Value)", TYPE 5
      *[Class: @IMapPolygon] AddXY
      * Adds a boundary co-ordinate to the polygon
               METHOD, 4, @AddXY,
                   "double" @X, TYPE 5,
                   "double" @Y, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IMapPolygon] Transparency
      * Percentage of transparency for the Poligon
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IMapPolygon] Transparency
      * Percentage of transparency for the Poligon
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMapPolygon] Visible
               METHOD, 203, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IMapPolygon] Closed
               PROPERTY-GET, 204, @Closed
                       RETURNING "boolean", TYPE 11
      *[Class: @IMapPolygon] Closed
               PROPERTY-PUT, 204, @Closed,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMapPolygon] GetPoints
      * Accesses to the Array or TPoint
               PROPERTY-GET, 202, @GetPoints
                       RETURNING "IPointArray*", TYPE 9
      *[Class: @IMapPolygon] Index
      * Gets Index
               PROPERTY-GET, 205, @Index
                       RETURNING "long", TYPE 3
      *[Class: @IMapPolygon] Index
      * Gets Index
               PROPERTY-PUT, 205, @Index,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMapPolygon] Active
               PROPERTY-GET, 206, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @IMapPolygon] Active
               PROPERTY-PUT, 206, @Active,
                   "boolean (Property_Value)", TYPE 11
           
      * Graphical representation of Funnel (Pipeline) chart
           
      * IFunnelSeries
           CLASS @IFunnelSeries
               CLSID, 5091D94F-A82C-46CA-B4B5-36B3A242CE01
               NAME, "IFunnelSeries"
      *[Class: @IFunnelSeries] AddSegment
      * Adds new Funnel segment to the Series
               METHOD, 1, @AddSegment,
                   "double" @AQuote, TYPE 5,
                   "double" @AOpportunity, TYPE 5,
                   "BSTR" @ALabel, TYPE 8,
                   "OLE_COLOR" @AColor, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IFunnelSeries] Recalc
      * Reconstructs the Funnel chart
               METHOD, 2, @Recalc
      *[Class: @IFunnelSeries] Brush
      * FunnelSeries Brush properties
               PROPERTY-GET, 3, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IFunnelSeries] Pen
      * FunnelSeries Brush properties
               PROPERTY-GET, 4, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IFunnelSeries] LinesPen
      * FunnelSeries bounding polygon pen properties
               PROPERTY-GET, 5, @LinesPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IFunnelSeries] AutoUpdate
      * When True FunnelSeries reconstructed with every added point
               PROPERTY-GET, 6, @AutoUpdate
                       RETURNING "boolean", TYPE 11
      *[Class: @IFunnelSeries] AutoUpdate
      * When True FunnelSeries reconstructed with every added point
               PROPERTY-PUT, 6, @AutoUpdate,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IFunnelSeries] QuotesSorted
      * When False will enable the internal sorting algorithm
               PROPERTY-GET, 7, @QuotesSorted
                       RETURNING "boolean", TYPE 11
      *[Class: @IFunnelSeries] QuotesSorted
      * When False will enable the internal sorting algorithm
               PROPERTY-PUT, 7, @QuotesSorted,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IFunnelSeries] DifferenceLimit
      * The difference used by the internal algorithm to define the Funnel 
               PROPERTY-GET, 8, @DifferenceLimit
                       RETURNING "double", TYPE 5
      *[Class: @IFunnelSeries] DifferenceLimit
      * The difference used by the internal algorithm to define the Funnel 
               PROPERTY-PUT, 8, @DifferenceLimit,
                   "double (Property_Value)", TYPE 5
      *[Class: @IFunnelSeries] AboveColor
      * Default vbGreen: Funnel segment colour
               PROPERTY-GET, 9, @AboveColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IFunnelSeries] AboveColor
      * Default vbGreen: Funnel segment colour
               PROPERTY-PUT, 9, @AboveColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IFunnelSeries] WithinColor
      * Default vbYellow: Funnel segment colour
               PROPERTY-GET, 10, @WithinColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IFunnelSeries] WithinColor
      * Default vbYellow: Funnel segment colour
               PROPERTY-PUT, 10, @WithinColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IFunnelSeries] BelowColor
      * Default vbRed: Funnel segment colour
               PROPERTY-GET, 11, @BelowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IFunnelSeries] BelowColor
      * Default vbRed: Funnel segment colour
               PROPERTY-PUT, 11, @BelowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IFunnelSeries] OpportunityValues
      * Accesses the opportunity values
               PROPERTY-GET, 12, @OpportunityValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IFunnelSeries] QuoteValues
      * Accesses the quote values
               PROPERTY-GET, 13, @QuoteValues
                       RETURNING "IValueList*", TYPE 9
           
      * Displays of grid-like calendar within Chart boundaries
           
      * ICalendarSeries
           CLASS @ICalendarSeries
               CLSID, A352571B-38DD-41F2-A511-E520C71683ED
               NAME, "ICalendarSeries"
      *[Class: @ICalendarSeries] Date
      * Sets date cell of Calendar grid
               PROPERTY-GET, 1, @Date
                       RETURNING "double", TYPE 5
      *[Class: @ICalendarSeries] Date
      * Sets date cell of Calendar grid
               PROPERTY-PUT, 1, @Date,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICalendarSeries] Days
      * Sets characteristics (Colour, Brush, etc) of day cells
               PROPERTY-GET, 2, @Days
                       RETURNING "ICalendarCell*", TYPE 9
      *[Class: @ICalendarSeries] Months
      * Sets characteristics of Month text header in upper cells
               PROPERTY-GET, 3, @Months
                       RETURNING "ICalendarCellUpper*", TYPE 9
      *[Class: @ICalendarSeries] Trailing
      * Sets characteristics of leading and trailing cells
               PROPERTY-GET, 4, @Trailing
                       RETURNING "ICalendarCell*", TYPE 9
      *[Class: @ICalendarSeries] Sunday
      * Sets characteristics of Sunday cells
               PROPERTY-GET, 5, @Sunday
                       RETURNING "ICalendarCell*", TYPE 9
      *[Class: @ICalendarSeries] Today
      * Sets cell characteristics on today's cell only
               PROPERTY-GET, 6, @Today
                       RETURNING "ICalendarCell*", TYPE 9
      *[Class: @ICalendarSeries] Weekdays
      * Sets characteristics of header cells that contain weekday names
               PROPERTY-GET, 7, @Weekdays
                       RETURNING "ICalendarCellUpper*", TYPE 9
      *[Class: @ICalendarSeries] NextMonth
      * Advances calendar display by one calendar month
               METHOD, 9, @NextMonth
      *[Class: @ICalendarSeries] PreviousMonth
      * Moves displayed Calendar month back by one month
               METHOD, 10, @PreviousMonth
      *[Class: @ICalendarSeries] RectCell
      * Returns rectangle at Column, Row location
               METHOD, 11, @RectCell,
                   "long" @Column, TYPE 3,
                   "long" @Row, TYPE 3
                       RETURNING "TeeRect", TYPE 0
      *[Class: @ICalendarSeries] Rows
      * Returns rowcount of Calendar grid
               METHOD, 12, @Rows
                       RETURNING "long", TYPE 3
      *[Class: @ICalendarSeries] SeriesRect
      * Returns rect of entire Grid display of Series
               METHOD, 13, @SeriesRect
                       RETURNING "TeeRect", TYPE 0
      *[Class: @ICalendarSeries] NextButtonVisible
      * Show/hide Button
               PROPERTY-GET, 8, @NextButtonVisible
                       RETURNING "boolean", TYPE 11
      *[Class: @ICalendarSeries] NextButtonVisible
      * Show/hide Button
               PROPERTY-PUT, 8, @NextButtonVisible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICalendarSeries] PreviousButtonVisible
      * Show/hide Button
               PROPERTY-GET, 14, @PreviousButtonVisible
                       RETURNING "boolean", TYPE 11
      *[Class: @ICalendarSeries] PreviousButtonVisible
      * Show/hide Button
               PROPERTY-PUT, 14, @PreviousButtonVisible,
                   "boolean (Property_Value)", TYPE 11
           
      * Type defines visible TeeCommander buttons
           
      * ETeeCommanderControls
           CLASS @ETeeCommanderControls
               CLSID, CD0F678C-C74D-4D2D-99CC-E31B5241CCE2
               NAME, "ETeeCommanderControls"
      * "long tcbNormal"
               ENUMERATOR, @tcbNormal, 0
      * "long tcbSeparator"
               ENUMERATOR, @tcbSeparator, 1
      * "long tcbRotate"
               ENUMERATOR, @tcbRotate, 2
      * "long tcbMove"
               ENUMERATOR, @tcbMove, 3
      * "long tcbZoom"
               ENUMERATOR, @tcbZoom, 4
      * "long tcbDepth"
               ENUMERATOR, @tcbDepth, 5
      * "long tcbEdit"
               ENUMERATOR, @tcbEdit, 6
      * "long tcbPrintPreview"
               ENUMERATOR, @tcbPrintPreview, 7
      * "long tcbCopy"
               ENUMERATOR, @tcbCopy, 8
      * "long tcbSave"
               ENUMERATOR, @tcbSave, 9
      * "long tcbLabel"
               ENUMERATOR, @tcbLabel, 10
      * "long tcb3D"
               ENUMERATOR, @tcb3D, 11
           
      * Contains characteristics of Calender Cell
           
      * ICalendarCell
           CLASS @ICalendarCell
               CLSID, C4D32B12-5691-47EC-9840-81C9A19F8EDE
               NAME, "ICalendarCell"
      *[Class: @ICalendarCell] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICalendarCell] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICalendarCell] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ICalendarCell] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ICalendarCell] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @ICalendarCell] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICalendarCell] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICalendarCell] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICalendarCell] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @ICalendarCell] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICalendarCell] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ICalendarCell] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @ICalendarCell] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ICalendarCell] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICalendarCell] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @ICalendarCell] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ICalendarCell] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ICalendarCell] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ICalendarCell] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICalendarCell] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @ICalendarCell] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ICalendarCell] Visible
      * Enables/disables visibility of cell
               PROPERTY-GET, 4, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @ICalendarCell] Visible
      * Enables/disables visibility of cell
               PROPERTY-PUT, 4, @Visible,
                   "boolean (Property_Value)", TYPE 11
           
      * Characteristics for the upper row cells of the CalendarSeries
           
      * ICalendarCellUpper
           CLASS @ICalendarCellUpper
               CLSID, 55310FFD-7B84-40FD-A847-3C91D2F2D3AA
               NAME, "ICalendarCellUpper"
      *[Class: @ICalendarCellUpper] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICalendarCellUpper] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICalendarCellUpper] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ICalendarCellUpper] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ICalendarCellUpper] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @ICalendarCellUpper] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICalendarCellUpper] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ICalendarCellUpper] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ICalendarCellUpper] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @ICalendarCellUpper] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICalendarCellUpper] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ICalendarCellUpper] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @ICalendarCellUpper] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ICalendarCellUpper] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICalendarCellUpper] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @ICalendarCellUpper] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ICalendarCellUpper] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ICalendarCellUpper] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ICalendarCellUpper] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICalendarCellUpper] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @ICalendarCellUpper] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ICalendarCellUpper] Visible
      * Enables/disables visibility of cell
               PROPERTY-GET, 4, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @ICalendarCellUpper] Visible
      * Enables/disables visibility of cell
               PROPERTY-PUT, 4, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICalendarCellUpper] Format
      * Returns standard Datetime format of Weekday labels
               PROPERTY-GET, 5, @Format
                       RETURNING "BSTR", TYPE 8
      *[Class: @ICalendarCellUpper] Format
      * Returns standard Datetime format of Weekday labels
               PROPERTY-PUT, 5, @Format,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ICalendarCellUpper] UpperCase
      * When True sets text to uppercase
               PROPERTY-GET, 6, @UpperCase
                       RETURNING "boolean", TYPE 11
      *[Class: @ICalendarCellUpper] UpperCase
      * When True sets text to uppercase
               PROPERTY-PUT, 6, @UpperCase,
                   "boolean (Property_Value)", TYPE 11
           
      * Tool to draw annotated labels on your Chart
           
      * IAnnotationTool
           CLASS @IAnnotationTool
               CLSID, E52C2A42-56C5-4EB7-B0C7-D39106344D87
               NAME, "IAnnotationTool"
      *[Class: @IAnnotationTool] Position
      * Defines the position of the text
               PROPERTY-GET, 2, @Position
                       RETURNING "EAnnotationPosition", TYPE 3
      *[Class: @IAnnotationTool] Position
      * Defines the position of the text
               PROPERTY-PUT, 2, @Position,
                   "EAnnotationPosition (Property_Value)", TYPE 3
      *[Class: @IAnnotationTool] Shape
      * Defines the shape of the text box
               PROPERTY-GET, 3, @Shape
                       RETURNING "ITeeShapePanel*", TYPE 9
      *[Class: @IAnnotationTool] Text
      * Annotation Tool text
               PROPERTY-GET, 4, @Text
                       RETURNING "BSTR", TYPE 8
      *[Class: @IAnnotationTool] Text
      * Annotation Tool text
               PROPERTY-PUT, 4, @Text,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IAnnotationTool] Callout
      * Defines properties used to draw line from the annotation to a position 
               PROPERTY-GET, 201, @Callout
                       RETURNING "IAnnotationCallout*", TYPE 9
      *[Class: @IAnnotationTool] TextAlignment
      * Determines horizontal alignment of text displayed inside the Annotation 
               PROPERTY-GET, 202, @TextAlignment
                       RETURNING "ETextAlignment", TYPE 3
      *[Class: @IAnnotationTool] TextAlignment
      * Determines horizontal alignment of text displayed inside the Annotation 
               PROPERTY-PUT, 202, @TextAlignment,
                   "ETextAlignment (Property_Value)", TYPE 3
      *[Class: @IAnnotationTool] Clicked
      * True when Annotation clicked
               METHOD, 203, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "boolean", TYPE 11
      *[Class: @IAnnotationTool] Width
      * Gets the Width of the Annotation
               PROPERTY-GET, 204, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationTool] Width
      * Gets the Width of the Annotation
               PROPERTY-PUT, 204, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationTool] Height
      * Gets the Height of the Annotation
               PROPERTY-GET, 205, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationTool] Height
      * Gets the Height of the Annotation
               PROPERTY-PUT, 205, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationTool] Cursor
      * Defines the Annotation cursor
               PROPERTY-GET, 206, @Cursor
                       RETURNING "short", TYPE 2
      *[Class: @IAnnotationTool] Cursor
      * Defines the Annotation cursor
               PROPERTY-PUT, 206, @Cursor,
                   "short (Property_Value)", TYPE 2
      *[Class: @IAnnotationTool] Left
               PROPERTY-GET, 207, @Left
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationTool] Left
               PROPERTY-PUT, 207, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationTool] Top
               PROPERTY-GET, 208, @Top
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationTool] Top
               PROPERTY-PUT, 208, @Top,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationTool] AutoSize
               PROPERTY-GET, 209, @AutoSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IAnnotationTool] AutoSize
               PROPERTY-PUT, 209, @AutoSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAnnotationTool] Bounds
               PROPERTY-GET, 210, @Bounds
                       RETURNING "TeeRect", TYPE 0
           
      * Annotation Tool default positions
           
      * EAnnotationPosition
           CLASS @EAnnotationPosition
               CLSID, 7C3725A7-E210-4D9C-BD88-2F2AFD4B988A
               NAME, "EAnnotationPosition"
      * "long ppLeftTop"
               ENUMERATOR, @ppLeftTop, 0
      * "long ppLeftBottom"
               ENUMERATOR, @ppLeftBottom, 1
      * "long ppRightTop"
               ENUMERATOR, @ppRightTop, 2
      * "long ppRightBottom"
               ENUMERATOR, @ppRightBottom, 3
           
      * Chart Legend attributes
           
      * ILegend
           CLASS @ILegend
               CLSID, 597B40F1-5659-4574-BB0C-F3CD3ECE6536
               NAME, "ILegend"
      *[Class: @ILegend] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ILegend] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ILegend] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ILegend] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ILegend] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ILegend] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ILegend] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegend] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ILegend] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @ILegend] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @ILegend] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ILegend] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ILegend] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @ILegend] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ILegend] CustomPosition
      * Set to True to permit custom positioning of Shape.
               PROPERTY-GET, 219, @CustomPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] CustomPosition
      * Set to True to permit custom positioning of Shape.
               PROPERTY-PUT, 219, @CustomPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegend] Left
      * Left position in pixels.
               PROPERTY-GET, 210, @Left
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] Left
      * Left position in pixels.
               PROPERTY-PUT, 210, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] Top
      * Top position in pixels.
               PROPERTY-GET, 211, @Top
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] Top
      * Top position in pixels.
               PROPERTY-PUT, 211, @Top,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] Alignment
      * Determines the Legend position
               PROPERTY-GET, 1, @Alignment
                       RETURNING "ELegendAlignment", TYPE 3
      *[Class: @ILegend] Alignment
      * Determines the Legend position
               PROPERTY-PUT, 1, @Alignment,
                   "ELegendAlignment (Property_Value)", TYPE 3
      *[Class: @ILegend] ColorWidth
      * Size of Legend coloured signs in percent of Legend width.
               PROPERTY-GET, 3, @ColorWidth
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] ColorWidth
      * Size of Legend coloured signs in percent of Legend width.
               PROPERTY-PUT, 3, @ColorWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] DividingLines
      * The Pen used to draw the Legend division lines
               PROPERTY-GET, 4, @DividingLines
                       RETURNING "IPen*", TYPE 9
      *[Class: @ILegend] FirstValue
      * Index of the first legend item to display
               PROPERTY-GET, 5, @FirstValue
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] FirstValue
      * Index of the first legend item to display
               PROPERTY-PUT, 5, @FirstValue,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] Frame
      * Pen used to draw the Legend border
               PROPERTY-GET, 7, @Frame
                       RETURNING "IPen*", TYPE 9
      *[Class: @ILegend] HorizMargin
      * Distance in pixels between the Legend and chart margin
               PROPERTY-GET, 8, @HorizMargin
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] HorizMargin
      * Distance in pixels between the Legend and chart margin
               PROPERTY-PUT, 8, @HorizMargin,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] Inverted
      * Draws items in inverted order
               PROPERTY-GET, 9, @Inverted
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] Inverted
      * Draws items in inverted order
               PROPERTY-PUT, 9, @Inverted,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegend] LegendStyle
      * Sets the Legend mode ( values or Series names )
               PROPERTY-GET, 10, @LegendStyle
                       RETURNING "ELegendStyle", TYPE 3
      *[Class: @ILegend] LegendStyle
      * Sets the Legend mode ( values or Series names )
               PROPERTY-PUT, 10, @LegendStyle,
                   "ELegendStyle (Property_Value)", TYPE 3
      *[Class: @ILegend] ResizeChart
      * The Chart is resized to fit the Legend
               PROPERTY-GET, 11, @ResizeChart
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] ResizeChart
      * The Chart is resized to fit the Legend
               PROPERTY-PUT, 11, @ResizeChart,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegend] TextStyle
      * Determines the Legend items formatting
               PROPERTY-GET, 14, @TextStyle
                       RETURNING "ELegendTextStyle", TYPE 3
      *[Class: @ILegend] TextStyle
      * Determines the Legend items formatting
               PROPERTY-PUT, 14, @TextStyle,
                   "ELegendTextStyle (Property_Value)", TYPE 3
      *[Class: @ILegend] TopPos
      * Vertical top position in percent of total Chart height
               PROPERTY-GET, 15, @TopPos
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] TopPos
      * Vertical top position in percent of total Chart height
               PROPERTY-PUT, 15, @TopPos,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] VertMargin
      * Distance between Legend and Chart margin
               PROPERTY-GET, 16, @VertMargin
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] VertMargin
      * Distance between Legend and Chart margin
               PROPERTY-PUT, 16, @VertMargin,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] Visible
      * Shows / Hides the Legend
               PROPERTY-GET, 17, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] Visible
      * Shows / Hides the Legend
               PROPERTY-PUT, 17, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegend] Formatted
      * Text of Legend Value for Active Series index
               METHOD, 48, @Formatted,
                   "long" @SomeSeriesOrValueIndex, TYPE 3
                       RETURNING "BSTR", TYPE 8
      *[Class: @ILegend] FormattedValue
      * Legend String display of a Series Point value
               METHOD, 49, @FormattedValue,
                   "long" @aSeries, TYPE 3,
                   "long" @SomeValueIndex, TYPE 3
                       RETURNING "BSTR", TYPE 8
      *[Class: @ILegend] Clicked
      * Returns Item index of clicked Legend item
               METHOD, 18, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] MaxNumRows
      * Number of rows for multiline Legend
               PROPERTY-GET, 19, @MaxNumRows
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] MaxNumRows
      * Number of rows for multiline Legend
               PROPERTY-PUT, 19, @MaxNumRows,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] BackImageLoad
      * Load Legend BackImage
               METHOD, 20, @BackImageLoad,
                   "BSTR" @FileName, TYPE 8
      *[Class: @ILegend] BackImageClear
      * Clear Legend BackImage
               METHOD, 21, @BackImageClear
      *[Class: @ILegend] Brush
      * Legend Brush
               PROPERTY-GET, 22, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ILegend] Series
      * Determines which series is used as data for the Legend entries.
               PROPERTY-GET, 26, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ILegend] Series
      * Determines which series is used as data for the Legend entries.
               PROPERTY-PUT, 26, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ILegend] DrawLegend
      * Use the DrawLegend method to draw multiple Legends on a Chart.
               METHOD, 27, @DrawLegend
      *[Class: @ILegend] FontSeriesColor
      * Sets color of the font of the legend text to that of the Series color.
               PROPERTY-GET, 28, @FontSeriesColor
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] FontSeriesColor
      * Sets color of the font of the legend text to that of the Series color.
               PROPERTY-PUT, 28, @FontSeriesColor,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegend] CurrentPage
      * Stipulates whether or not the Legend shows only the current page items
               PROPERTY-GET, 29, @CurrentPage
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] CurrentPage
      * Stipulates whether or not the Legend shows only the current page items
               PROPERTY-PUT, 29, @CurrentPage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegend] Symbol
      * Controls the width and position of the color Legend rectangle
               PROPERTY-GET, 30, @Symbol
                       RETURNING "ILegendSymbol*", TYPE 9
      *[Class: @ILegend] CheckBoxes
      * Enables/disables the display of Legend check boxes.
               PROPERTY-GET, 31, @CheckBoxes
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] CheckBoxes
      * Enables/disables the display of Legend check boxes.
               PROPERTY-PUT, 31, @CheckBoxes,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegend] ColumnWidthAuto
      * Disables/Enables automatic calculation of color Legend rectangle width.
               PROPERTY-GET, 32, @ColumnWidthAuto
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] ColumnWidthAuto
      * Disables/Enables automatic calculation of color Legend rectangle width.
               PROPERTY-PUT, 32, @ColumnWidthAuto,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegend] ColumnWidths
      * Sets width of color Legend rectangle.
               PROPERTY-GET, 33, @ColumnWidths,
                   "long" @Index, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] ColumnWidths
      * Sets width of color Legend rectangle.
               PROPERTY-PUT, 33, @ColumnWidths,
                   "long" @Index, TYPE 3,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] Vertspacing
      * Modifies vertical spacing between Legend items (pixels).
               PROPERTY-GET, 2, @Vertspacing
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] Vertspacing
      * Modifies vertical spacing between Legend items (pixels).
               PROPERTY-PUT, 2, @Vertspacing,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] Vertical
      * Returns True if the legend is left or right aligned.
               PROPERTY-GET, 6, @Vertical
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegend] ShowEditorLegend
      * Shows a dialog to modify the current legend properties.
               METHOD, 401, @ShowEditorLegend
      *[Class: @ILegend] Title
      * Title of the Legend
               PROPERTY-GET, 402, @Title
                       RETURNING "ILegendTitle*", TYPE 9
      *[Class: @ILegend] CheckBoxesStyle
               PROPERTY-GET, 403, @CheckBoxesStyle
                       RETURNING "ECheckBoxesStyle", TYPE 3
      *[Class: @ILegend] CheckBoxesStyle
               PROPERTY-PUT, 403, @CheckBoxesStyle,
                   "ECheckBoxesStyle (Property_Value)", TYPE 3
      *[Class: @ILegend] LastValue
      * Index of the Last legend item to display
               PROPERTY-GET, 404, @LastValue
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] PositionUnits
      * Can be positioned at a Left or Top percentage of chart size
               PROPERTY-GET, 405, @PositionUnits
                       RETURNING "EPositionUnits", TYPE 3
      *[Class: @ILegend] PositionUnits
      * Can be positioned at a Left or Top percentage of chart size
               PROPERTY-PUT, 405, @PositionUnits,
                   "EPositionUnits (Property_Value)", TYPE 3
      *[Class: @ILegend] LeftPercent
               PROPERTY-GET, 406, @LeftPercent
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] LeftPercent
               PROPERTY-PUT, 406, @LeftPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] TopPercent
               PROPERTY-GET, 407, @TopPercent
                       RETURNING "long", TYPE 3
      *[Class: @ILegend] TopPercent
               PROPERTY-PUT, 407, @TopPercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegend] Item
               PROPERTY-GET, 408, @Item,
                   "long" @Index, TYPE 3
                       RETURNING "ILegendItem*", TYPE 9
      *[Class: @ILegend] Items
               PROPERTY-GET, 409, @Items
                       RETURNING "ILegendItems*", TYPE 9
           
      * Indicates the page number of a multi-page Chart
           
      * IPageNumTool
           CLASS @IPageNumTool
               CLSID, 2B608D11-8723-4DD7-A070-CC88D203D63D
               NAME, "IPageNumTool"
      *[Class: @IPageNumTool] Position
      * Defines the position of the text
               PROPERTY-GET, 2, @Position
                       RETURNING "EAnnotationPosition", TYPE 3
      *[Class: @IPageNumTool] Position
      * Defines the position of the text
               PROPERTY-PUT, 2, @Position,
                   "EAnnotationPosition (Property_Value)", TYPE 3
      *[Class: @IPageNumTool] Shape
      * Defines the shape of the text box
               PROPERTY-GET, 3, @Shape
                       RETURNING "ITeeShapePanel*", TYPE 9
      *[Class: @IPageNumTool] Text
      * Annotation Tool text
               PROPERTY-GET, 4, @Text
                       RETURNING "BSTR", TYPE 8
      *[Class: @IPageNumTool] Text
      * Annotation Tool text
               PROPERTY-PUT, 4, @Text,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IPageNumTool] Callout
      * Defines properties used to draw line from the annotation to a position 
               PROPERTY-GET, 201, @Callout
                       RETURNING "IAnnotationCallout*", TYPE 9
      *[Class: @IPageNumTool] TextAlignment
      * Determines horizontal alignment of text displayed inside the Annotation 
               PROPERTY-GET, 202, @TextAlignment
                       RETURNING "ETextAlignment", TYPE 3
      *[Class: @IPageNumTool] TextAlignment
      * Determines horizontal alignment of text displayed inside the Annotation 
               PROPERTY-PUT, 202, @TextAlignment,
                   "ETextAlignment (Property_Value)", TYPE 3
      *[Class: @IPageNumTool] Clicked
      * True when Annotation clicked
               METHOD, 203, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "boolean", TYPE 11
      *[Class: @IPageNumTool] Width
      * Gets the Width of the Annotation
               PROPERTY-GET, 204, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IPageNumTool] Width
      * Gets the Width of the Annotation
               PROPERTY-PUT, 204, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPageNumTool] Height
      * Gets the Height of the Annotation
               PROPERTY-GET, 205, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IPageNumTool] Height
      * Gets the Height of the Annotation
               PROPERTY-PUT, 205, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPageNumTool] Cursor
      * Defines the Annotation cursor
               PROPERTY-GET, 206, @Cursor
                       RETURNING "short", TYPE 2
      *[Class: @IPageNumTool] Cursor
      * Defines the Annotation cursor
               PROPERTY-PUT, 206, @Cursor,
                   "short (Property_Value)", TYPE 2
      *[Class: @IPageNumTool] Left
               PROPERTY-GET, 207, @Left
                       RETURNING "long", TYPE 3
      *[Class: @IPageNumTool] Left
               PROPERTY-PUT, 207, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPageNumTool] Top
               PROPERTY-GET, 208, @Top
                       RETURNING "long", TYPE 3
      *[Class: @IPageNumTool] Top
               PROPERTY-PUT, 208, @Top,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPageNumTool] AutoSize
               PROPERTY-GET, 209, @AutoSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IPageNumTool] AutoSize
               PROPERTY-PUT, 209, @AutoSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPageNumTool] Bounds
               PROPERTY-GET, 210, @Bounds
                       RETURNING "TeeRect", TYPE 0
      *[Class: @IPageNumTool] Format
      * Text format
               PROPERTY-GET, 6, @Format
                       RETURNING "BSTR", TYPE 8
      *[Class: @IPageNumTool] Format
      * Text format
               PROPERTY-PUT, 6, @Format,
                   "BSTR (Property_Value)", TYPE 8
           
      * It represents the base interface to feed series from some sort of 
           
      * ISeriesSource
           CLASS @ISeriesSource
               CLSID, 52A5198C-3766-40CB-B0B0-BCCA9B267A1F
               NAME, "ISeriesSource"
      *[Class: @ISeriesSource] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ISeriesSource] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeriesSource] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ISeriesSource] Open
      * Sets Active True (internally calling Load method).
               METHOD, 301, @Open
      *[Class: @ISeriesSource] Close
      * Disconnects the Series from the data.
               METHOD, 302, @Close
      *[Class: @ISeriesSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-GET, 303, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeriesSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-PUT, 303, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeriesSource] Series
      * Series to receive source data.
               PROPERTY-GET, 304, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISeriesSource] Series
      * Series to receive source data.
               PROPERTY-PUT, 304, @Series,
                   "VARIANT (Property_Value)", TYPE 12
           
      * It represents the base interface to feed series from a file.
           
      * ISeriesSourceFile
           CLASS @ISeriesSourceFile
               CLSID, 6CD80043-61DA-4802-B04A-6BC028D4847C
               NAME, "ISeriesSourceFile"
      *[Class: @ISeriesSourceFile] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ISeriesSourceFile] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeriesSourceFile] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ISeriesSourceFile] Open
      * Sets Active True (internally calling Load method).
               METHOD, 301, @Open
      *[Class: @ISeriesSourceFile] Close
      * Disconnects the Series from the data.
               METHOD, 302, @Close
      *[Class: @ISeriesSourceFile] Active
      * Activates/deactivates the Series Source.
               PROPERTY-GET, 303, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeriesSourceFile] Active
      * Activates/deactivates the Series Source.
               PROPERTY-PUT, 303, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeriesSourceFile] Series
      * Series to receive source data.
               PROPERTY-GET, 304, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISeriesSourceFile] Series
      * Series to receive source data.
               PROPERTY-PUT, 304, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ISeriesSourceFile] Load
      * Calls the underlying LoadFromFile or LoadFromURL methods.
               METHOD, 401, @Load
      *[Class: @ISeriesSourceFile] LoadFromFile
      * Loads data from a text file
               METHOD, 402, @LoadFromFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @ISeriesSourceFile] LoadFromURL
      * Loads data from a URL
               METHOD, 403, @LoadFromURL,
                   "BSTR" @URL, TYPE 8
      *[Class: @ISeriesSourceFile] FileName
      * Defines the file name of the input data source file.
               PROPERTY-GET, 404, @FileName
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeriesSourceFile] FileName
      * Defines the file name of the input data source file.
               PROPERTY-PUT, 404, @FileName,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeriesSourceFile] LoadMode
               PROPERTY-GET, 405, @LoadMode
                       RETURNING "ELoadMode", TYPE 3
      *[Class: @ISeriesSourceFile] LoadMode
               PROPERTY-PUT, 405, @LoadMode,
                   "ELoadMode (Property_Value)", TYPE 3
           
      * Collection of the SeriesTextSource fields
           
      * ISeriesTextFields
           CLASS @ISeriesTextFields
               CLSID, F2B2FA5A-5525-420C-ACDF-B98FF29C1C2C
               NAME, "ISeriesTextFields"
      *[Class: @ISeriesTextFields] Items
      * Accesses each Field by index
               PROPERTY-GET, 1, @Items,
                   "long" @Index, TYPE 3
                       RETURNING "ISeriesTextField*", TYPE 9
      *[Class: @ISeriesTextFields] Clear
      * Empties the Items array
               METHOD, 2, @Clear
      *[Class: @ISeriesTextFields] Delete
      * Removes the collection item specified
               METHOD, 3, @Delete,
                   "long" @Index, TYPE 3
      *[Class: @ISeriesTextFields] Count
      * Returns the number of Text fields
               PROPERTY-GET, 4, @Count
                       RETURNING "long", TYPE 3
           
      * Contains the list of characteristics of the Field
           
      * ISeriesTextField
           CLASS @ISeriesTextField
               CLSID, 1DE0BDC2-CAEF-4ABF-963F-C5DA79188F23
               NAME, "ISeriesTextField"
      *[Class: @ISeriesTextField] FieldIndex
      * Returns index of Field
               PROPERTY-GET, 1, @FieldIndex
                       RETURNING "long", TYPE 3
      *[Class: @ISeriesTextField] FieldIndex
      * Returns index of Field
               PROPERTY-PUT, 1, @FieldIndex,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeriesTextField] FieldName
      * Defines the name of a new field
               PROPERTY-GET, 2, @FieldName
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeriesTextField] FieldName
      * Defines the name of a new field
               PROPERTY-PUT, 2, @FieldName,
                   "BSTR (Property_Value)", TYPE 8
           
      * TeeChart ChartGrid v7
           
      * ChartGrid
           CLASS @ChartGrid
               CLSID, D8781BD9-913B-49E5-8312-438F2159B91C
               NAME, "ChartGrid"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "IChartGrid"
               DEFAULT-SOURCE, "4FDFD2C6-B512-4A50-B2F3-E838CD0528FB"
      *[Class: @ChartGrid] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ChartGrid] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ChartGrid] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ChartGrid] Col
      * Deprecated - use Cols
               PROPERTY-GET, 2, @Col
                       RETURNING "long", TYPE 3
      *[Class: @ChartGrid] Col
      * Deprecated - use Cols
               PROPERTY-PUT, 2, @Col,
                   "long (Property_Value)", TYPE 3
      *[Class: @ChartGrid] ColCount
      * Deprecated - use Cols
               PROPERTY-GET, 3, @ColCount
                       RETURNING "long", TYPE 3
      *[Class: @ChartGrid] Colwidths
      * Deprecated - use Cols
               PROPERTY-GET, 4, @Colwidths,
                   "long" @Index, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ChartGrid] Colwidths
      * Deprecated - use Cols
               PROPERTY-PUT, 4, @Colwidths,
                   "long" @Index, TYPE 3,
                   "long (Property_Value)", TYPE 3
      *[Class: @ChartGrid] EditorMode
      * Determines whether the current cell can be edited.
               PROPERTY-GET, 5, @EditorMode
                       RETURNING "boolean", TYPE 11
      *[Class: @ChartGrid] EditorMode
      * Determines whether the current cell can be edited.
               PROPERTY-PUT, 5, @EditorMode,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ChartGrid] GridHeight
      * Specifies the height of the grid in pixels.
               PROPERTY-GET, 6, @GridHeight
                       RETURNING "long", TYPE 3
      *[Class: @ChartGrid] GridWidth
      * Specifies the width of the grid in pixels.
               PROPERTY-GET, 7, @GridWidth
                       RETURNING "long", TYPE 3
      *[Class: @ChartGrid] LeftCol
      * Specifies the index of the first visible scrollable column in the grid.
               PROPERTY-GET, 8, @LeftCol
                       RETURNING "long", TYPE 3
      *[Class: @ChartGrid] LeftCol
      * Specifies the index of the first visible scrollable column in the grid.
               PROPERTY-PUT, 8, @LeftCol,
                   "long (Property_Value)", TYPE 3
      *[Class: @ChartGrid] GridLink
      * Used to link ChartGrid to ChartGridNavigator in some environments
               PROPERTY-GET, 9, @GridLink
                       RETURNING "long", TYPE 3
      *[Class: @ChartGrid] RecalcDimensions
      * Recalculate Grid dimensions is called automatically by TeeChart.
               METHOD, 10, @RecalcDimensions
      *[Class: @ChartGrid] ShowLabels
      * Use ShowLabels property to show/hide the series labels in the grid.
               PROPERTY-GET, 11, @ShowLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @ChartGrid] ShowLabels
      * Use ShowLabels property to show/hide the series labels in the grid.
               PROPERTY-PUT, 11, @ShowLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ChartGrid] ShowColors
      * Show/hide value colours
               PROPERTY-GET, 12, @ShowColors
                       RETURNING "boolean", TYPE 11
      *[Class: @ChartGrid] ShowColors
      * Show/hide value colours
               PROPERTY-PUT, 12, @ShowColors,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ChartGrid] ShowFields
      * Show/hide title fields
               PROPERTY-GET, 13, @ShowFields
                       RETURNING "boolean", TYPE 11
      *[Class: @ChartGrid] ShowFields
      * Show/hide title fields
               PROPERTY-PUT, 13, @ShowFields,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ChartGrid] Cols
      * Access ChartGrid Column collection
               METHOD, 19, @Cols
                       RETURNING "IChartGridCols*", TYPE 9
      *[Class: @ChartGrid] Rows
      * Access ChartGrid Row collection
               METHOD, 20, @Rows
                       RETURNING "IChartGridRows*", TYPE 9
      *[Class: @ChartGrid] DefaultColWidth
      * Default value for the grid column width.
               PROPERTY-GET, 301, @DefaultColWidth
                       RETURNING "long", TYPE 3
      *[Class: @ChartGrid] DefaultColWidth
      * Default value for the grid column width.
               PROPERTY-PUT, 301, @DefaultColWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ChartGrid] Grid3DMode
      * If true, the number of rows will be the NumXValues property, and the 
               PROPERTY-GET, 302, @Grid3DMode
                       RETURNING "boolean", TYPE 11
      *[Class: @ChartGrid] Grid3DMode
      * If true, the number of rows will be the NumXValues property, and the 
               PROPERTY-PUT, 302, @Grid3DMode,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ChartGrid] LabelHeader
      * Get the Header text of the Point Label
               PROPERTY-GET, 303, @LabelHeader
                       RETURNING "BSTR", TYPE 8
      *[Class: @ChartGrid] LabelHeader
      * Get the Header text of the Point Label
               PROPERTY-PUT, 303, @LabelHeader,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ChartGrid] OnClick
      * Called upon clicking ChartGrid.
               EVENT, 1, @ChartGridOnClick
      *            No Parameters
           
      * Types for Series Datasource when ADO sourced
           
      * EDatasourceType
           CLASS @EDatasourceType
               CLSID, E557BC85-EFE4-46DB-B80A-83B43FA4CC26
               NAME, "EDatasourceType"
      * "long dstAllRecords"
               ENUMERATOR, @dstAllRecords, 0
      * "long dstSingleRecord"
               ENUMERATOR, @dstSingleRecord, 1
           
      * List of Series IValueLists
           
      * IValueLists
           CLASS @IValueLists
               CLSID, 9B4D7621-BDC1-4DB9-B670-0521EDE7A750
               NAME, "IValueLists"
      *[Class: @IValueLists] Count
      * Return list count
               PROPERTY-GET, 1, @Count
                       RETURNING "long", TYPE 3
      *[Class: @IValueLists] Items
      * IValuelists by index
               PROPERTY-GET, 2, @Items,
                   "long" @Index, TYPE 3
                       RETURNING "IValueList*", TYPE 9
           
      * Shape characteristics
           
      * ITeeShapePanel
           CLASS @ITeeShapePanel
               CLSID, BE016FD0-87A5-4E86-894F-B78FC8627BB4
               NAME, "ITeeShapePanel"
      *[Class: @ITeeShapePanel] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeShapePanel] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeShapePanel] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ITeeShapePanel] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ITeeShapePanel] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePanel] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShapePanel] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeShapePanel] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeShapePanel] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeShapePanel] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeShapePanel] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ITeeShapePanel] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @ITeeShapePanel] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePanel] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShapePanel] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @ITeeShapePanel] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ITeeShapePanel] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ITeeShapePanel] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePanel] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShapePanel] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @ITeeShapePanel] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ITeeShapePanel] CustomPosition
      * Set to True to permit custom positioning of Shape.
               PROPERTY-GET, 219, @CustomPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @ITeeShapePanel] CustomPosition
      * Set to True to permit custom positioning of Shape.
               PROPERTY-PUT, 219, @CustomPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITeeShapePanel] Left
      * Left position in pixels.
               PROPERTY-GET, 210, @Left
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePanel] Left
      * Left position in pixels.
               PROPERTY-PUT, 210, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShapePanel] Top
      * Top position in pixels.
               PROPERTY-GET, 211, @Top
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShapePanel] Top
      * Top position in pixels.
               PROPERTY-PUT, 211, @Top,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShapePanel] Frame
      * Frame Pen
               PROPERTY-GET, 2, @Frame
                       RETURNING "IPen*", TYPE 9
           
      * IChartGridRows
           CLASS @IChartGridRows
               CLSID, A6ED8F33-B795-474D-99EE-D67F76AB2B86
               NAME, "IChartGridRows"
      *[Class: @IChartGridRows] Row
      * Specifies the index of the row that contains the selected cell.
               PROPERTY-GET, 14, @Row
                       RETURNING "long", TYPE 3
      *[Class: @IChartGridRows] Row
      * Specifies the index of the row that contains the selected cell.
               PROPERTY-PUT, 14, @Row,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartGridRows] Count
      * Returns count of rows in Grid
               PROPERTY-GET, 18, @Count
                       RETURNING "long", TYPE 3
      *[Class: @IChartGridRows] Heights
      * Height of indexed Row
               PROPERTY-GET, 1, @Heights,
                   "long" @Index, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IChartGridRows] Heights
      * Height of indexed Row
               PROPERTY-PUT, 1, @Heights,
                   "long" @Index, TYPE 3,
                   "long (Property_Value)", TYPE 3
           
      * IChartGridCols
           CLASS @IChartGridCols
               CLSID, 77B0FF2B-EA2D-4176-851D-4F39DA8AA4C6
               NAME, "IChartGridCols"
      *[Class: @IChartGridCols] Col
      * Specifies the index of the column that contains the selected cell.
               PROPERTY-GET, 2, @Col
                       RETURNING "long", TYPE 3
      *[Class: @IChartGridCols] Col
      * Specifies the index of the column that contains the selected cell.
               PROPERTY-PUT, 2, @Col,
                   "long (Property_Value)", TYPE 3
      *[Class: @IChartGridCols] Count
      * Specifies the number of columns in the grid.
               PROPERTY-GET, 3, @Count
                       RETURNING "long", TYPE 3
      *[Class: @IChartGridCols] Widths
      * Indicates the width (in pixels) of all the columns in the grid.
               PROPERTY-GET, 4, @Widths,
                   "long" @Index, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IChartGridCols] Widths
      * Indicates the width (in pixels) of all the columns in the grid.
               PROPERTY-PUT, 4, @Widths,
                   "long" @Index, TYPE 3,
                   "long (Property_Value)", TYPE 3
           
      * Style to draw 'end of line' Pen
           
      * EPenEndStyle
           CLASS @EPenEndStyle
               CLSID, 8C06F379-64F7-4C27-B89E-37750378C915
               NAME, "EPenEndStyle"
      * "long esRound"
               ENUMERATOR, @esRound, 0
      * "long esSquare"
               ENUMERATOR, @esSquare, 1
      * "long esFlat"
               ENUMERATOR, @esFlat, 2
           
      * Individual axis label attributes
           
      * IAxisLabelsItem
           CLASS @IAxisLabelsItem
               CLSID, 81B6D658-9B3D-45B4-9BAB-8CC6ABB596B1
               NAME, "IAxisLabelsItem"
      *[Class: @IAxisLabelsItem] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IAxisLabelsItem] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IAxisLabelsItem] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @IAxisLabelsItem] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IAxisLabelsItem] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabelsItem] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisLabelsItem] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IAxisLabelsItem] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IAxisLabelsItem] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisLabelsItem] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAxisLabelsItem] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @IAxisLabelsItem] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @IAxisLabelsItem] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabelsItem] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisLabelsItem] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @IAxisLabelsItem] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @IAxisLabelsItem] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @IAxisLabelsItem] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @IAxisLabelsItem] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAxisLabelsItem] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @IAxisLabelsItem] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IAxisLabelsItem] Value
      * Position in axis scales where to display the axis label
               PROPERTY-GET, 301, @Value
                       RETURNING "double", TYPE 5
      *[Class: @IAxisLabelsItem] Value
      * Position in axis scales where to display the axis label
               PROPERTY-PUT, 301, @Value,
                   "double (Property_Value)", TYPE 5
      *[Class: @IAxisLabelsItem] Text
      * Text to display as axis label at specified Value position
               PROPERTY-GET, 302, @Text
                       RETURNING "BSTR", TYPE 8
      *[Class: @IAxisLabelsItem] Text
      * Text to display as axis label at specified Value position
               PROPERTY-PUT, 302, @Text,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IAxisLabelsItem] Visible
      * Make visible/invisible the custom axis labels
               PROPERTY-GET, 303, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisLabelsItem] Visible
      * Make visible/invisible the custom axis labels
               PROPERTY-PUT, 303, @Visible,
                   "boolean (Property_Value)", TYPE 11
           
      * Specifies the units used to display the margins
           
      * EMarginUnits
           CLASS @EMarginUnits
               CLSID, 67EBF0C2-7490-406D-8064-4E416CF41763
               NAME, "EMarginUnits"
      * "long muPercent"
               ENUMERATOR, @muPercent, 0
      * "long muPixels"
               ENUMERATOR, @muPixels, 1
           
      * Specifies the axis position for the color line tool
           
      * EColorLineStyle
           CLASS @EColorLineStyle
               CLSID, CB086368-0736-4873-9725-EFFE353F11AA
               NAME, "EColorLineStyle"
      * "long clCustom"
               ENUMERATOR, @clCustom, 0
      * "long clMaximum"
               ENUMERATOR, @clMaximum, 1
      * "long clCenter"
               ENUMERATOR, @clCenter, 2
      * "long clMinimum"
               ENUMERATOR, @clMinimum, 3
           
      * Specifies the "arrow head" shape at the end of the callout line
           
      * EArrowHeadStyle
           CLASS @EArrowHeadStyle
               CLSID, 51C7C8F0-6478-4217-8B78-C8A776F0AFAA
               NAME, "EArrowHeadStyle"
      * "long ahNone"
               ENUMERATOR, @ahNone, 0
      * "long ahLine"
               ENUMERATOR, @ahLine, 1
      * "long ahSolid"
               ENUMERATOR, @ahSolid, 2
           
      * Defines callout line attributes
           
      * ICallout
           CLASS @ICallout
               CLSID, B00102FE-67E1-4DEA-B9D4-88FE7432DB09
               NAME, "ICallout"
      *[Class: @ICallout] Brush
      * The brush used to fill point markers
               PROPERTY-GET, 1, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ICallout] Draw3D
      * When True, and Style is rectangle, point markers draw a cube
               PROPERTY-GET, 2, @Draw3D
                       RETURNING "boolean", TYPE 11
      *[Class: @ICallout] Draw3D
      * When True, and Style is rectangle, point markers draw a cube
               PROPERTY-PUT, 2, @Draw3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICallout] HorizontalSize
      * The horizontal size in pixels of each point marker
               PROPERTY-GET, 3, @HorizontalSize
                       RETURNING "long", TYPE 3
      *[Class: @ICallout] HorizontalSize
      * The horizontal size in pixels of each point marker
               PROPERTY-PUT, 3, @HorizontalSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICallout] VerticalSize
      * The vertical size in pixels of each point marker
               PROPERTY-GET, 4, @VerticalSize
                       RETURNING "long", TYPE 3
      *[Class: @ICallout] VerticalSize
      * The vertical size in pixels of each point marker
               PROPERTY-PUT, 4, @VerticalSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICallout] InflateMargins
      * When True, axis are expanded to leave space for point markers
               PROPERTY-GET, 5, @InflateMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @ICallout] InflateMargins
      * When True, axis are expanded to leave space for point markers
               PROPERTY-PUT, 5, @InflateMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICallout] Pen
      * The pen used to draw the point marker borders
               PROPERTY-GET, 6, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICallout] Style
      * The point markers style (rectangle, triangle, etc)
               PROPERTY-GET, 7, @Style
                       RETURNING "EPointerStyle", TYPE 3
      *[Class: @ICallout] Style
      * The point markers style (rectangle, triangle, etc)
               PROPERTY-PUT, 7, @Style,
                   "EPointerStyle (Property_Value)", TYPE 3
      *[Class: @ICallout] Visible
      * Shows / hides the point markers
               PROPERTY-GET, 8, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @ICallout] Visible
      * Shows / hides the point markers
               PROPERTY-PUT, 8, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICallout] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @ICallout] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICallout] DrawPointer
      * Displays a pointer at the specified position and size
               METHOD, 9, @DrawPointer,
                   "long" @DC, TYPE 3,
                   "boolean" @Is3D, TYPE 11,
                   "long" @px, TYPE 3,
                   "long" @py, TYPE 3,
                   "long" @tmpHoriz, TYPE 3,
                   "long" @tmpVert, TYPE 3,
                   "OLE_COLOR" @AColor, TYPE 19,
                   "EPointerStyle" @AStyle, TYPE 3
      *[Class: @ICallout] Gradient
      * Gradient used to fill pointer interior
               PROPERTY-GET, 2101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ICallout] Transparency
      * % Transparency for Pointer
               PROPERTY-GET, 2201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ICallout] Transparency
      * % Transparency for Pointer
               PROPERTY-PUT, 2201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICallout] Arrow
      * Pen used to draw the line connecting the annotation and the chart point
               PROPERTY-GET, 201, @Arrow
                       RETURNING "IPen*", TYPE 9
      *[Class: @ICallout] ArrowHead
      * Determines if callout line will display an "arrow" head at the end or 
               PROPERTY-GET, 202, @ArrowHead
                       RETURNING "EArrowHeadStyle", TYPE 3
      *[Class: @ICallout] ArrowHead
      * Determines if callout line will display an "arrow" head at the end or 
               PROPERTY-PUT, 202, @ArrowHead,
                   "EArrowHeadStyle (Property_Value)", TYPE 3
      *[Class: @ICallout] ArrowHeadSize
      * Size in pixels to display the arrow head at the end of the callout line
               PROPERTY-GET, 203, @ArrowHeadSize
                       RETURNING "long", TYPE 3
      *[Class: @ICallout] ArrowHeadSize
      * Size in pixels to display the arrow head at the end of the callout line
               PROPERTY-PUT, 203, @ArrowHeadSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICallout] Distance
      * Length in pixels between chart point and the line connecting annotation
               PROPERTY-GET, 204, @Distance
                       RETURNING "long", TYPE 3
      *[Class: @ICallout] Distance
      * Length in pixels between chart point and the line connecting annotation
               PROPERTY-PUT, 204, @Distance,
                   "long (Property_Value)", TYPE 3
           
      * Defines properties used to draw line from the annotation to a position 
           
      * IAnnotationCallout
           CLASS @IAnnotationCallout
               CLSID, 8619575E-C181-44BF-BEFC-495CD15942DE
               NAME, "IAnnotationCallout"
      *[Class: @IAnnotationCallout] Brush
      * The brush used to fill point markers
               PROPERTY-GET, 1, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IAnnotationCallout] Draw3D
      * When True, and Style is rectangle, point markers draw a cube
               PROPERTY-GET, 2, @Draw3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IAnnotationCallout] Draw3D
      * When True, and Style is rectangle, point markers draw a cube
               PROPERTY-PUT, 2, @Draw3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAnnotationCallout] HorizontalSize
      * The horizontal size in pixels of each point marker
               PROPERTY-GET, 3, @HorizontalSize
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationCallout] HorizontalSize
      * The horizontal size in pixels of each point marker
               PROPERTY-PUT, 3, @HorizontalSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationCallout] VerticalSize
      * The vertical size in pixels of each point marker
               PROPERTY-GET, 4, @VerticalSize
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationCallout] VerticalSize
      * The vertical size in pixels of each point marker
               PROPERTY-PUT, 4, @VerticalSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationCallout] InflateMargins
      * When True, axis are expanded to leave space for point markers
               PROPERTY-GET, 5, @InflateMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IAnnotationCallout] InflateMargins
      * When True, axis are expanded to leave space for point markers
               PROPERTY-PUT, 5, @InflateMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAnnotationCallout] Pen
      * The pen used to draw the point marker borders
               PROPERTY-GET, 6, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAnnotationCallout] Style
      * The point markers style (rectangle, triangle, etc)
               PROPERTY-GET, 7, @Style
                       RETURNING "EPointerStyle", TYPE 3
      *[Class: @IAnnotationCallout] Style
      * The point markers style (rectangle, triangle, etc)
               PROPERTY-PUT, 7, @Style,
                   "EPointerStyle (Property_Value)", TYPE 3
      *[Class: @IAnnotationCallout] Visible
      * Shows / hides the point markers
               PROPERTY-GET, 8, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IAnnotationCallout] Visible
      * Shows / hides the point markers
               PROPERTY-PUT, 8, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAnnotationCallout] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IAnnotationCallout] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IAnnotationCallout] DrawPointer
      * Displays a pointer at the specified position and size
               METHOD, 9, @DrawPointer,
                   "long" @DC, TYPE 3,
                   "boolean" @Is3D, TYPE 11,
                   "long" @px, TYPE 3,
                   "long" @py, TYPE 3,
                   "long" @tmpHoriz, TYPE 3,
                   "long" @tmpVert, TYPE 3,
                   "OLE_COLOR" @AColor, TYPE 19,
                   "EPointerStyle" @AStyle, TYPE 3
      *[Class: @IAnnotationCallout] Gradient
      * Gradient used to fill pointer interior
               PROPERTY-GET, 2101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IAnnotationCallout] Transparency
      * % Transparency for Pointer
               PROPERTY-GET, 2201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationCallout] Transparency
      * % Transparency for Pointer
               PROPERTY-PUT, 2201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationCallout] Arrow
      * Pen used to draw the line connecting the annotation and the chart point
               PROPERTY-GET, 201, @Arrow
                       RETURNING "IPen*", TYPE 9
      *[Class: @IAnnotationCallout] ArrowHead
      * Determines if callout line will display an "arrow" head at the end or 
               PROPERTY-GET, 202, @ArrowHead
                       RETURNING "EArrowHeadStyle", TYPE 3
      *[Class: @IAnnotationCallout] ArrowHead
      * Determines if callout line will display an "arrow" head at the end or 
               PROPERTY-PUT, 202, @ArrowHead,
                   "EArrowHeadStyle (Property_Value)", TYPE 3
      *[Class: @IAnnotationCallout] ArrowHeadSize
      * Size in pixels to display the arrow head at the end of the callout line
               PROPERTY-GET, 203, @ArrowHeadSize
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationCallout] ArrowHeadSize
      * Size in pixels to display the arrow head at the end of the callout line
               PROPERTY-PUT, 203, @ArrowHeadSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationCallout] Distance
      * Length in pixels between chart point and the line connecting annotation
               PROPERTY-GET, 204, @Distance
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationCallout] Distance
      * Length in pixels between chart point and the line connecting annotation
               PROPERTY-PUT, 204, @Distance,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationCallout] XPosition
      * X pixel coordinate of ending point of the annotation callout line
               PROPERTY-GET, 301, @XPosition
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationCallout] XPosition
      * X pixel coordinate of ending point of the annotation callout line
               PROPERTY-PUT, 301, @XPosition,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationCallout] YPosition
      * Y pixel coordinate of ending point of the annotation callout line
               PROPERTY-GET, 302, @YPosition
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationCallout] YPosition
      * Y pixel coordinate of ending point of the annotation callout line
               PROPERTY-PUT, 302, @YPosition,
                   "long (Property_Value)", TYPE 3
      *[Class: @IAnnotationCallout] ZPosition
      * Z pixel coordinate of ending point of the annotation callout line
               PROPERTY-GET, 303, @ZPosition
                       RETURNING "long", TYPE 3
      *[Class: @IAnnotationCallout] ZPosition
      * Z pixel coordinate of ending point of the annotation callout line
               PROPERTY-PUT, 303, @ZPosition,
                   "long (Property_Value)", TYPE 3
           
      * Defines properties used to draw line from the mark to the serie value
           
      * IMarksCallout
           CLASS @IMarksCallout
               CLSID, AB8D34F6-F4A9-45EF-9BAE-079940CAEBBD
               NAME, "IMarksCallout"
      *[Class: @IMarksCallout] Brush
      * The brush used to fill point markers
               PROPERTY-GET, 1, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IMarksCallout] Draw3D
      * When True, and Style is rectangle, point markers draw a cube
               PROPERTY-GET, 2, @Draw3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IMarksCallout] Draw3D
      * When True, and Style is rectangle, point markers draw a cube
               PROPERTY-PUT, 2, @Draw3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMarksCallout] HorizontalSize
      * The horizontal size in pixels of each point marker
               PROPERTY-GET, 3, @HorizontalSize
                       RETURNING "long", TYPE 3
      *[Class: @IMarksCallout] HorizontalSize
      * The horizontal size in pixels of each point marker
               PROPERTY-PUT, 3, @HorizontalSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarksCallout] VerticalSize
      * The vertical size in pixels of each point marker
               PROPERTY-GET, 4, @VerticalSize
                       RETURNING "long", TYPE 3
      *[Class: @IMarksCallout] VerticalSize
      * The vertical size in pixels of each point marker
               PROPERTY-PUT, 4, @VerticalSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarksCallout] InflateMargins
      * When True, axis are expanded to leave space for point markers
               PROPERTY-GET, 5, @InflateMargins
                       RETURNING "boolean", TYPE 11
      *[Class: @IMarksCallout] InflateMargins
      * When True, axis are expanded to leave space for point markers
               PROPERTY-PUT, 5, @InflateMargins,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMarksCallout] Pen
      * The pen used to draw the point marker borders
               PROPERTY-GET, 6, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IMarksCallout] Style
      * The point markers style (rectangle, triangle, etc)
               PROPERTY-GET, 7, @Style
                       RETURNING "EPointerStyle", TYPE 3
      *[Class: @IMarksCallout] Style
      * The point markers style (rectangle, triangle, etc)
               PROPERTY-PUT, 7, @Style,
                   "EPointerStyle (Property_Value)", TYPE 3
      *[Class: @IMarksCallout] Visible
      * Shows / hides the point markers
               PROPERTY-GET, 8, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IMarksCallout] Visible
      * Shows / hides the point markers
               PROPERTY-PUT, 8, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMarksCallout] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IMarksCallout] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMarksCallout] DrawPointer
      * Displays a pointer at the specified position and size
               METHOD, 9, @DrawPointer,
                   "long" @DC, TYPE 3,
                   "boolean" @Is3D, TYPE 11,
                   "long" @px, TYPE 3,
                   "long" @py, TYPE 3,
                   "long" @tmpHoriz, TYPE 3,
                   "long" @tmpVert, TYPE 3,
                   "OLE_COLOR" @AColor, TYPE 19,
                   "EPointerStyle" @AStyle, TYPE 3
      *[Class: @IMarksCallout] Gradient
      * Gradient used to fill pointer interior
               PROPERTY-GET, 2101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IMarksCallout] Transparency
      * % Transparency for Pointer
               PROPERTY-GET, 2201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IMarksCallout] Transparency
      * % Transparency for Pointer
               PROPERTY-PUT, 2201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarksCallout] Arrow
      * Pen used to draw the line connecting the annotation and the chart point
               PROPERTY-GET, 201, @Arrow
                       RETURNING "IPen*", TYPE 9
      *[Class: @IMarksCallout] ArrowHead
      * Determines if callout line will display an "arrow" head at the end or 
               PROPERTY-GET, 202, @ArrowHead
                       RETURNING "EArrowHeadStyle", TYPE 3
      *[Class: @IMarksCallout] ArrowHead
      * Determines if callout line will display an "arrow" head at the end or 
               PROPERTY-PUT, 202, @ArrowHead,
                   "EArrowHeadStyle (Property_Value)", TYPE 3
      *[Class: @IMarksCallout] ArrowHeadSize
      * Size in pixels to display the arrow head at the end of the callout line
               PROPERTY-GET, 203, @ArrowHeadSize
                       RETURNING "long", TYPE 3
      *[Class: @IMarksCallout] ArrowHeadSize
      * Size in pixels to display the arrow head at the end of the callout line
               PROPERTY-PUT, 203, @ArrowHeadSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarksCallout] Distance
      * Length in pixels between chart point and the line connecting annotation
               PROPERTY-GET, 204, @Distance
                       RETURNING "long", TYPE 3
      *[Class: @IMarksCallout] Distance
      * Length in pixels between chart point and the line connecting annotation
               PROPERTY-PUT, 204, @Distance,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarksCallout] Length
      * The amount in pixels from the series point to series mark
               PROPERTY-GET, 301, @Length
                       RETURNING "long", TYPE 3
      *[Class: @IMarksCallout] Length
      * The amount in pixels from the series point to series mark
               PROPERTY-PUT, 301, @Length,
                   "long (Property_Value)", TYPE 3
           
      * Determines the properties to use to apply "smoothing" to contour level 
           
      * ISmoothPoints
           CLASS @ISmoothPoints
               CLSID, FAD39ACF-1001-4CD2-8A7E-D85A8816A4FC
               NAME, "ISmoothPoints"
      *[Class: @ISmoothPoints] Active
      * Enables smoothing of values.
               PROPERTY-GET, 201, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @ISmoothPoints] Active
      * Enables smoothing of values.
               PROPERTY-PUT, 201, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISmoothPoints] Interpolate
      * When setting this property to True, the smooth points are calculated so 
               PROPERTY-GET, 202, @Interpolate
                       RETURNING "boolean", TYPE 11
      *[Class: @ISmoothPoints] Interpolate
      * When setting this property to True, the smooth points are calculated so 
               PROPERTY-PUT, 202, @Interpolate,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISmoothPoints] Factor
      * Gets or sets the number of times the resulting smooth points are in 
               PROPERTY-GET, 203, @Factor
                       RETURNING "long", TYPE 3
      *[Class: @ISmoothPoints] Factor
      * Gets or sets the number of times the resulting smooth points are in 
               PROPERTY-PUT, 203, @Factor,
                   "long (Property_Value)", TYPE 3
           
      * It contains the list of level points and it is used by the Segments 
           
      * ILevelSegment
           CLASS @ILevelSegment
               CLSID, C258E0E2-C6CB-48EA-BE38-F02311FD6871
               NAME, "ILevelSegment"
      *[Class: @ILevelSegment] NumPoints
      * Number of the segment level points.
               PROPERTY-GET, 201, @NumPoints
                       RETURNING "long", TYPE 3
      *[Class: @ILevelSegment] Points
      * List of the segment level points.
               PROPERTY-GET, 202, @Points,
                   "long" @Index, TYPE 3
                       RETURNING "ITeePoint2D*", TYPE 9
           
      * Tool to invert (transpose) X by Z values in a 3D grid series.
           
      * IGridTransposeTool
           CLASS @IGridTransposeTool
               CLSID, 7B946BF5-7F33-4A72-B5A8-E37B921DF8D2
               NAME, "IGridTransposeTool"
      *[Class: @IGridTransposeTool] Transpose
      * Inverts (exchanges) X by Z values in a 3D grid series.
               METHOD, 301, @Transpose
      *[Class: @IGridTransposeTool] Series
      * Gets or sets the 3D grid series to transpose.
               PROPERTY-GET, 302, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IGridTransposeTool] Series
      * Gets or sets the 3D grid series to transpose.
               PROPERTY-PUT, 302, @Series,
                   "VARIANT (Property_Value)", TYPE 12
           
      * Use this chart tool to draw additional legend boxes inside a Chart or 
           
      * IExtraLegendTool
           CLASS @IExtraLegendTool
               CLSID, C753C769-E196-4FCD-B842-C35E106E9D44
               NAME, "IExtraLegendTool"
      *[Class: @IExtraLegendTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IExtraLegendTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IExtraLegendTool] Legend
      * Contains all legend formatting properties and settings.
               PROPERTY-GET, 301, @Legend
                       RETURNING "ILegend*", TYPE 9
           
      * It is intended to be used with any series, to perform a simple visual 
           
      * ISeriesAnimationTool
           CLASS @ISeriesAnimationTool
               CLSID, 958562A2-EE42-4FBF-8DDC-F2731364CE0D
               NAME, "ISeriesAnimationTool"
      *[Class: @ISeriesAnimationTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISeriesAnimationTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ISeriesAnimationTool] DrawEvery
      * By default, is zero. This means the animation will be performed using 
               PROPERTY-GET, 201, @DrawEvery
                       RETURNING "long", TYPE 3
      *[Class: @ISeriesAnimationTool] DrawEvery
      * By default, is zero. This means the animation will be performed using 
               PROPERTY-PUT, 201, @DrawEvery,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeriesAnimationTool] StartAtMin
      * The animation starts changing all series point values to the lowest 
               PROPERTY-GET, 202, @StartAtMin
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeriesAnimationTool] StartAtMin
      * The animation starts changing all series point values to the lowest 
               PROPERTY-PUT, 202, @StartAtMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeriesAnimationTool] StartValue
      * The initial value to set all series points when the animation starts.
               PROPERTY-GET, 203, @StartValue
                       RETURNING "double", TYPE 5
      *[Class: @ISeriesAnimationTool] StartValue
      * The initial value to set all series points when the animation starts.
               PROPERTY-PUT, 203, @StartValue,
                   "double (Property_Value)", TYPE 5
      *[Class: @ISeriesAnimationTool] Steps
      * Number of animation steps. Default: 100.
               PROPERTY-GET, 204, @Steps
                       RETURNING "long", TYPE 3
      *[Class: @ISeriesAnimationTool] Steps
      * Number of animation steps. Default: 100.
               PROPERTY-PUT, 204, @Steps,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeriesAnimationTool] Execute
      * Runs the animation.
               METHOD, 301, @Execute
           
      * It provides automatic dragging and resizing of gantt series bars.
           
      * IGanttTool
           CLASS @IGanttTool
               CLSID, DC44A05E-611B-446B-AB50-99FCFFE53BD0
               NAME, "IGanttTool"
      *[Class: @IGanttTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IGanttTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IGanttTool] AllowDrag
      * When True, the end user can use the mouse to click and dragg Gantt 
               PROPERTY-GET, 301, @AllowDrag
                       RETURNING "boolean", TYPE 11
      *[Class: @IGanttTool] AllowDrag
      * When True, the end user can use the mouse to click and dragg Gantt 
               PROPERTY-PUT, 301, @AllowDrag,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IGanttTool] AllowResize
      * When True, the end user can use the mouse to resize Gantt series bars.
               PROPERTY-GET, 302, @AllowResize
                       RETURNING "boolean", TYPE 11
      *[Class: @IGanttTool] AllowResize
      * When True, the end user can use the mouse to resize Gantt series bars.
               PROPERTY-PUT, 302, @AllowResize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IGanttTool] CursorDrag
      * Defines the cursor to show when the user is dragging a Gantt bar.
               PROPERTY-GET, 303, @CursorDrag
                       RETURNING "short", TYPE 2
      *[Class: @IGanttTool] CursorDrag
      * Defines the cursor to show when the user is dragging a Gantt bar.
               PROPERTY-PUT, 303, @CursorDrag,
                   "short (Property_Value)", TYPE 2
      *[Class: @IGanttTool] CursorResize
      * Defines the cursor to show when the end user passes the mouse over an 
               PROPERTY-GET, 304, @CursorResize
                       RETURNING "short", TYPE 2
      *[Class: @IGanttTool] CursorResize
      * Defines the cursor to show when the end user passes the mouse over an 
               PROPERTY-PUT, 304, @CursorResize,
                   "short (Property_Value)", TYPE 2
      *[Class: @IGanttTool] MinPixels
      * Defines the amount in screen pixels to consider the user is moving the 
               PROPERTY-GET, 305, @MinPixels
                       RETURNING "long", TYPE 3
      *[Class: @IGanttTool] MinPixels
      * Defines the amount in screen pixels to consider the user is moving the 
               PROPERTY-PUT, 305, @MinPixels,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGanttTool] Gantt
      * It provides access to the associated gantt series.
               PROPERTY-GET, 306, @Gantt
                       RETURNING "IGanttSeries*", TYPE 9
           
      * Defines the part of a gantt bar that the user is dragging or resizing.
           
      * EGanttToolPartBar
           CLASS @EGanttToolPartBar
               CLSID, 44042A6B-2129-4768-98A1-481DE5F0AE62
               NAME, "EGanttToolPartBar"
      * "long pbStart"
               ENUMERATOR, @pbStart, 0
      * "long pbAll"
               ENUMERATOR, @pbAll, 1
      * "long pbEnd"
               ENUMERATOR, @pbEnd, 2
           
      * Use this tool to fill the chart background with two alternate colored 
           
      * IGridBandTool
           CLASS @IGridBandTool
               CLSID, 53F3685C-BFDB-41C6-8AFE-2C5EF084CA43
               NAME, "IGridBandTool"
      *[Class: @IGridBandTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-GET, 13, @Axis
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IGridBandTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-PUT, 13, @Axis,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IGridBandTool] Band1
      * Defines the brush to fill first grid band.
               PROPERTY-GET, 301, @Band1
                       RETURNING "IGridBandBrush*", TYPE 9
      *[Class: @IGridBandTool] Band2
      * Defines the brush to fill second grid band.
               PROPERTY-GET, 302, @Band2
                       RETURNING "IGridBandBrush*", TYPE 9
      *[Class: @IGridBandTool] BandBackColor
      * Returns back color of the selected band.
               PROPERTY-GET, 303, @BandBackColor,
                   "long" @ABand, TYPE 3
                       RETURNING "OLE_COLOR", TYPE 19
           
      * It focuses pie slices as the user moves the mouse over them.
           
      * IPieTool
           CLASS @IPieTool
               CLSID, 9598677C-00CA-44D0-973E-F99003A25D73
               NAME, "IPieTool"
      *[Class: @IPieTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IPieTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IPieTool] Pen
      * Pen used to draw the slice focus.
               PROPERTY-GET, 301, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPieTool] Style
      * Set the Style property to ptFocus to make the pie tool to draw a border 
               PROPERTY-GET, 302, @Style
                       RETURNING "EPieToolStyle", TYPE 3
      *[Class: @IPieTool] Style
      * Set the Style property to ptFocus to make the pie tool to draw a border 
               PROPERTY-PUT, 302, @Style,
                   "EPieToolStyle (Property_Value)", TYPE 3
      *[Class: @IPieTool] Slice
      * Returns the currently focused slice.
               PROPERTY-GET, 303, @Slice
                       RETURNING "long", TYPE 3
           
      * Used by TPieTool Style property.
           
      * EPieToolStyle
           CLASS @EPieToolStyle
               CLSID, 70E77C29-185E-4F8B-B6D4-87E51D808387
               NAME, "EPieToolStyle"
      * "long ptFocus"
               ENUMERATOR, @ptFocus, 0
      * "long ptExplode"
               ENUMERATOR, @ptExplode, 1
           
      * Creates a new series with smoothed points from a given source series.
           
      * ISmoothingFunction
           CLASS @ISmoothingFunction
               CLSID, 13470ED6-6F16-4D11-9658-BAD462CA20B7
               NAME, "ISmoothingFunction"
      *[Class: @ISmoothingFunction] Interpolate
      * It determines if the resulting smooth curves will pass exactly over 
               PROPERTY-GET, 201, @Interpolate
                       RETURNING "boolean", TYPE 11
      *[Class: @ISmoothingFunction] Interpolate
      * It determines if the resulting smooth curves will pass exactly over 
               PROPERTY-PUT, 201, @Interpolate,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISmoothingFunction] Factor
      * Gets or sets the number of times the resulting smooth points are in 
               PROPERTY-GET, 202, @Factor
                       RETURNING "long", TYPE 3
      *[Class: @ISmoothingFunction] Factor
      * Gets or sets the number of times the resulting smooth points are in 
               PROPERTY-PUT, 202, @Factor,
                   "long (Property_Value)", TYPE 3
           
      * This function is used to calculate values using your own formula.
           
      * ICustomFunction
           CLASS @ICustomFunction
               CLSID, 9A535134-A86C-49D3-932E-4A046CD55090
               NAME, "ICustomFunction"
      *[Class: @ICustomFunction] NumPoints
      * Gets or sets the number of points.
               PROPERTY-GET, 202, @NumPoints
                       RETURNING "long", TYPE 3
      *[Class: @ICustomFunction] NumPoints
      * Gets or sets the number of points.
               PROPERTY-PUT, 202, @NumPoints,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICustomFunction] StartX
      * The initial value for the "X" parameter.
               PROPERTY-GET, 203, @StartX
                       RETURNING "double", TYPE 5
      *[Class: @ICustomFunction] StartX
      * The initial value for the "X" parameter.
               PROPERTY-PUT, 203, @StartX,
                   "double (Property_Value)", TYPE 5
      *[Class: @ICustomFunction] X
      * Returns the current X parameter. It starts at StartX value and it is 
               PROPERTY-GET, 201, @X
                       RETURNING "double", TYPE 5
      *[Class: @ICustomFunction] X
      * Returns the current X parameter. It starts at StartX value and it is 
               PROPERTY-PUT, 201, @X,
                   "double (Property_Value)", TYPE 5
           
      * Used by ICompressFunction Compress property to determine how source 
           
      * ECompressionPeriod
           CLASS @ECompressionPeriod
               CLSID, 0CC5F0EE-CFC3-46B8-8448-73DA8553E7D8
               NAME, "ECompressionPeriod"
      * "long ocDay"
               ENUMERATOR, @ocDay, 0
      * "long ocWeek"
               ENUMERATOR, @ocWeek, 1
      * "long ocMonth"
               ENUMERATOR, @ocMonth, 2
      * "long ocBiMonth"
               ENUMERATOR, @ocBiMonth, 3
      * "long ocQuarter"
               ENUMERATOR, @ocQuarter, 4
      * "long ocYear"
               ENUMERATOR, @ocYear, 5
           
      * It calculates the highest and lowest value from a source series during a 
           
      * ICompressFunction
           CLASS @ICompressFunction
               CLSID, 6C464DEC-A06F-4443-96B9-DE6A2C659C8F
               NAME, "ICompressFunction"
      *[Class: @ICompressFunction] Compress
      * Datetime value indicating how to group source values by datetime 
               PROPERTY-GET, 201, @Compress
                       RETURNING "ECompressionPeriod", TYPE 3
      *[Class: @ICompressFunction] Compress
      * Datetime value indicating how to group source values by datetime 
               PROPERTY-PUT, 201, @Compress,
                   "ECompressionPeriod (Property_Value)", TYPE 3
           
      * It Calculates the points where the two source series do cross.
           
      * ICrossPointsFunction
           CLASS @ICrossPointsFunction
               CLSID, 20D6DA84-40CB-49BB-A0A1-83E4147DD5D3
               NAME, "ICrossPointsFunction"
           
      * Accumulation/Distribution financial function.
           
      * ICLVFunction
           CLASS @ICLVFunction
               CLSID, D276F6CD-6676-45EB-9027-E9ADDF396915
               NAME, "ICLVFunction"
      *[Class: @ICLVFunction] Accumulate
      * It indicates if function results are accumulated or not.
               PROPERTY-GET, 201, @Accumulate
                       RETURNING "boolean", TYPE 11
      *[Class: @ICLVFunction] Accumulate
      * It indicates if function results are accumulated or not.
               PROPERTY-PUT, 201, @Accumulate,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICLVFunction] Volume
      * Series to be used as source of volume values (by default empty).
               PROPERTY-GET, 202, @Volume
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ICLVFunction] Volume
      * Series to be used as source of volume values (by default empty).
               PROPERTY-PUT, 202, @Volume,
                   "VARIANT (Property_Value)", TYPE 12
           
      * On Balance Volume function.
           
      * IOBVFunction
           CLASS @IOBVFunction
               CLSID, 2C1810CB-206B-48B1-A319-8118DE8917E1
               NAME, "IOBVFunction"
      *[Class: @IOBVFunction] Volume
      * Set Volume property to the series to use to add or subtract values.
               PROPERTY-GET, 201, @Volume
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IOBVFunction] Volume
      * Set Volume property to the series to use to add or subtract values.
               PROPERTY-PUT, 201, @Volume,
                   "VARIANT (Property_Value)", TYPE 12
           
      * Commodity Chanel Index financial indicator.
           
      * ICCIFunction
           CLASS @ICCIFunction
               CLSID, D1CF64C7-94AD-4142-B009-A02066817EBA
               NAME, "ICCIFunction"
      *[Class: @ICCIFunction] Constant
      * Value to multiply mean deviation.
               PROPERTY-GET, 201, @Constant
                       RETURNING "double", TYPE 5
      *[Class: @ICCIFunction] Constant
      * Value to multiply mean deviation.
               PROPERTY-PUT, 201, @Constant,
                   "double (Property_Value)", TYPE 5
           
      * Percentage Volume Oscillator financial function.
           
      * IPVOFunction
           CLASS @IPVOFunction
               CLSID, 7C5180AA-E865-4111-9686-91AFD033476C
               NAME, "IPVOFunction"
      *[Class: @IPVOFunction] Percentage
      * Controls if the difference of two moving averages will be percentual or 
               PROPERTY-GET, 201, @Percentage
                       RETURNING "boolean", TYPE 11
      *[Class: @IPVOFunction] Percentage
      * Controls if the difference of two moving averages will be percentual or 
               PROPERTY-PUT, 201, @Percentage,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPVOFunction] Period2
      * Defines the period of the second exponential moving average.
               PROPERTY-GET, 202, @Period2
                       RETURNING "long", TYPE 3
      *[Class: @IPVOFunction] Period2
      * Defines the period of the second exponential moving average.
               PROPERTY-PUT, 202, @Period2,
                   "long (Property_Value)", TYPE 3
           
      * It calculates the percentage of difference between each point and the 
           
      * IPerformanceFunction
           CLASS @IPerformanceFunction
               CLSID, 74AC9920-FDA6-4B46-92F7-8C1A24644659
               NAME, "IPerformanceFunction"
      *[Class: @IPerformanceFunction] Calculate
      * Method that performs the performance calculation.
               METHOD, 201, @Calculate,
                   "long" @SourceSeriesIndex, TYPE 3,
                   "long" @FirstIndex, TYPE 3,
                   "long" @LastIndex, TYPE 3
                       RETURNING "double", TYPE 5
           
      * Draws points filling the area from the point values to the left or right 
           
      * IHorizAreaSeries
           CLASS @IHorizAreaSeries
               CLSID, A018B5FC-8465-460F-A4FF-939DC23B0C47
               NAME, "IHorizAreaSeries"
      *[Class: @IHorizAreaSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 1, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IHorizAreaSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-GET, 2, @Stairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizAreaSeries] Stairs
      * Draw the line in "steps" mode
               PROPERTY-PUT, 2, @Stairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizAreaSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-GET, 3, @InvertedStairs
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizAreaSeries] InvertedStairs
      * When Stair is True, controls if steps will be drawn inverted
               PROPERTY-PUT, 3, @InvertedStairs,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizAreaSeries] LinePen
      * The pen used to draw the line
               PROPERTY-GET, 4, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizAreaSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-GET, 5, @LineBrush
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @IHorizAreaSeries] LineBrush
      * The brush used to fill the Line points in 3D mode
               PROPERTY-PUT, 5, @LineBrush,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @IHorizAreaSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-GET, 6, @ClickableLine
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizAreaSeries] ClickableLine
      * Controls if OnClickSeries event happens when clicking over the line
               PROPERTY-PUT, 6, @ClickableLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizAreaSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-GET, 76, @LineHeight
                       RETURNING "long", TYPE 3
      *[Class: @IHorizAreaSeries] LineHeight
      * Sets height of Series Line when 3D
               PROPERTY-PUT, 76, @LineHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizAreaSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-GET, 73, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizAreaSeries] Dark3D
      * Enable Series Dark shading
               PROPERTY-PUT, 73, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizAreaSeries] Brush
      * Accesses Brush attributes including images
               PROPERTY-GET, 9, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IHorizAreaSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-GET, 81, @ColorEachLine
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizAreaSeries] ColorEachLine
      * Enables/Disables the coloring of each connecting line of a series.
               PROPERTY-PUT, 81, @ColorEachLine,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizAreaSeries] Outline
      * Outline border of Line
               PROPERTY-GET, 7, @Outline
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizAreaSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-GET, 82, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IHorizAreaSeries] Transparency
      * Fill transparency 0..100
               PROPERTY-PUT, 82, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizAreaSeries] Shadow
      * Accesses Shadow attributes
               PROPERTY-GET, 201, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IHorizAreaSeries] AreaBrush
      * The brush used to fill the area points
               PROPERTY-GET, 20, @AreaBrush
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @IHorizAreaSeries] AreaBrush
      * The brush used to fill the area points
               PROPERTY-PUT, 20, @AreaBrush,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @IHorizAreaSeries] AreaPen
      * The pen used to draw the area lines
               PROPERTY-GET, 21, @AreaPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizAreaSeries] MultiArea
      * Determines who multiple areas will be displayed
               PROPERTY-GET, 22, @MultiArea
                       RETURNING "EMultiArea", TYPE 3
      *[Class: @IHorizAreaSeries] MultiArea
      * Determines who multiple areas will be displayed
               PROPERTY-PUT, 22, @MultiArea,
                   "EMultiArea (Property_Value)", TYPE 3
      *[Class: @IHorizAreaSeries] GetOriginPos
      * Returns the pixels coordinate of the origin ValueIndexth area point
               METHOD, 23, @GetOriginPos,
                   "long" @AValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IHorizAreaSeries] UseYOrigin
      * Default True: Bars will be bottom aligned to the YOrigin property 
               PROPERTY-GET, 8, @UseYOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @IHorizAreaSeries] UseYOrigin
      * Default True: Bars will be bottom aligned to the YOrigin property 
               PROPERTY-PUT, 8, @UseYOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IHorizAreaSeries] YOrigin
      * Defines the bottom position of the Area points.
               PROPERTY-GET, 10, @YOrigin
                       RETURNING "double", TYPE 5
      *[Class: @IHorizAreaSeries] YOrigin
      * Defines the bottom position of the Area points.
               PROPERTY-PUT, 10, @YOrigin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IHorizAreaSeries] Gradient
      * Area Gradient Fill
               PROPERTY-GET, 12, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IHorizAreaSeries] AreaColor
      * Gets the colro of the Pattern lines
               PROPERTY-GET, 301, @AreaColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IHorizAreaSeries] AreaColor
      * Gets the colro of the Pattern lines
               PROPERTY-PUT, 301, @AreaColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
           
      * Point & Figure series is made of X's and O's symbols representing over 
           
      * IPointFigureSeries
           CLASS @IPointFigureSeries
               CLSID, C3A6611C-BB4F-4CE9-AE6B-DFEBE35524D2
               NAME, "IPointFigureSeries"
      *[Class: @IPointFigureSeries] CloseValues
      * It is used to store all Stock market Close values.
               PROPERTY-GET, 201, @CloseValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPointFigureSeries] DateValues
      * It is used to store all Stock market Date values.
               PROPERTY-GET, 202, @DateValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPointFigureSeries] HighValues
      * It is used to store all Stock market High values.
               PROPERTY-GET, 203, @HighValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPointFigureSeries] LowValues
      * It is used to store all Stock market Low values.
               PROPERTY-GET, 204, @LowValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPointFigureSeries] OpenValues
      * It is used to store all Stock market Open values.
               PROPERTY-GET, 205, @OpenValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPointFigureSeries] AddOHLC
      * It appends a new Stock Market point to the Series.
               METHOD, 206, @AddOHLC,
                   "double" @DateValue, TYPE 5,
                   "double" @OpenValue, TYPE 5,
                   "double" @HighValue, TYPE 5,
                   "double" @LowValue, TYPE 5,
                   "double" @CloseValue, TYPE 5
                       RETURNING "long", TYPE 3
      *[Class: @IPointFigureSeries] BoxSize
      * It defines the minimum change in price to draw a new symbol in the same 
               PROPERTY-GET, 207, @BoxSize
                       RETURNING "double", TYPE 5
      *[Class: @IPointFigureSeries] BoxSize
      * It defines the minimum change in price to draw a new symbol in the same 
               PROPERTY-PUT, 207, @BoxSize,
                   "double (Property_Value)", TYPE 5
      *[Class: @IPointFigureSeries] ReversalAmount
      * ReversalAmount by BoxSize defines the maximum price difference allowed 
               PROPERTY-GET, 208, @ReversalAmount
                       RETURNING "double", TYPE 5
      *[Class: @IPointFigureSeries] ReversalAmount
      * ReversalAmount by BoxSize defines the maximum price difference allowed 
               PROPERTY-PUT, 208, @ReversalAmount,
                   "double (Property_Value)", TYPE 5
      *[Class: @IPointFigureSeries] DownSymbol
      * Refers to symbol that is painted for price down periods.
               PROPERTY-GET, 209, @DownSymbol
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IPointFigureSeries] UpSymbol
      * Refers to symbol that is painted for price up periods.
               PROPERTY-GET, 210, @UpSymbol
                       RETURNING "IPointer*", TYPE 9
           
      * The Gauge series is a simple instrumentation control.
           
      * IGaugeSeries
           CLASS @IGaugeSeries
               CLSID, E73E88E7-46E4-4306-A277-ECF240F410BB
               NAME, "IGaugeSeries"
      *[Class: @IGaugeSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @IGaugeSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGaugeSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @IGaugeSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGaugeSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @IGaugeSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @IGaugeSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @IGaugeSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @IGaugeSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IGaugeSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IGaugeSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @IGaugeSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IGaugeSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @IGaugeSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGaugeSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IGaugeSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IGaugeSeries] Center
      * Returns a sub-object with properties that control the appearance of a 
               PROPERTY-GET, 201, @Center
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IGaugeSeries] CircleGradient
      * It allows defining the gradient characteristics for the main gauge 
               PROPERTY-GET, 202, @CircleGradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IGaugeSeries] EndPoint
      * Returns a sub-object with properties that control the appearance of a 
               PROPERTY-GET, 203, @EndPoint
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IGaugeSeries] FullRepaint
      * Set to True to force redisplay of the whole chart when the Gauge arrow 
               PROPERTY-GET, 204, @FullRepaint
                       RETURNING "boolean", TYPE 11
      *[Class: @IGaugeSeries] FullRepaint
      * Set to True to force redisplay of the whole chart when the Gauge arrow 
               PROPERTY-PUT, 204, @FullRepaint,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IGaugeSeries] Maximum
      * Gets or sets the maximum value for the gauge.
               PROPERTY-GET, 205, @Maximum
                       RETURNING "double", TYPE 5
      *[Class: @IGaugeSeries] Maximum
      * Gets or sets the maximum value for the gauge.
               PROPERTY-PUT, 205, @Maximum,
                   "double (Property_Value)", TYPE 5
      *[Class: @IGaugeSeries] Minimum
      * Gets or sets the minimum value for the gauge.
               PROPERTY-GET, 206, @Minimum
                       RETURNING "double", TYPE 5
      *[Class: @IGaugeSeries] Minimum
      * Gets or sets the minimum value for the gauge.
               PROPERTY-PUT, 206, @Minimum,
                   "double (Property_Value)", TYPE 5
      *[Class: @IGaugeSeries] MinorTickDistance
      * Set to a value bigger than zero to display the axis minor ticks (ticks 
               PROPERTY-GET, 207, @MinorTickDistance
                       RETURNING "long", TYPE 3
      *[Class: @IGaugeSeries] MinorTickDistance
      * Set to a value bigger than zero to display the axis minor ticks (ticks 
               PROPERTY-PUT, 207, @MinorTickDistance,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGaugeSeries] HandDistance
      * The amount in pixels that define a gap between the gauge axis and the 
               PROPERTY-GET, 208, @HandDistance
                       RETURNING "long", TYPE 3
      *[Class: @IGaugeSeries] HandDistance
      * The amount in pixels that define a gap between the gauge axis and the 
               PROPERTY-PUT, 208, @HandDistance,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGaugeSeries] HandStyle
      * The gauge can display its arrow as a simple line (hsLine style) or as a 
               PROPERTY-GET, 209, @HandStyle
                       RETURNING "EHandStyle", TYPE 3
      *[Class: @IGaugeSeries] HandStyle
      * The gauge can display its arrow as a simple line (hsLine style) or as a 
               PROPERTY-PUT, 209, @HandStyle,
                   "EHandStyle (Property_Value)", TYPE 3
      *[Class: @IGaugeSeries] LabelsInside
      * Defines where to display gauge axis labels.
               PROPERTY-GET, 210, @LabelsInside
                       RETURNING "boolean", TYPE 11
      *[Class: @IGaugeSeries] LabelsInside
      * Defines where to display gauge axis labels.
               PROPERTY-PUT, 210, @LabelsInside,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IGaugeSeries] TotalAngle
      * Controls the size in degrees for the gauge axis.
               PROPERTY-GET, 211, @TotalAngle
                       RETURNING "double", TYPE 5
      *[Class: @IGaugeSeries] TotalAngle
      * Controls the size in degrees for the gauge axis.
               PROPERTY-PUT, 211, @TotalAngle,
                   "double (Property_Value)", TYPE 5
      *[Class: @IGaugeSeries] Value
      * Gets or sets the position of gauge arrow line.
               PROPERTY-GET, 212, @Value
                       RETURNING "double", TYPE 5
      *[Class: @IGaugeSeries] Value
      * Gets or sets the position of gauge arrow line.
               PROPERTY-PUT, 212, @Value,
                   "double (Property_Value)", TYPE 5
           
      * Defines the appearance of Gauge series hand line.
           
      * EHandStyle
           CLASS @EHandStyle
               CLSID, BBDE45CE-4DD7-4084-8BDF-6B55F2AA7BA4
               NAME, "EHandStyle"
      * "long hsLine"
               ENUMERATOR, @hsLine, 0
      * "long hsTriangle"
               ENUMERATOR, @hsTriangle, 1
           
      * They display points that have individual XYZ origin and XYZ ending 
           
      * IVector3DSeries
           CLASS @IVector3DSeries
               CLSID, 137FBEB7-8B47-41A2-84FC-FEC3E2A35FC9
               NAME, "IVector3DSeries"
      *[Class: @IVector3DSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IVector3DSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @IVector3DSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @IVector3DSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IVector3DSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IVector3DSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IVector3DSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IVector3DSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @IVector3DSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @IVector3DSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IVector3DSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IVector3DSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IVector3DSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IVector3DSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IVector3DSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IVector3DSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @IVector3DSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @IVector3DSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @IVector3DSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IVector3DSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @IVector3DSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IVector3DSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @IVector3DSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @IVector3DSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IVector3DSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IVector3DSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IVector3DSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @IVector3DSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @IVector3DSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @IVector3DSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @IVector3DSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IVector3DSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @IVector3DSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
      *[Class: @IVector3DSeries] AddVector
      * Adds a new 3D vector line to series.
               METHOD, 401, @AddVector,
                   "double" @X0, TYPE 5,
                   "double" @Y0, TYPE 5,
                   "double" @Z0, TYPE 5,
                   "double" @X1, TYPE 5,
                   "double" @Y1, TYPE 5,
                   "double" @Z1, TYPE 5,
                   "BSTR" @ALabel, TYPE 8,
                   "OLE_COLOR" @AColor, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IVector3DSeries] ArrowHeight
      * The amount in pixels of arrow height.
               PROPERTY-GET, 408, @ArrowHeight
                       RETURNING "long", TYPE 3
      *[Class: @IVector3DSeries] ArrowHeight
      * The amount in pixels of arrow height.
               PROPERTY-PUT, 408, @ArrowHeight,
                   "long (Property_Value)", TYPE 3
      *[Class: @IVector3DSeries] ArrowWidth
      * The amount in pixels of arrow width.
               PROPERTY-GET, 409, @ArrowWidth
                       RETURNING "long", TYPE 3
      *[Class: @IVector3DSeries] ArrowWidth
      * The amount in pixels of arrow width.
               PROPERTY-PUT, 409, @ArrowWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IVector3DSeries] EndArrow
      * This pen is used to display arrows at the ending coordinate of vector 
               PROPERTY-GET, 410, @EndArrow
                       RETURNING "IPen*", TYPE 9
      *[Class: @IVector3DSeries] EndXValues
      * List of values representing the ending X coordinates of vector lines.
               PROPERTY-GET, 411, @EndXValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IVector3DSeries] EndYValues
      * List of values representing the ending Y coordinates of vector lines.
               PROPERTY-GET, 412, @EndYValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IVector3DSeries] EndZValues
      * List of values representing the ending Z coordinates of vector lines.
               PROPERTY-GET, 413, @EndZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IVector3DSeries] MinXValueVector
      * Returns the smallest value in the Series XValues array.
               METHOD, 402, @MinXValueVector
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] MaxXValueVector
      * Returns the biggest value in the Series XValues array.
               METHOD, 403, @MaxXValueVector
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] MinYValueVector
      * Returns the smallest value in the Series YValues array.
               METHOD, 404, @MinYValueVector
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] MaxYValueVector
      * Returns the biggest value in the Series YValues array.
               METHOD, 405, @MaxYValueVector
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] MinZValueVector
      * Returns the smallest value in the Series ZValues array.
               METHOD, 406, @MinZValueVector
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] MaxZValueVector
      * Returns the biggest value in the Series ZValues array.
               METHOD, 407, @MaxZValueVector
                       RETURNING "double", TYPE 5
      *[Class: @IVector3DSeries] StartArrow
      * This pen is used to display arrows at the starting coordinate of vector 
               PROPERTY-GET, 414, @StartArrow
                       RETURNING "IPen*", TYPE 9
           
      * Grid of XYZ points displayed as vertical bars, pyramids, etc.
           
      * ITowerSeries
           CLASS @ITowerSeries
               CLSID, 6EE82664-7A4D-427B-8EDF-4B5059EB318A
               NAME, "ITowerSeries"
      *[Class: @ITowerSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITowerSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @ITowerSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITowerSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ITowerSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ITowerSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @ITowerSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @ITowerSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] AddPalette
      * Adds a new color to the Surface palette
               METHOD, 17, @AddPalette,
                   "double" @Value, TYPE 5,
                   "OLE_COLOR" @Color, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-GET, 10, @StartColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITowerSeries] StartColor
      * The starting color of the Surface ColorRange gradient
               PROPERTY-PUT, 10, @StartColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITowerSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-GET, 4, @EndColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITowerSeries] EndColor
      * The ending color of the Surface ColorRange gradient
               PROPERTY-PUT, 4, @EndColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITowerSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-GET, 8, @PaletteSteps
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] PaletteSteps
      * The color steps the surface palette uses when UsePalette is True
               PROPERTY-PUT, 8, @PaletteSteps,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITowerSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-GET, 12, @UsePalette
                       RETURNING "boolean", TYPE 11
      *[Class: @ITowerSeries] UsePalette
      * When True, surface cells are filled using a palette
               PROPERTY-PUT, 12, @UsePalette,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITowerSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-GET, 11, @UseColorRange
                       RETURNING "boolean", TYPE 11
      *[Class: @ITowerSeries] UseColorRange
      * When True, surface cells are filled using a gradient
               PROPERTY-PUT, 11, @UseColorRange,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITowerSeries] ClearPalette
      * Clear the surface colors palette
               METHOD, 18, @ClearPalette
      *[Class: @ITowerSeries] CreateDefaultPalette
      * Fills the Surface palette with automatic "NumSteps" colors
               METHOD, 19, @CreateDefaultPalette,
                   "long" @NumSteps, TYPE 3
      *[Class: @ITowerSeries] GetSurfacePaletteColor
      * Returns the associated palette color for a given Y value
               METHOD, 16, @GetSurfacePaletteColor,
                   "double" @Y, TYPE 5
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITowerSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-GET, 33, @MidColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITowerSeries] MidColor
      * The middle color of the Surface ColorRange gradient
               PROPERTY-PUT, 33, @MidColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITowerSeries] CreateRangePalette
      * Creates a multi-color Palette used to fill Surface polygons.
               METHOD, 34, @CreateRangePalette
      *[Class: @ITowerSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-GET, 35, @PaletteStyle
                       RETURNING "EPaletteStyle", TYPE 3
      *[Class: @ITowerSeries] PaletteStyle
      * Indicates the number of entries in the default color Palette.
               PROPERTY-PUT, 35, @PaletteStyle,
                   "EPaletteStyle (Property_Value)", TYPE 3
      *[Class: @ITowerSeries] UsePaletteMin
               PROPERTY-GET, 301, @UsePaletteMin
                       RETURNING "boolean", TYPE 11
      *[Class: @ITowerSeries] UsePaletteMin
               PROPERTY-PUT, 301, @UsePaletteMin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITowerSeries] PaletteMin
               PROPERTY-GET, 302, @PaletteMin
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] PaletteMin
               PROPERTY-PUT, 302, @PaletteMin,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITowerSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-GET, 303, @PaletteStep
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] PaletteStep
      * The interval amount between palette colors.
               PROPERTY-PUT, 303, @PaletteStep,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITowerSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-GET, 6, @NumXValues
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] NumXValues
      * The number of horizontal surface cells
               PROPERTY-PUT, 6, @NumXValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITowerSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-GET, 7, @NumZValues
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] NumZValues
      * The number of Surface cells in depth direction
               PROPERTY-PUT, 7, @NumZValues,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITowerSeries] GetXZValue
      * Returns the surface cell value for XZ indexes
               METHOD, 15, @GetXZValue,
                   "long" @X, TYPE 3,
                   "long" @Z, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-GET, 313, @IrregularGrid
                       RETURNING "boolean", TYPE 11
      *[Class: @ITowerSeries] IrregularGrid
      * Use IrregularGrid property to determine if X and Z values are 
               PROPERTY-PUT, 313, @IrregularGrid,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITowerSeries] SmoothGrid3D
      * Smooth the Serie using a simple linear algorithm
               METHOD, 401, @SmoothGrid3D
      *[Class: @ITowerSeries] ReuseGridIndex
               PROPERTY-GET, 402, @ReuseGridIndex
                       RETURNING "boolean", TYPE 11
      *[Class: @ITowerSeries] ReuseGridIndex
               PROPERTY-PUT, 402, @ReuseGridIndex,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITowerSeries] FillGridIndex
               METHOD, 403, @FillGridIndex,
                   "long" @StartIndex, TYPE 3
      *[Class: @ITowerSeries] Clicked
      * Returns the tower point index that contains the xy pixel coordinates.
               METHOD, 501, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] Dark3D
      * When True, draws right and top sides of cubes using a darker color.
               PROPERTY-GET, 506, @Dark3D
                       RETURNING "boolean", TYPE 11
      *[Class: @ITowerSeries] Dark3D
      * When True, draws right and top sides of cubes using a darker color.
               PROPERTY-PUT, 506, @Dark3D,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITowerSeries] PercentDepth
      * The percentage of "Z" depth size for tower cubes.
               PROPERTY-GET, 507, @PercentDepth
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] PercentDepth
      * The percentage of "Z" depth size for tower cubes.
               PROPERTY-PUT, 507, @PercentDepth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITowerSeries] Origin
      * The axis vertical position considered to be the "origin" of points.
               PROPERTY-GET, 508, @Origin
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] Origin
      * The axis vertical position considered to be the "origin" of points.
               PROPERTY-PUT, 508, @Origin,
                   "double (Property_Value)", TYPE 5
      *[Class: @ITowerSeries] TowerStyle
      * The kind of tower style to display.
               PROPERTY-GET, 509, @TowerStyle
                       RETURNING "ETowerStyle", TYPE 3
      *[Class: @ITowerSeries] TowerStyle
      * The kind of tower style to display.
               PROPERTY-PUT, 509, @TowerStyle,
                   "ETowerStyle (Property_Value)", TYPE 3
      *[Class: @ITowerSeries] Transparency
      * The percentage of semi-glass effect to display tower points.
               PROPERTY-GET, 510, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] Transparency
      * The percentage of semi-glass effect to display tower points.
               PROPERTY-PUT, 510, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITowerSeries] PercentWidth
      * The percentage of "X" width size for tower cubes.
               PROPERTY-GET, 511, @PercentWidth
                       RETURNING "long", TYPE 3
      *[Class: @ITowerSeries] PercentWidth
      * The percentage of "X" width size for tower cubes.
               PROPERTY-PUT, 511, @PercentWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITowerSeries] UseOrigin
      * When true, it is used as the reference value where points are considered 
               PROPERTY-GET, 512, @UseOrigin
                       RETURNING "boolean", TYPE 11
      *[Class: @ITowerSeries] UseOrigin
      * When true, it is used as the reference value where points are considered 
               PROPERTY-PUT, 512, @UseOrigin,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITowerSeries] MinXValueTower
      * Returns the smallest value in the Series XValues array.
               METHOD, 502, @MinXValueTower
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] MaxXValueTower
      * Returns the biggest value in the Series XValues array.
               METHOD, 503, @MaxXValueTower
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] MinZValueTower
      * Returns the smallest value in the Series ZValues array.
               METHOD, 504, @MinZValueTower
                       RETURNING "double", TYPE 5
      *[Class: @ITowerSeries] MaxZValueTower
      * Returns the biggest value in the Series ZValues array.
               METHOD, 505, @MaxZValueTower
                       RETURNING "double", TYPE 5
           
      * The drawing style to display Tower series points.
           
      * ETowerStyle
           CLASS @ETowerStyle
               CLSID, AB482D07-DA53-4B2B-8F1D-B5E992C76C28
               NAME, "ETowerStyle"
      * "long tsCube"
               ENUMERATOR, @tsCube, 0
      * "long tsRectangle"
               ENUMERATOR, @tsRectangle, 1
      * "long tsCover"
               ENUMERATOR, @tsCover, 2
      * "long tsCylinder"
               ENUMERATOR, @tsCylinder, 3
      * "long tsArrow"
               ENUMERATOR, @tsArrow, 4
      * "long tsCone"
               ENUMERATOR, @tsCone, 5
      * "long tsPyramid"
               ENUMERATOR, @tsPyramid, 6
      * "long tsSlantCube"
               ENUMERATOR, @tsSlantCube, 7
           
      * XML data provider to Series or Chart components.
           
      * ISeriesXMLSource
           CLASS @ISeriesXMLSource
               CLSID, 2E840EB6-205D-4B05-9F8F-ACA42234997B
               NAME, "ISeriesXMLSource"
      *[Class: @ISeriesXMLSource] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ISeriesXMLSource] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeriesXMLSource] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ISeriesXMLSource] Open
      * Sets Active True (internally calling Load method).
               METHOD, 301, @Open
      *[Class: @ISeriesXMLSource] Close
      * Disconnects the Series from the data.
               METHOD, 302, @Close
      *[Class: @ISeriesXMLSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-GET, 303, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeriesXMLSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-PUT, 303, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeriesXMLSource] Series
      * Series to receive source data.
               PROPERTY-GET, 304, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISeriesXMLSource] Series
      * Series to receive source data.
               PROPERTY-PUT, 304, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ISeriesXMLSource] Load
      * Calls the underlying LoadFromFile or LoadFromURL methods.
               METHOD, 401, @Load
      *[Class: @ISeriesXMLSource] LoadFromFile
      * Loads data from a text file
               METHOD, 402, @LoadFromFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @ISeriesXMLSource] LoadFromURL
      * Loads data from a URL
               METHOD, 403, @LoadFromURL,
                   "BSTR" @URL, TYPE 8
      *[Class: @ISeriesXMLSource] FileName
      * Defines the file name of the input data source file.
               PROPERTY-GET, 404, @FileName
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeriesXMLSource] FileName
      * Defines the file name of the input data source file.
               PROPERTY-PUT, 404, @FileName,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeriesXMLSource] LoadMode
               PROPERTY-GET, 405, @LoadMode
                       RETURNING "ELoadMode", TYPE 3
      *[Class: @ISeriesXMLSource] LoadMode
               PROPERTY-PUT, 405, @LoadMode,
                   "ELoadMode (Property_Value)", TYPE 3
      *[Class: @ISeriesXMLSource] SeriesNode
      * When multiple series exist in XML source data, this property can be set 
               PROPERTY-GET, 210, @SeriesNode
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeriesXMLSource] SeriesNode
      * When multiple series exist in XML source data, this property can be set 
               PROPERTY-PUT, 210, @SeriesNode,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeriesXMLSource] ValueSource
      * Set ValueSource to match the name of point values in the XML data.
               PROPERTY-GET, 211, @ValueSource
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeriesXMLSource] ValueSource
      * Set ValueSource to match the name of point values in the XML data.
               PROPERTY-PUT, 211, @ValueSource,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeriesXMLSource] XML
      * Direct access  to XML Strings
               PROPERTY-GET, 501, @XML
                       RETURNING "IStrings*", TYPE 9
           
      * TeeChart Series XML Source v7
           
      * SeriesXMLSource
           CLASS @SeriesXMLSource
               CLSID, 0711C135-284C-4082-BE3D-C41B9B668527
               NAME, "SeriesXMLSource"
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "ISeriesXMLSource"
      *[Class: @SeriesXMLSource] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @SeriesXMLSource] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @SeriesXMLSource] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @SeriesXMLSource] Open
      * Sets Active True (internally calling Load method).
               METHOD, 301, @Open
      *[Class: @SeriesXMLSource] Close
      * Disconnects the Series from the data.
               METHOD, 302, @Close
      *[Class: @SeriesXMLSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-GET, 303, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @SeriesXMLSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-PUT, 303, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @SeriesXMLSource] Series
      * Series to receive source data.
               PROPERTY-GET, 304, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @SeriesXMLSource] Series
      * Series to receive source data.
               PROPERTY-PUT, 304, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @SeriesXMLSource] Load
      * Calls the underlying LoadFromFile or LoadFromURL methods.
               METHOD, 401, @Load
      *[Class: @SeriesXMLSource] LoadFromFile
      * Loads data from a text file
               METHOD, 402, @LoadFromFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @SeriesXMLSource] LoadFromURL
      * Loads data from a URL
               METHOD, 403, @LoadFromURL,
                   "BSTR" @URL, TYPE 8
      *[Class: @SeriesXMLSource] FileName
      * Defines the file name of the input data source file.
               PROPERTY-GET, 404, @FileName
                       RETURNING "BSTR", TYPE 8
      *[Class: @SeriesXMLSource] FileName
      * Defines the file name of the input data source file.
               PROPERTY-PUT, 404, @FileName,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @SeriesXMLSource] LoadMode
               PROPERTY-GET, 405, @LoadMode
                       RETURNING "ELoadMode", TYPE 3
      *[Class: @SeriesXMLSource] LoadMode
               PROPERTY-PUT, 405, @LoadMode,
                   "ELoadMode (Property_Value)", TYPE 3
      *[Class: @SeriesXMLSource] SeriesNode
      * When multiple series exist in XML source data, this property can be set 
               PROPERTY-GET, 210, @SeriesNode
                       RETURNING "BSTR", TYPE 8
      *[Class: @SeriesXMLSource] SeriesNode
      * When multiple series exist in XML source data, this property can be set 
               PROPERTY-PUT, 210, @SeriesNode,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @SeriesXMLSource] ValueSource
      * Set ValueSource to match the name of point values in the XML data.
               PROPERTY-GET, 211, @ValueSource
                       RETURNING "BSTR", TYPE 8
      *[Class: @SeriesXMLSource] ValueSource
      * Set ValueSource to match the name of point values in the XML data.
               PROPERTY-PUT, 211, @ValueSource,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @SeriesXMLSource] XML
      * Direct access  to XML Strings
               PROPERTY-GET, 501, @XML
                       RETURNING "IStrings*", TYPE 9
           
      * Use this component to generate PDF (Adobe Portable Document Format) 
           
      * IPDFExport
           CLASS @IPDFExport
               CLSID, 3A4DC602-CFA5-400C-971B-9C5538F68BFF
               NAME, "IPDFExport"
      *[Class: @IPDFExport] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IPDFExport] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPDFExport] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IPDFExport] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPDFExport] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IPDFExport] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
           
      * Use this component to export TeeCharts to EPS (Encapsulated PostScript) 
           
      * IEPSExport
           CLASS @IEPSExport
               CLSID, C90938C0-4561-49FD-B3FA-43B6AD8577C8
               NAME, "IEPSExport"
      *[Class: @IEPSExport] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IEPSExport] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IEPSExport] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IEPSExport] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IEPSExport] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IEPSExport] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
           
      * Allows Series data to be loaded from Text sources
           
      * ISeriesTextSource
           CLASS @ISeriesTextSource
               CLSID, 7039771A-09BF-48C2-8C39-D4C072A8F98F
               NAME, "ISeriesTextSource"
      *[Class: @ISeriesTextSource] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ISeriesTextSource] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeriesTextSource] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ISeriesTextSource] Open
      * Sets Active True (internally calling Load method).
               METHOD, 301, @Open
      *[Class: @ISeriesTextSource] Close
      * Disconnects the Series from the data.
               METHOD, 302, @Close
      *[Class: @ISeriesTextSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-GET, 303, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeriesTextSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-PUT, 303, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeriesTextSource] Series
      * Series to receive source data.
               PROPERTY-GET, 304, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISeriesTextSource] Series
      * Series to receive source data.
               PROPERTY-PUT, 304, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ISeriesTextSource] Load
      * Calls the underlying LoadFromFile or LoadFromURL methods.
               METHOD, 401, @Load
      *[Class: @ISeriesTextSource] LoadFromFile
      * Loads data from a text file
               METHOD, 402, @LoadFromFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @ISeriesTextSource] LoadFromURL
      * Loads data from a URL
               METHOD, 403, @LoadFromURL,
                   "BSTR" @URL, TYPE 8
      *[Class: @ISeriesTextSource] FileName
      * Defines the file name of the input data source file.
               PROPERTY-GET, 404, @FileName
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeriesTextSource] FileName
      * Defines the file name of the input data source file.
               PROPERTY-PUT, 404, @FileName,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeriesTextSource] LoadMode
               PROPERTY-GET, 405, @LoadMode
                       RETURNING "ELoadMode", TYPE 3
      *[Class: @ISeriesTextSource] LoadMode
               PROPERTY-PUT, 405, @LoadMode,
                   "ELoadMode (Property_Value)", TYPE 3
      *[Class: @ISeriesTextSource] LoadAsStream
      * Loads data from a stream object
               METHOD, 4, @LoadAsStream,
                   "VARIANT" @AStream, TYPE 12
      *[Class: @ISeriesTextSource] HeaderLines
      * Defines the number of lines that act as headers
               PROPERTY-GET, 10, @HeaderLines
                       RETURNING "long", TYPE 3
      *[Class: @ISeriesTextSource] HeaderLines
      * Defines the number of lines that act as headers
               PROPERTY-PUT, 10, @HeaderLines,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISeriesTextSource] Fields
      * Configures the addition of the series data
               PROPERTY-GET, 11, @Fields
                       RETURNING "ISeriesTextFields*", TYPE 9
      *[Class: @ISeriesTextSource] FieldSeparator
      * Character that separates the fields in the text source file
               PROPERTY-GET, 12, @FieldSeparator
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeriesTextSource] FieldSeparator
      * Character that separates the fields in the text source file
               PROPERTY-PUT, 12, @FieldSeparator,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeriesTextSource] AddField
      * Adds a field a the text source file
               METHOD, 15, @AddField,
                   "BSTR" @AName, TYPE 8,
                   "long" @AIndex, TYPE 3
                       RETURNING "ISeriesTextField*", TYPE 9
           
      * TeeChart SeriesTextSource v7
           
      * SeriesTextSource
           CLASS @SeriesTextSource
               CLSID, 41F24C40-E552-4F7E-B030-FC3D539850BF
               NAME, "SeriesTextSource"
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "ISeriesTextSource"
      *[Class: @SeriesTextSource] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @SeriesTextSource] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @SeriesTextSource] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @SeriesTextSource] Open
      * Sets Active True (internally calling Load method).
               METHOD, 301, @Open
      *[Class: @SeriesTextSource] Close
      * Disconnects the Series from the data.
               METHOD, 302, @Close
      *[Class: @SeriesTextSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-GET, 303, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @SeriesTextSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-PUT, 303, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @SeriesTextSource] Series
      * Series to receive source data.
               PROPERTY-GET, 304, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @SeriesTextSource] Series
      * Series to receive source data.
               PROPERTY-PUT, 304, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @SeriesTextSource] Load
      * Calls the underlying LoadFromFile or LoadFromURL methods.
               METHOD, 401, @Load
      *[Class: @SeriesTextSource] LoadFromFile
      * Loads data from a text file
               METHOD, 402, @LoadFromFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @SeriesTextSource] LoadFromURL
      * Loads data from a URL
               METHOD, 403, @LoadFromURL,
                   "BSTR" @URL, TYPE 8
      *[Class: @SeriesTextSource] FileName
      * Defines the file name of the input data source file.
               PROPERTY-GET, 404, @FileName
                       RETURNING "BSTR", TYPE 8
      *[Class: @SeriesTextSource] FileName
      * Defines the file name of the input data source file.
               PROPERTY-PUT, 404, @FileName,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @SeriesTextSource] LoadMode
               PROPERTY-GET, 405, @LoadMode
                       RETURNING "ELoadMode", TYPE 3
      *[Class: @SeriesTextSource] LoadMode
               PROPERTY-PUT, 405, @LoadMode,
                   "ELoadMode (Property_Value)", TYPE 3
      *[Class: @SeriesTextSource] LoadAsStream
      * Loads data from a stream object
               METHOD, 4, @LoadAsStream,
                   "VARIANT" @AStream, TYPE 12
      *[Class: @SeriesTextSource] HeaderLines
      * Defines the number of lines that act as headers
               PROPERTY-GET, 10, @HeaderLines
                       RETURNING "long", TYPE 3
      *[Class: @SeriesTextSource] HeaderLines
      * Defines the number of lines that act as headers
               PROPERTY-PUT, 10, @HeaderLines,
                   "long (Property_Value)", TYPE 3
      *[Class: @SeriesTextSource] Fields
      * Configures the addition of the series data
               PROPERTY-GET, 11, @Fields
                       RETURNING "ISeriesTextFields*", TYPE 9
      *[Class: @SeriesTextSource] FieldSeparator
      * Character that separates the fields in the text source file
               PROPERTY-GET, 12, @FieldSeparator
                       RETURNING "BSTR", TYPE 8
      *[Class: @SeriesTextSource] FieldSeparator
      * Character that separates the fields in the text source file
               PROPERTY-PUT, 12, @FieldSeparator,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @SeriesTextSource] AddField
      * Adds a field a the text source file
               METHOD, 15, @AddField,
                   "BSTR" @AName, TYPE 8,
                   "long" @AIndex, TYPE 3
                       RETURNING "ISeriesTextField*", TYPE 9
           
      * Non-visual component to automatically create charts with multiple series 
           
      * ICrossTabSource
           CLASS @ICrossTabSource
               CLSID, 169FFADB-36A8-4058-9B16-AD858DC545F8
               NAME, "ICrossTabSource"
      *[Class: @ICrossTabSource] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @ICrossTabSource] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @ICrossTabSource] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @ICrossTabSource] Open
      * Sets Active True (internally calling Load method).
               METHOD, 301, @Open
      *[Class: @ICrossTabSource] Close
      * Disconnects the Series from the data.
               METHOD, 302, @Close
      *[Class: @ICrossTabSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-GET, 303, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @ICrossTabSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-PUT, 303, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICrossTabSource] Series
      * Series to receive source data.
               PROPERTY-GET, 304, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ICrossTabSource] Series
      * Series to receive source data.
               PROPERTY-PUT, 304, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ICrossTabSource] Load
      * This method performs the crosstab.
               METHOD, 401, @Load
      *[Class: @ICrossTabSource] CaseSensitive
      * Setting this property to True will consider texts as different when they 
               PROPERTY-GET, 402, @CaseSensitive
                       RETURNING "boolean", TYPE 11
      *[Class: @ICrossTabSource] CaseSensitive
      * Setting this property to True will consider texts as different when they 
               PROPERTY-PUT, 402, @CaseSensitive,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ICrossTabSource] DataSet
      * The dataset that contains the source records to use to create the 
               PROPERTY-GET, 403, @DataSet
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ICrossTabSource] DataSet
      * The dataset that contains the source records to use to create the 
               PROPERTY-PUT, 403, @DataSet,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ICrossTabSource] Formula
      * Determines how will the crosstab use database values to add points to 
               PROPERTY-GET, 404, @Formula
                       RETURNING "EGroupFormula", TYPE 3
      *[Class: @ICrossTabSource] Formula
      * Determines how will the crosstab use database values to add points to 
               PROPERTY-PUT, 404, @Formula,
                   "EGroupFormula (Property_Value)", TYPE 3
      *[Class: @ICrossTabSource] GroupField
      * The field in the dataset to be used as grouping field.
               PROPERTY-GET, 405, @GroupField
                       RETURNING "BSTR", TYPE 8
      *[Class: @ICrossTabSource] GroupField
      * The field in the dataset to be used as grouping field.
               PROPERTY-PUT, 405, @GroupField,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ICrossTabSource] LabelField
      * The field in the dataset to be used to add labels (text) to series 
               PROPERTY-GET, 406, @LabelField
                       RETURNING "BSTR", TYPE 8
      *[Class: @ICrossTabSource] LabelField
      * The field in the dataset to be used to add labels (text) to series 
               PROPERTY-PUT, 406, @LabelField,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ICrossTabSource] ValueField
      * The field in the dataset where values will be obtained to perform 
               PROPERTY-GET, 407, @ValueField
                       RETURNING "BSTR", TYPE 8
      *[Class: @ICrossTabSource] ValueField
      * The field in the dataset where values will be obtained to perform 
               PROPERTY-PUT, 407, @ValueField,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ICrossTabSource] HideSeries
      * Hide internal Series created
               PROPERTY-GET, 408, @HideSeries
                       RETURNING "boolean", TYPE 11
      *[Class: @ICrossTabSource] HideSeries
      * Hide internal Series created
               PROPERTY-PUT, 408, @HideSeries,
                   "boolean (Property_Value)", TYPE 11
           
      * Determines if crosstab will accumulate dataset field values or will 
           
      * EGroupFormula
           CLASS @EGroupFormula
               CLSID, D0FD05E8-2291-42EC-B5D5-DA2FE03AFBC3
               NAME, "EGroupFormula"
      * "long gfCount"
               ENUMERATOR, @gfCount, 0
      * "long gfSum"
               ENUMERATOR, @gfSum, 1
           
      * TeeChart Cross Tab Source v7
           
      * CrossTabSource
           CLASS @CrossTabSource
               CLSID, 6C0877B1-60C0-44C7-9E5A-CEA7EC80B3F4
               NAME, "CrossTabSource"
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "ICrossTabSource"
      *[Class: @CrossTabSource] Chart
      * The TeeChart control to use (ie: TChart1)
               PROPERTY-PUT, 44, @Chart,
                   "ITChart* (Property_Value)", TYPE 9
      *[Class: @CrossTabSource] ChartLink
      * The TeeChart to control. (ie: TChart1.ChartLink)
               PROPERTY-PUT, 1, @ChartLink,
                   "long (Property_Value)", TYPE 3
      *[Class: @CrossTabSource] AboutBox
      * About...
               METHOD, -552, @AboutBox
      *[Class: @CrossTabSource] Open
      * Sets Active True (internally calling Load method).
               METHOD, 301, @Open
      *[Class: @CrossTabSource] Close
      * Disconnects the Series from the data.
               METHOD, 302, @Close
      *[Class: @CrossTabSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-GET, 303, @Active
                       RETURNING "boolean", TYPE 11
      *[Class: @CrossTabSource] Active
      * Activates/deactivates the Series Source.
               PROPERTY-PUT, 303, @Active,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @CrossTabSource] Series
      * Series to receive source data.
               PROPERTY-GET, 304, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @CrossTabSource] Series
      * Series to receive source data.
               PROPERTY-PUT, 304, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @CrossTabSource] Load
      * This method performs the crosstab.
               METHOD, 401, @Load
      *[Class: @CrossTabSource] CaseSensitive
      * Setting this property to True will consider texts as different when they 
               PROPERTY-GET, 402, @CaseSensitive
                       RETURNING "boolean", TYPE 11
      *[Class: @CrossTabSource] CaseSensitive
      * Setting this property to True will consider texts as different when they 
               PROPERTY-PUT, 402, @CaseSensitive,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @CrossTabSource] DataSet
      * The dataset that contains the source records to use to create the 
               PROPERTY-GET, 403, @DataSet
                       RETURNING "VARIANT", TYPE 12
      *[Class: @CrossTabSource] DataSet
      * The dataset that contains the source records to use to create the 
               PROPERTY-PUT, 403, @DataSet,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @CrossTabSource] Formula
      * Determines how will the crosstab use database values to add points to 
               PROPERTY-GET, 404, @Formula
                       RETURNING "EGroupFormula", TYPE 3
      *[Class: @CrossTabSource] Formula
      * Determines how will the crosstab use database values to add points to 
               PROPERTY-PUT, 404, @Formula,
                   "EGroupFormula (Property_Value)", TYPE 3
      *[Class: @CrossTabSource] GroupField
      * The field in the dataset to be used as grouping field.
               PROPERTY-GET, 405, @GroupField
                       RETURNING "BSTR", TYPE 8
      *[Class: @CrossTabSource] GroupField
      * The field in the dataset to be used as grouping field.
               PROPERTY-PUT, 405, @GroupField,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @CrossTabSource] LabelField
      * The field in the dataset to be used to add labels (text) to series 
               PROPERTY-GET, 406, @LabelField
                       RETURNING "BSTR", TYPE 8
      *[Class: @CrossTabSource] LabelField
      * The field in the dataset to be used to add labels (text) to series 
               PROPERTY-PUT, 406, @LabelField,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @CrossTabSource] ValueField
      * The field in the dataset where values will be obtained to perform 
               PROPERTY-GET, 407, @ValueField
                       RETURNING "BSTR", TYPE 8
      *[Class: @CrossTabSource] ValueField
      * The field in the dataset where values will be obtained to perform 
               PROPERTY-PUT, 407, @ValueField,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @CrossTabSource] HideSeries
      * Hide internal Series created
               PROPERTY-GET, 408, @HideSeries
                       RETURNING "boolean", TYPE 11
      *[Class: @CrossTabSource] HideSeries
      * Hide internal Series created
               PROPERTY-PUT, 408, @HideSeries,
                   "boolean (Property_Value)", TYPE 11
           
      * Brush for GridBandTool
           
      * IGridBandBrush
           CLASS @IGridBandBrush
               CLSID, 847F377D-5699-4031-AC76-12704AF0A462
               NAME, "IGridBandBrush"
      *[Class: @IGridBandBrush] Color
      * The color used to fill drawing shapes
               PROPERTY-GET, 1, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IGridBandBrush] Color
      * The color used to fill drawing shapes
               PROPERTY-PUT, 1, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IGridBandBrush] Style
      * The pattern style used to fill drawing shapes
               PROPERTY-GET, 2, @Style
                       RETURNING "EBrushStyle", TYPE 3
      *[Class: @IGridBandBrush] Style
      * The pattern style used to fill drawing shapes
               PROPERTY-PUT, 2, @Style,
                   "EBrushStyle (Property_Value)", TYPE 3
      *[Class: @IGridBandBrush] LoadImage
      * Defines the image to be displayed as pattern for Brush area
               METHOD, 14, @LoadImage,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IGridBandBrush] AssignImage
      * Assign bitmap to Brush
               METHOD, 16, @AssignImage,
                   "long" @ImageHandle, TYPE 3
      *[Class: @IGridBandBrush] ClearImage
      * Clears the Brush image
               METHOD, 4, @ClearImage
      *[Class: @IGridBandBrush] ShowEditor
      * Shows a dialog to modify the current brush properties.
               METHOD, 201, @ShowEditor
      *[Class: @IGridBandBrush] BackColor
      * Band Color
               PROPERTY-GET, 301, @BackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IGridBandBrush] BackColor
      * Band Color
               PROPERTY-PUT, 301, @BackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IGridBandBrush] Transparency
      * Band Transparency 0-100
               PROPERTY-GET, 302, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IGridBandBrush] Transparency
      * Band Transparency 0-100
               PROPERTY-PUT, 302, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IGridBandBrush] Gradient
      * Gradient for Bands
               PROPERTY-GET, 303, @Gradient
                       RETURNING "IGradient*", TYPE 9
           
      * Rectangle coordinates
           
      * ITeeRect
           CLASS @ITeeRect
               CLSID, B24170C0-7555-4C67-B013-B298F959B940
               NAME, "ITeeRect"
      *[Class: @ITeeRect] Left
      * Rectangle Left coordinate
               PROPERTY-GET, 201, @Left
                       RETURNING "long", TYPE 3
      *[Class: @ITeeRect] Top
      * Rectangle Top coordinate
               PROPERTY-GET, 202, @Top
                       RETURNING "long", TYPE 3
      *[Class: @ITeeRect] Right
      * Rectangle Right coordinate
               PROPERTY-GET, 203, @Right
                       RETURNING "long", TYPE 3
      *[Class: @ITeeRect] Bottom
      * Rectangle Bottom coordinate
               PROPERTY-GET, 204, @Bottom
                       RETURNING "long", TYPE 3
           
      * Drag Series Points Tool
           
      * IDragPointTool
           CLASS @IDragPointTool
               CLSID, 30D6B14B-C0D1-4560-B395-21FCD42A5C72
               NAME, "IDragPointTool"
      *[Class: @IDragPointTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IDragPointTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IDragPointTool] DragStyle
      * Drag Style
               PROPERTY-GET, 201, @DragStyle
                       RETURNING "EDragPointStyle", TYPE 3
      *[Class: @IDragPointTool] DragStyle
      * Drag Style
               PROPERTY-PUT, 201, @DragStyle,
                   "EDragPointStyle (Property_Value)", TYPE 3
           
      * Style for DragPoint Tool drags
           
      * EDragPointStyle
           CLASS @EDragPointStyle
               CLSID, E43D8DDC-0882-4F47-8834-FBF4610B98D4
               NAME, "EDragPointStyle"
      * "long dsX"
               ENUMERATOR, @dsX, 0
      * "long dsY"
               ENUMERATOR, @dsY, 1
      * "long dsBoth"
               ENUMERATOR, @dsBoth, 2
           
      * Units used for PostionPercent
           
      * EPositionUnits
           CLASS @EPositionUnits
               CLSID, 4DED067E-B7C9-41EC-8BC3-6CD3DD3A9D09
               NAME, "EPositionUnits"
      * "long puPercent"
               ENUMERATOR, @puPercent, 0
      * "long puPixels"
               ENUMERATOR, @puPixels, 1
           
      * ITeeShape
           CLASS @ITeeShape
               CLSID, AB508DC2-5C64-4237-8DA7-A4036A4C91AE
               NAME, "ITeeShape"
      *[Class: @ITeeShape] Transparency
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShape] Transparency
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShape] Bevel
               PROPERTY-GET, 202, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ITeeShape] Bevel
               PROPERTY-PUT, 202, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ITeeShape] BevelWidth
               PROPERTY-GET, 203, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ITeeShape] BevelWidth
               PROPERTY-PUT, 203, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITeeShape] Color
               PROPERTY-GET, 204, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITeeShape] Color
               PROPERTY-PUT, 204, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITeeShape] Gradient
               PROPERTY-GET, 205, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ITeeShape] Font
               PROPERTY-GET, 206, @Font
                       RETURNING "IChartFont*", TYPE 9
      *[Class: @ITeeShape] Shadow
               PROPERTY-GET, 207, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ITeeShape] ShapeStyle
               PROPERTY-GET, 208, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ITeeShape] ShapeStyle
               PROPERTY-PUT, 208, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
           
      * ILegendTitle
           CLASS @ILegendTitle
               CLSID, A4ADD88C-9C52-4347-A42C-DD561F65BE53
               NAME, "ILegendTitle"
      *[Class: @ILegendTitle] Transparency
               PROPERTY-GET, 201, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ILegendTitle] Transparency
               PROPERTY-PUT, 201, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegendTitle] Bevel
               PROPERTY-GET, 202, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ILegendTitle] Bevel
               PROPERTY-PUT, 202, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ILegendTitle] BevelWidth
               PROPERTY-GET, 203, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ILegendTitle] BevelWidth
               PROPERTY-PUT, 203, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegendTitle] Color
               PROPERTY-GET, 204, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ILegendTitle] Color
               PROPERTY-PUT, 204, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ILegendTitle] Gradient
               PROPERTY-GET, 205, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ILegendTitle] Font
               PROPERTY-GET, 206, @Font
                       RETURNING "IChartFont*", TYPE 9
      *[Class: @ILegendTitle] Shadow
               PROPERTY-GET, 207, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ILegendTitle] ShapeStyle
               PROPERTY-GET, 208, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ILegendTitle] ShapeStyle
               PROPERTY-PUT, 208, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @ILegendTitle] Text
               PROPERTY-GET, 2201, @Text
                       RETURNING "IStrings*", TYPE 9
      *[Class: @ILegendTitle] TextAlignment
               PROPERTY-GET, 2202, @TextAlignment
                       RETURNING "ETitleAlignment", TYPE 3
      *[Class: @ILegendTitle] TextAlignment
               PROPERTY-PUT, 2202, @TextAlignment,
                   "ETitleAlignment (Property_Value)", TYPE 3
      *[Class: @ILegendTitle] Visible
      * Makes the Legend Title Visible/Invisible
               PROPERTY-GET, 301, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegendTitle] Visible
      * Makes the Legend Title Visible/Invisible
               PROPERTY-PUT, 301, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegendTitle] Transparent
      * Gets Legend Title Transparent
               PROPERTY-GET, 302, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegendTitle] Transparent
      * Gets Legend Title Transparent
               PROPERTY-PUT, 302, @Transparent,
                   "boolean (Property_Value)", TYPE 11
           
      * Legend ScrollBar Tool
           
      * ILegendScrollBarTool
           CLASS @ILegendScrollBarTool
               CLSID, D81B2F13-2952-4C6A-81D0-416F32AB0625
               NAME, "ILegendScrollBarTool"
      *[Class: @ILegendScrollBarTool] Horizontal
               PROPERTY-GET, 201, @Horizontal
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegendScrollBarTool] Horizontal
               PROPERTY-PUT, 201, @Horizontal,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegendScrollBarTool] Position
               PROPERTY-GET, 202, @Position
                       RETURNING "long", TYPE 3
      *[Class: @ILegendScrollBarTool] Position
               PROPERTY-PUT, 202, @Position,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegendScrollBarTool] ArrowBrush
               PROPERTY-GET, 203, @ArrowBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ILegendScrollBarTool] AutoRepeat
               PROPERTY-GET, 204, @AutoRepeat
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegendScrollBarTool] AutoRepeat
               PROPERTY-PUT, 204, @AutoRepeat,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegendScrollBarTool] BackColor
               PROPERTY-GET, 205, @BackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ILegendScrollBarTool] BackColor
               PROPERTY-PUT, 205, @BackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ILegendScrollBarTool] Bevel
               PROPERTY-GET, 206, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ILegendScrollBarTool] Bevel
               PROPERTY-PUT, 206, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ILegendScrollBarTool] Brush
               PROPERTY-GET, 207, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ILegendScrollBarTool] InitialDelay
               PROPERTY-GET, 209, @InitialDelay
                       RETURNING "long", TYPE 3
      *[Class: @ILegendScrollBarTool] InitialDelay
               PROPERTY-PUT, 209, @InitialDelay,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegendScrollBarTool] Pen
               PROPERTY-GET, 210, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ILegendScrollBarTool] Size
               PROPERTY-GET, 211, @Size
                       RETURNING "long", TYPE 3
      *[Class: @ILegendScrollBarTool] Size
               PROPERTY-PUT, 211, @Size,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILegendScrollBarTool] ThumbBrush
               PROPERTY-GET, 212, @ThumbBrush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ILegendScrollBarTool] DrawStyle
               PROPERTY-GET, 208, @DrawStyle
                       RETURNING "EScrollBarDrawStyle", TYPE 3
      *[Class: @ILegendScrollBarTool] DrawStyle
               PROPERTY-PUT, 208, @DrawStyle,
                   "EScrollBarDrawStyle (Property_Value)", TYPE 3
           
      * IMarksSymbol
           CLASS @IMarksSymbol
               CLSID, A87DA187-8D4E-414E-B07A-466272F3C514
               NAME, "IMarksSymbol"
      *[Class: @IMarksSymbol] Bevel
               PROPERTY-GET, 201, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @IMarksSymbol] Bevel
               PROPERTY-PUT, 201, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @IMarksSymbol] BevelWidth
               PROPERTY-GET, 202, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @IMarksSymbol] BevelWidth
               PROPERTY-PUT, 202, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarksSymbol] Frame
               PROPERTY-GET, 204, @Frame
                       RETURNING "IPen*", TYPE 9
      *[Class: @IMarksSymbol] Gradient
               PROPERTY-GET, 205, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IMarksSymbol] Shadow
               PROPERTY-GET, 207, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @IMarksSymbol] ShapeStyle
               PROPERTY-GET, 208, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @IMarksSymbol] ShapeStyle
               PROPERTY-PUT, 208, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @IMarksSymbol] Transparency
               PROPERTY-GET, 209, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IMarksSymbol] Transparency
               PROPERTY-PUT, 209, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMarksSymbol] Visible
               PROPERTY-GET, 210, @Visible
                       RETURNING "boolean", TYPE 11
      *[Class: @IMarksSymbol] Visible
               PROPERTY-PUT, 210, @Visible,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMarksSymbol] Pen
               PROPERTY-GET, 203, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IMarksSymbol] Brush
               PROPERTY-GET, 206, @Brush
                       RETURNING "IBrush*", TYPE 9
           
      * Use this format to export the Chart to SVG
           
      * ISVGExport
           CLASS @ISVGExport
               CLSID, 78844823-0136-4E23-8E75-BA2FC95986A1
               NAME, "ISVGExport"
      *[Class: @ISVGExport] Width
      * Sets Width of Chart
               PROPERTY-GET, 11, @Width
                       RETURNING "long", TYPE 3
      *[Class: @ISVGExport] Width
      * Sets Width of Chart
               PROPERTY-PUT, 11, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISVGExport] Height
      * Sets Height of Chart
               PROPERTY-GET, 12, @Height
                       RETURNING "long", TYPE 3
      *[Class: @ISVGExport] Height
      * Sets Height of Chart
               PROPERTY-PUT, 12, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISVGExport] SaveToFile
      * Save Chart to File - Enter file path/name as string.
               METHOD, 13, @SaveToFile,
                   "BSTR" @FileName, TYPE 8
      *[Class: @ISVGExport] SaveToStream
      * Save Chart to Stream in defined format.
               METHOD, 14, @SaveToStream
                       RETURNING "VARIANT", TYPE 12
           
      * EScrollBarDrawStyle
           CLASS @EScrollBarDrawStyle
               CLSID, 39607458-A4BB-4322-9738-696475AC8035
               NAME, "EScrollBarDrawStyle"
      * "long dsAlways"
               ENUMERATOR, @dsAlways, 0
      * "long dsWhenNeeded"
               ENUMERATOR, @dsWhenNeeded, 1
           
      * PolarBarSeries
           
      * IPolarBarSeries
           CLASS @IPolarBarSeries
               CLSID, 7930078F-0646-4387-AB99-9C7996094BA2
               NAME, "IPolarBarSeries"
      *[Class: @IPolarBarSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-GET, 1, @XRadius
                       RETURNING "long", TYPE 3
      *[Class: @IPolarBarSeries] XRadius
      * The horizontal radius in pixels
               PROPERTY-PUT, 1, @XRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPolarBarSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-GET, 2, @YRadius
                       RETURNING "long", TYPE 3
      *[Class: @IPolarBarSeries] YRadius
      * The vertical radius in pixels
               PROPERTY-PUT, 2, @YRadius,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPolarBarSeries] XCenter
      * The circle central horizontal position in pixels
               PROPERTY-GET, 4, @XCenter
                       RETURNING "long", TYPE 3
      *[Class: @IPolarBarSeries] YCenter
      * The circle central vertical position in pixels
               PROPERTY-GET, 5, @YCenter
                       RETURNING "long", TYPE 3
      *[Class: @IPolarBarSeries] CircleWidth
      * The circle width in pixels
               PROPERTY-GET, 6, @CircleWidth
                       RETURNING "long", TYPE 3
      *[Class: @IPolarBarSeries] CircleHeight
      * The circle height in pixels
               PROPERTY-GET, 7, @CircleHeight
                       RETURNING "long", TYPE 3
      *[Class: @IPolarBarSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-GET, 8, @CircleBackColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @IPolarBarSeries] CircleBackColor
      * The color used to fill the circle (for Polar series)
               PROPERTY-PUT, 8, @CircleBackColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @IPolarBarSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-GET, 9, @Circled
                       RETURNING "boolean", TYPE 11
      *[Class: @IPolarBarSeries] Circled
      * Controls if drawing an ellipse or a circle
               PROPERTY-PUT, 9, @Circled,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPolarBarSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-GET, 10, @RotationAngle
                       RETURNING "long", TYPE 3
      *[Class: @IPolarBarSeries] RotationAngle
      * From 0 to 360 degree, the circle rotation
               PROPERTY-PUT, 10, @RotationAngle,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPolarBarSeries] AngleToPoint
      * Converts an angle/radius to XY pixels coordinates
               METHOD, 11, @AngleToPoint,
                   "double" @Angle, TYPE 5,
                   "double" @AXRadius, TYPE 5,
                   "double" @AYRadius, TYPE 5
                       RETURNING "ITeePoint2D*", TYPE 9
      *[Class: @IPolarBarSeries] PointToAngle
      * Converts an XY pair of coordinates to an angle
               METHOD, 12, @PointToAngle,
                   "long" @XCoord, TYPE 3,
                   "long" @YCoord, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IPolarBarSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-GET, 30, @AngleIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IPolarBarSeries] AngleIncrement
      * The increment (in degrees) to show angle labels
               PROPERTY-PUT, 30, @AngleIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IPolarBarSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-GET, 31, @CloseCircle
                       RETURNING "boolean", TYPE 11
      *[Class: @IPolarBarSeries] CloseCircle
      * When True, the last polar point will be connected to the first point
               PROPERTY-PUT, 31, @CloseCircle,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPolarBarSeries] Pen
      * The Pen used to draw the polar lines
               PROPERTY-GET, 32, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPolarBarSeries] Pointer
      * The pointer attributes for polar points (point markers)
               PROPERTY-GET, 33, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IPolarBarSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-GET, 34, @RadiusIncrement
                       RETURNING "double", TYPE 5
      *[Class: @IPolarBarSeries] RadiusIncrement
      * The increment in radius scales to show the polar labels
               PROPERTY-PUT, 34, @RadiusIncrement,
                   "double (Property_Value)", TYPE 5
      *[Class: @IPolarBarSeries] AngleValues
      * The list of angle values for each polar point
               PROPERTY-GET, 35, @AngleValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPolarBarSeries] RadiusValues
      * The list of radius values for each polar point
               PROPERTY-GET, 36, @RadiusValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IPolarBarSeries] DrawRing
      * Draws a circular ring at "Value" radius in the "Z" plane
               METHOD, 38, @DrawRing,
                   "double" @Value, TYPE 5,
                   "long" @Z, TYPE 3
      *[Class: @IPolarBarSeries] CirclePen
      * The pen used to draw the circle border
               PROPERTY-GET, 39, @CirclePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IPolarBarSeries] CircleLabels
      * Outer circle Label characteristics
               PROPERTY-GET, 40, @CircleLabels
                       RETURNING "ICircleLabels*", TYPE 9
      *[Class: @IPolarBarSeries] Brush
      * Background Brush
               PROPERTY-GET, 3, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IPolarBarSeries] LoadBackImage
      * Load bitmap to background
               METHOD, 13, @LoadBackImage,
                   "BSTR" @FileName, TYPE 8
      *[Class: @IPolarBarSeries] ClearBackImage
      * Clear BackImage
               METHOD, 14, @ClearBackImage
      *[Class: @IPolarBarSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-GET, 155, @ClockWiseLabels
                       RETURNING "boolean", TYPE 11
      *[Class: @IPolarBarSeries] ClockWiseLabels
      * Sets the labels running clockwise/anticlockwise around the circle's 
               PROPERTY-PUT, 155, @ClockWiseLabels,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPolarBarSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-GET, 156, @CircleLabelsInside
                       RETURNING "boolean", TYPE 11
      *[Class: @IPolarBarSeries] CircleLabelsInside
      * Sets the labels inside/outside the circle's perimeter.
               PROPERTY-PUT, 156, @CircleLabelsInside,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IPolarBarSeries] Transparency
      * Fill transparency
               PROPERTY-GET, 115, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IPolarBarSeries] Transparency
      * Fill transparency
               PROPERTY-PUT, 115, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IPolarBarSeries] CircleGradient
      * Circle gradient characteristics for the back area of the polar serie.
               PROPERTY-GET, 301, @CircleGradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IPolarBarSeries] DrawZone
      * Draws an elliptical "zone"  (like a donut) from Min to Max (in axis 
               METHOD, 302, @DrawZone,
                   "double" @Min, TYPE 5,
                   "double" @Max, TYPE 5,
                   "long" @Z, TYPE 3
           
      * Bubble3D Series
           
      * IBubble3DSeries
           CLASS @IBubble3DSeries
               CLSID, D1E15CCE-49CF-40D1-B2BA-AB17189EB27A
               NAME, "IBubble3DSeries"
      *[Class: @IBubble3DSeries] AddXYZ
      * Adds a new cell value to the Series
               METHOD, 14, @AddXYZ,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IBubble3DSeries] MaxZValue
      * Maximum Z Value of Series
               METHOD, 1, @MaxZValue
                       RETURNING "double", TYPE 5
      *[Class: @IBubble3DSeries] MinZValue
      * Minimum Z Value of Series
               METHOD, 2, @MinZValue
                       RETURNING "double", TYPE 5
      *[Class: @IBubble3DSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-GET, 9, @TimesZOrder
                       RETURNING "long", TYPE 3
      *[Class: @IBubble3DSeries] TimesZOrder
      * The number of times the 3D effect is magnified
               PROPERTY-PUT, 9, @TimesZOrder,
                   "long (Property_Value)", TYPE 3
      *[Class: @IBubble3DSeries] ZValues
      * The list of Z coordinates for each cell
               PROPERTY-GET, 13, @ZValues
                       RETURNING "IValueList*", TYPE 9
      *[Class: @IBubble3DSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-GET, 5, @ZValue,
                   "long" @Index, TYPE 3
                       RETURNING "double", TYPE 5
      *[Class: @IBubble3DSeries] ZValue
      * Value of Indexth Z Point
               PROPERTY-PUT, 5, @ZValue,
                   "long" @Index, TYPE 3,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBubble3DSeries] Brush
      * The brush used to fill the surface cells
               PROPERTY-GET, 131, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IBubble3DSeries] Pen
      * The pen used to draw surface cell borders
               PROPERTY-GET, 134, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBubble3DSeries] AddArrayXYZ
      * Adds new cell values to the Series in the form of arrays
               METHOD, 135, @AddArrayXYZ,
                   "VARIANT" @XArray, TYPE 12,
                   "VARIANT" @YArray, TYPE 12,
                   "VARIANT" @ZArray, TYPE 12
      *[Class: @IBubble3DSeries] AddArrayGrid
      * Calls the AddXYZ method for each value in the array.
               METHOD, 201, @AddArrayGrid,
                   "long" @NumX, TYPE 3,
                   "long" @NumZ, TYPE 3,
                   "VARIANT" @XZArray, TYPE 12
      *[Class: @IBubble3DSeries] CalcZPos
      * Calculetes the ZPos of the ValueIndex
               METHOD, 202, @CalcZPos,
                   "long" @ValueIndex, TYPE 3
                       RETURNING "long", TYPE 3
      *[Class: @IBubble3DSeries] DepthSize
      * Depth of Points
               PROPERTY-GET, 101, @DepthSize
                       RETURNING "double", TYPE 5
      *[Class: @IBubble3DSeries] DepthSize
      * Depth of Points
               PROPERTY-PUT, 101, @DepthSize,
                   "double (Property_Value)", TYPE 5
      *[Class: @IBubble3DSeries] Pointer
      * The attributes of the line pointer (point markers)
               PROPERTY-GET, 102, @Pointer
                       RETURNING "IPointer*", TYPE 9
      *[Class: @IBubble3DSeries] LinePen
      * Pen for line between points
               PROPERTY-GET, 4, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBubble3DSeries] BaseLine
      * Show/Hide the BaseLine
               PROPERTY-GET, 301, @BaseLine
                       RETURNING "IPen*", TYPE 9
      *[Class: @IBubble3DSeries] AddBubble
      * Adds a new bubble point to the Series
               METHOD, 401, @AddBubble,
                   "double" @AX, TYPE 5,
                   "double" @AY, TYPE 5,
                   "double" @AZ, TYPE 5,
                   "double" @ARadius, TYPE 5,
                   "BSTR" @AXLabel, TYPE 8,
                   "OLE_COLOR" @Value, TYPE 19
                       RETURNING "long", TYPE 3
      *[Class: @IBubble3DSeries] RadiusValues
      * The list of bubble radius values
               PROPERTY-GET, 402, @RadiusValues
                       RETURNING "IValueList*", TYPE 9
           
      * Horizontal Histogram Series
           
      * IHorizHistogramSeries
           CLASS @IHorizHistogramSeries
               CLSID, 9CDC471C-3F18-4DA6-9F3E-BDD8F5A7A2B0
               NAME, "IHorizHistogramSeries"
      *[Class: @IHorizHistogramSeries] LinesPen
      * The LinePen property determines what kind of pen will be used for 
               PROPERTY-GET, 21, @LinesPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizHistogramSeries] Transparency
      * Fill Transparency
               PROPERTY-GET, 1, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @IHorizHistogramSeries] Transparency
      * Fill Transparency
               PROPERTY-PUT, 1, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @IHorizHistogramSeries] LinePen
      * Border LinePen
               PROPERTY-GET, 3, @LinePen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IHorizHistogramSeries] Brush
      * Series fill Brush
               PROPERTY-GET, 2, @Brush
                       RETURNING "IBrush*", TYPE 9
           
      * Light tool
           
      * ILightTool
           CLASS @ILightTool
               CLSID, 604B683A-EE58-4A0A-97D2-624315B88D0C
               NAME, "ILightTool"
      *[Class: @ILightTool] Factor
               PROPERTY-GET, 201, @Factor
                       RETURNING "long", TYPE 3
      *[Class: @ILightTool] Factor
               PROPERTY-PUT, 201, @Factor,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILightTool] Left
               PROPERTY-GET, 202, @Left
                       RETURNING "long", TYPE 3
      *[Class: @ILightTool] Left
               PROPERTY-PUT, 202, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILightTool] Style
               PROPERTY-GET, 203, @Style
                       RETURNING "ELightStyle", TYPE 3
      *[Class: @ILightTool] Style
               PROPERTY-PUT, 203, @Style,
                   "ELightStyle (Property_Value)", TYPE 3
      *[Class: @ILightTool] Top
               PROPERTY-GET, 204, @Top
                       RETURNING "long", TYPE 3
      *[Class: @ILightTool] Top
               PROPERTY-PUT, 204, @Top,
                   "long (Property_Value)", TYPE 3
      *[Class: @ILightTool] FollowMouse
               PROPERTY-GET, 205, @FollowMouse
                       RETURNING "boolean", TYPE 11
      *[Class: @ILightTool] FollowMouse
               PROPERTY-PUT, 205, @FollowMouse,
                   "boolean (Property_Value)", TYPE 11
           
      * Styles for LightTool
           
      * ELightStyle
           CLASS @ELightStyle
               CLSID, A8763E1A-FB0B-44EC-88E2-47DEFCFBB38D
               NAME, "ELightStyle"
      * "long lsLinear"
               ENUMERATOR, @lsLinear, 0
      * "long lsSpotLight"
               ENUMERATOR, @lsSpotLight, 1
           
      * SurfaceNearest Tool
           
      * ISurfaceNearestTool
           CLASS @ISurfaceNearestTool
               CLSID, 75D82B14-E909-45C4-B965-FC27F56307FF
               NAME, "ISurfaceNearestTool"
      *[Class: @ISurfaceNearestTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISurfaceNearestTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ISurfaceNearestTool] CellColor
               PROPERTY-GET, 201, @CellColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISurfaceNearestTool] CellColor
               PROPERTY-PUT, 201, @CellColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ISurfaceNearestTool] ColumnColor
               PROPERTY-GET, 202, @ColumnColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISurfaceNearestTool] ColumnColor
               PROPERTY-PUT, 202, @ColumnColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ISurfaceNearestTool] RowColor
               PROPERTY-GET, 203, @RowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ISurfaceNearestTool] RowColor
               PROPERTY-PUT, 203, @RowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ISurfaceNearestTool] SelectedCell
      * Cell Selected
               PROPERTY-GET, 301, @SelectedCell
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceNearestTool] SelectedCell
      * Cell Selected
               PROPERTY-PUT, 301, @SelectedCell,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISurfaceNearestTool] GetRow
      * Gets the Row of the Selected Cell
               METHOD, 302, @GetRow
                       RETURNING "long", TYPE 3
      *[Class: @ISurfaceNearestTool] GetCol
      * Gets the Col of the Selected Cell
               METHOD, 303, @GetCol
                       RETURNING "long", TYPE 3
           
      * Axis Scroll tool enables mouse dragging of axis to scroll them.
           
      * IAxisScrollTool
           CLASS @IAxisScrollTool
               CLSID, 61298754-F5DA-4E38-BBB0-57162A213F0B
               NAME, "IAxisScrollTool"
      *[Class: @IAxisScrollTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-GET, 13, @Axis
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IAxisScrollTool] Axis
      * Sets the Axis to which the Tool is associated.
               PROPERTY-PUT, 13, @Axis,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IAxisScrollTool] ScrollInverted
      * Inverts the Scroll
               PROPERTY-GET, 301, @ScrollInverted
                       RETURNING "boolean", TYPE 11
      *[Class: @IAxisScrollTool] ScrollInverted
      * Inverts the Scroll
               PROPERTY-PUT, 301, @ScrollInverted,
                   "boolean (Property_Value)", TYPE 11
           
      * ICustomSortedFunction
           CLASS @ICustomSortedFunction
               CLSID, 391DBC00-16EA-4D2E-A388-5F1C1D69D0BB
               NAME, "ICustomSortedFunction"
      *[Class: @ICustomSortedFunction] IncludeNulls
               PROPERTY-GET, 301, @IncludeNulls
                       RETURNING "boolean", TYPE 11
      *[Class: @ICustomSortedFunction] IncludeNulls
               PROPERTY-PUT, 301, @IncludeNulls,
                   "boolean (Property_Value)", TYPE 11
           
      * Mode Fuction
           
      * IModeFunction
           CLASS @IModeFunction
               CLSID, B1F2C44E-C0FD-447E-8BF1-B725A05CFAB8
               NAME, "IModeFunction"
      *[Class: @IModeFunction] IncludeNulls
               PROPERTY-GET, 301, @IncludeNulls
                       RETURNING "boolean", TYPE 11
      *[Class: @IModeFunction] IncludeNulls
               PROPERTY-PUT, 301, @IncludeNulls,
                   "boolean (Property_Value)", TYPE 11
           
      * Median Function
           
      * IMedianFunction
           CLASS @IMedianFunction
               CLSID, D2289B18-7090-44BC-91E7-F08D2C85141F
               NAME, "IMedianFunction"
      *[Class: @IMedianFunction] IncludeNulls
               PROPERTY-GET, 301, @IncludeNulls
                       RETURNING "boolean", TYPE 11
      *[Class: @IMedianFunction] IncludeNulls
               PROPERTY-PUT, 301, @IncludeNulls,
                   "boolean (Property_Value)", TYPE 11
           
      * Correlation function calculates a coefficient value from -1 to 1
           
      * ICorrelationFunction
           CLASS @ICorrelationFunction
               CLSID, 41B79EF8-E119-496D-AFB6-18E0183298D6
               NAME, "ICorrelationFunction"
           
      * IVarianceFunction
           CLASS @IVarianceFunction
               CLSID, 861F0666-6B63-453B-9740-BAEF9CA8144D
               NAME, "IVarianceFunction"
           
      * IPerimeterFunction
           CLASS @IPerimeterFunction
               CLSID, 022B3C79-6AE1-4661-8794-302D21F55F68
               NAME, "IPerimeterFunction"
           
      * Theme options to apply to Chart
           
      * EChartTheme
           CLASS @EChartTheme
               CLSID, 44314E6B-9FFC-4FEF-8CB2-1E87A3A4C227
               NAME, "EChartTheme"
      * "long ctDefault"
               ENUMERATOR, @ctDefault, 0
      * "long ctExcel"
               ENUMERATOR, @ctExcel, 1
      * "long ctClassic"
               ENUMERATOR, @ctClassic, 2
      * "long ctBusiness"
               ENUMERATOR, @ctBusiness, 3
      * "long ctWeb"
               ENUMERATOR, @ctWeb, 4
      * "long ctWindowsXP"
               ENUMERATOR, @ctWindowsXP, 5
      * "long ctBlueSky"
               ENUMERATOR, @ctBlueSky, 6
      * "long ctFacts"
               ENUMERATOR, @ctFacts, 7
           
      * Palettes to be applied to Chart Theme
           
      * EColorPalette
           CLASS @EColorPalette
               CLSID, 1557BB6F-E3A8-460E-8D9A-D62FAC00D200
               NAME, "EColorPalette"
      * "long cpTeeChart"
               ENUMERATOR, @cpTeeChart, 0
      * "long cpExcel"
               ENUMERATOR, @cpExcel, 1
      * "long cpVictorian"
               ENUMERATOR, @cpVictorian, 2
      * "long cpPastel"
               ENUMERATOR, @cpPastel, 3
      * "long cpSolid"
               ENUMERATOR, @cpSolid, 4
      * "long cpClassic"
               ENUMERATOR, @cpClassic, 5
      * "long cpWeb"
               ENUMERATOR, @cpWeb, 6
      * "long cpModern"
               ENUMERATOR, @cpModern, 7
      * "long cpRainbow"
               ENUMERATOR, @cpRainbow, 8
      * "long cpWindowsXP"
               ENUMERATOR, @cpWindowsXP, 9
      * "long cpDefault"
               ENUMERATOR, @cpDefault, 10
           
      * IDownSamplingFunction
           CLASS @IDownSamplingFunction
               CLSID, 6055A290-FD26-4872-9689-96FAE404819C
               NAME, "IDownSamplingFunction"
      *[Class: @IDownSamplingFunction] DownSampleMethod
               PROPERTY-GET, 201, @DownSampleMethod
                       RETURNING "EDownSampleMethod", TYPE 3
      *[Class: @IDownSamplingFunction] DownSampleMethod
               PROPERTY-PUT, 201, @DownSampleMethod,
                   "EDownSampleMethod (Property_Value)", TYPE 3
      *[Class: @IDownSamplingFunction] Tolerance
      * Tolerance
               PROPERTY-GET, 202, @Tolerance
                       RETURNING "long", TYPE 3
      *[Class: @IDownSamplingFunction] Tolerance
      * Tolerance
               PROPERTY-PUT, 202, @Tolerance,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDownSamplingFunction] ReducedSize
      * Reduced Size
               PROPERTY-GET, 203, @ReducedSize
                       RETURNING "long", TYPE 3
           
      * DownSampleMethod procedure
           
      * EDownSampleMethod
           CLASS @EDownSampleMethod
               CLSID, 4E334E5B-AC33-4D94-81CD-D9DC0464A715
               NAME, "EDownSampleMethod"
      * "long dsDouglas"
               ENUMERATOR, @dsDouglas, 0
      * "long dsMax"
               ENUMERATOR, @dsMax, 1
      * "long dsMin"
               ENUMERATOR, @dsMin, 2
      * "long dsMinMax"
               ENUMERATOR, @dsMinMax, 3
      * "long dsAverage"
               ENUMERATOR, @dsAverage, 4
           
      * Series List
           
      * ISeriesList
           CLASS @ISeriesList
               CLSID, 35CDCB69-D82C-498E-95F0-347D789D6CB7
               NAME, "ISeriesList"
      *[Class: @ISeriesList] AddGroup
      * Method to Add a new Group
               METHOD, 201, @AddGroup,
                   "BSTR" @Name, TYPE 8
      *[Class: @ISeriesList] AllActive
      * All Groups Active
               PROPERTY-GET, 202, @AllActive
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeriesList] AllActive
      * All Groups Active
               PROPERTY-PUT, 202, @AllActive,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeriesList] Groups
      * Groups Collection
               PROPERTY-GET, 203, @Groups
                       RETURNING "ISeriesGroups*", TYPE 9
      *[Class: @ISeriesList] ClearValues
      * Remove all values from all series in chart
               METHOD, 204, @ClearValues
           
      * Groups of Series
           
      * ISeriesGroup
           CLASS @ISeriesGroup
               CLSID, A6B9FBB2-04C3-45C9-BCD7-2FC7C2F0FB23
               NAME, "ISeriesGroup"
      *[Class: @ISeriesGroup] Add
      * Add Series to the Group
               METHOD, 201, @Add,
                   "long" @SeriesIndex, TYPE 3
      *[Class: @ISeriesGroup] Hide
      * Hide the Series
               METHOD, 202, @Hide
      *[Class: @ISeriesGroup] Show
      * Show the Series
               METHOD, 203, @Show
      *[Class: @ISeriesGroup] Active
      * Ative Series of the Group
               PROPERTY-GET, 204, @Active
                       RETURNING "ESeriesGroupActive", TYPE 3
      *[Class: @ISeriesGroup] Active
      * Ative Series of the Group
               PROPERTY-PUT, 204, @Active,
                   "ESeriesGroupActive (Property_Value)", TYPE 3
      *[Class: @ISeriesGroup] Name
      * Set Name to GroupSeries
               PROPERTY-GET, 205, @Name
                       RETURNING "BSTR", TYPE 8
      *[Class: @ISeriesGroup] Name
      * Set Name to GroupSeries
               PROPERTY-PUT, 205, @Name,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ISeriesGroup] SeriesCount
      * Count of Series in the Group
               PROPERTY-GET, 206, @SeriesCount
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISeriesGroup] GroupLink
               PROPERTY-GET, 207, @GroupLink
                       RETURNING "long", TYPE 3
      *[Class: @ISeriesGroup] Delete
      * Delete indexed Series from Group
               METHOD, 208, @Delete,
                   "long" @Index, TYPE 3
      *[Class: @ISeriesGroup] Insert
      * Insert Series into Group list
               METHOD, 209, @Insert,
                   "long" @IndexInGroup, TYPE 3,
                   "long" @SeriesIndex, TYPE 3
           
      * Styles of SeriesGroup Active
           
      * ESeriesGroupActive
           CLASS @ESeriesGroupActive
               CLSID, 43BFBAFC-3F32-4D66-8935-66B170D79C09
               NAME, "ESeriesGroupActive"
      * "long gaYes"
               ENUMERATOR, @gaYes, 0
      * "long gaNo"
               ENUMERATOR, @gaNo, 1
      * "long gaSome"
               ENUMERATOR, @gaSome, 2
           
      * Collection of SeriesGroup
           
      * ISeriesGroups
           CLASS @ISeriesGroups
               CLSID, 8C62DEBC-E051-4B48-821F-A9830BBD2373
               NAME, "ISeriesGroups"
      *[Class: @ISeriesGroups] Items
      * List of SeriesGroups
               PROPERTY-GET, 201, @Items,
                   "long" @Index, TYPE 3
                       RETURNING "ISeriesGroup*", TYPE 9
      *[Class: @ISeriesGroups] Count
      * No. of groups
               PROPERTY-GET, 202, @Count
                       RETURNING "long", TYPE 3
      *[Class: @ISeriesGroups] Delete
      * Delete indexed Group
               METHOD, 208, @Delete,
                   "long" @Index, TYPE 3
           
      * Styles of Check
           
      * ECheckBoxesStyle
           CLASS @ECheckBoxesStyle
               CLSID, A47FA2A7-3E68-408E-BD4E-4799E7221EC9
               NAME, "ECheckBoxesStyle"
      * "long cbsCheck"
               ENUMERATOR, @cbsCheck, 0
      * "long cbsRadio"
               ENUMERATOR, @cbsRadio, 1
           
      * Series Band Tool
           
      * ISeriesBandTool
           CLASS @ISeriesBandTool
               CLSID, B38DFCA0-E58C-47EE-A98F-4175E1FAFECE
               NAME, "ISeriesBandTool"
      *[Class: @ISeriesBandTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-GET, 14, @Series
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISeriesBandTool] Series
      * Sets the Series to which the Tool is associated.
               PROPERTY-PUT, 14, @Series,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ISeriesBandTool] Brush
               PROPERTY-GET, 301, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ISeriesBandTool] DrawBehindSeries
               PROPERTY-GET, 302, @DrawBehindSeries
                       RETURNING "boolean", TYPE 11
      *[Class: @ISeriesBandTool] DrawBehindSeries
               PROPERTY-PUT, 302, @DrawBehindSeries,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISeriesBandTool] Gradient
               PROPERTY-GET, 303, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ISeriesBandTool] Pen
               PROPERTY-GET, 304, @Pen
                       RETURNING "IPen*", TYPE 9
      *[Class: @ISeriesBandTool] Series2
      * Gets the Series2 to which the Tool is associated.
               PROPERTY-GET, 305, @Series2
                       RETURNING "VARIANT", TYPE 12
      *[Class: @ISeriesBandTool] Series2
      * Gets the Series2 to which the Tool is associated.
               PROPERTY-PUT, 305, @Series2,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @ISeriesBandTool] Transparency
               PROPERTY-GET, 306, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ISeriesBandTool] Transparency
               PROPERTY-PUT, 306, @Transparency,
                   "long (Property_Value)", TYPE 3
           
      * Selector Tool
           
      * ISelectorTool
           CLASS @ISelectorTool
               CLSID, 630CF628-0DD2-42AE-B2EE-00B6C69FF482
               NAME, "ISelectorTool"
      *[Class: @ISelectorTool] AllowDrag
      * Gets if Drag is allowed
               PROPERTY-GET, 201, @AllowDrag
                       RETURNING "boolean", TYPE 11
      *[Class: @ISelectorTool] AllowDrag
      * Gets if Drag is allowed
               PROPERTY-PUT, 201, @AllowDrag,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISelectorTool] AllowResizeChart
      * Gets is ResizeChart is allowed
               PROPERTY-GET, 202, @AllowResizeChart
                       RETURNING "boolean", TYPE 11
      *[Class: @ISelectorTool] AllowResizeChart
      * Gets is ResizeChart is allowed
               PROPERTY-PUT, 202, @AllowResizeChart,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ISelectorTool] Brush
               PROPERTY-GET, 203, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @ISelectorTool] HandleSize
               PROPERTY-GET, 204, @HandleSize
                       RETURNING "long", TYPE 3
      *[Class: @ISelectorTool] HandleSize
               PROPERTY-PUT, 204, @HandleSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ISelectorTool] Pen
               PROPERTY-GET, 205, @Pen
                       RETURNING "IPen*", TYPE 9
           
      * Buttons of TeeCommander
           
      * ITeeCommanderButton
           CLASS @ITeeCommanderButton
               CLSID, C18A7EA0-C12B-443B-AEA2-19BE15E4DB52
               NAME, "ITeeCommanderButton"
      *[Class: @ITeeCommanderButton] Hide
      * Hide a TeeCommander button
               METHOD, 201, @Hide
           
      * Array of TPoint
           
      * IPointArray
           CLASS @IPointArray
               CLSID, 1DA91119-FBF8-4258-BFA0-09C95992B564
               NAME, "IPointArray"
      *[Class: @IPointArray] Count
      * Gets Count of the Points
               PROPERTY-GET, 201, @Count
                       RETURNING "long", TYPE 3
      *[Class: @IPointArray] Item
      * Gets Item of TPoint
               PROPERTY-GET, 202, @Item,
                   "long" @Index, TYPE 3
                       RETURNING "ITeePoint2D*", TYPE 9
           
      * ECandleColorStyle
           CLASS @ECandleColorStyle
               CLSID, 930BFE2E-23FE-40FD-B270-A55B67828530
               NAME, "ECandleColorStyle"
      * "long cssRelativeToOpen"
               ENUMERATOR, @cssRelativeToOpen, 0
      * "long cssRelativeToClose"
               ENUMERATOR, @cssRelativeToClose, 1
           
      * RectangleTool
           
      * IRectangleTool
           CLASS @IRectangleTool
               CLSID, 20EC0AFB-2062-4FD9-A2CA-5A4D8DCAEDEE
               NAME, "IRectangleTool"
      *[Class: @IRectangleTool] Position
      * Defines the position of the text
               PROPERTY-GET, 2, @Position
                       RETURNING "EAnnotationPosition", TYPE 3
      *[Class: @IRectangleTool] Position
      * Defines the position of the text
               PROPERTY-PUT, 2, @Position,
                   "EAnnotationPosition (Property_Value)", TYPE 3
      *[Class: @IRectangleTool] Shape
      * Defines the shape of the text box
               PROPERTY-GET, 3, @Shape
                       RETURNING "ITeeShapePanel*", TYPE 9
      *[Class: @IRectangleTool] Text
      * Annotation Tool text
               PROPERTY-GET, 4, @Text
                       RETURNING "BSTR", TYPE 8
      *[Class: @IRectangleTool] Text
      * Annotation Tool text
               PROPERTY-PUT, 4, @Text,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IRectangleTool] Callout
      * Defines properties used to draw line from the annotation to a position 
               PROPERTY-GET, 201, @Callout
                       RETURNING "IAnnotationCallout*", TYPE 9
      *[Class: @IRectangleTool] TextAlignment
      * Determines horizontal alignment of text displayed inside the Annotation 
               PROPERTY-GET, 202, @TextAlignment
                       RETURNING "ETextAlignment", TYPE 3
      *[Class: @IRectangleTool] TextAlignment
      * Determines horizontal alignment of text displayed inside the Annotation 
               PROPERTY-PUT, 202, @TextAlignment,
                   "ETextAlignment (Property_Value)", TYPE 3
      *[Class: @IRectangleTool] Clicked
      * True when Annotation clicked
               METHOD, 203, @Clicked,
                   "long" @X, TYPE 3,
                   "long" @Y, TYPE 3
                       RETURNING "boolean", TYPE 11
      *[Class: @IRectangleTool] Width
      * Gets the Width of the Annotation
               PROPERTY-GET, 204, @Width
                       RETURNING "long", TYPE 3
      *[Class: @IRectangleTool] Width
      * Gets the Width of the Annotation
               PROPERTY-PUT, 204, @Width,
                   "long (Property_Value)", TYPE 3
      *[Class: @IRectangleTool] Height
      * Gets the Height of the Annotation
               PROPERTY-GET, 205, @Height
                       RETURNING "long", TYPE 3
      *[Class: @IRectangleTool] Height
      * Gets the Height of the Annotation
               PROPERTY-PUT, 205, @Height,
                   "long (Property_Value)", TYPE 3
      *[Class: @IRectangleTool] Cursor
      * Defines the Annotation cursor
               PROPERTY-GET, 206, @Cursor
                       RETURNING "short", TYPE 2
      *[Class: @IRectangleTool] Cursor
      * Defines the Annotation cursor
               PROPERTY-PUT, 206, @Cursor,
                   "short (Property_Value)", TYPE 2
      *[Class: @IRectangleTool] Left
               PROPERTY-GET, 207, @Left
                       RETURNING "long", TYPE 3
      *[Class: @IRectangleTool] Left
               PROPERTY-PUT, 207, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @IRectangleTool] Top
               PROPERTY-GET, 208, @Top
                       RETURNING "long", TYPE 3
      *[Class: @IRectangleTool] Top
               PROPERTY-PUT, 208, @Top,
                   "long (Property_Value)", TYPE 3
      *[Class: @IRectangleTool] AutoSize
               PROPERTY-GET, 209, @AutoSize
                       RETURNING "boolean", TYPE 11
      *[Class: @IRectangleTool] AutoSize
               PROPERTY-PUT, 209, @AutoSize,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IRectangleTool] Bounds
               PROPERTY-GET, 210, @Bounds
                       RETURNING "TeeRect", TYPE 0
           
      * DataTable Tool
           
      * IDataTableTool
           CLASS @IDataTableTool
               CLSID, 5CFFA5B4-7A2A-41C6-B9E3-031796E246FC
               NAME, "IDataTableTool"
      *[Class: @IDataTableTool] AutoPosition
               PROPERTY-GET, 201, @AutoPosition
                       RETURNING "boolean", TYPE 11
      *[Class: @IDataTableTool] AutoPosition
               PROPERTY-PUT, 201, @AutoPosition,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDataTableTool] Brush
               PROPERTY-GET, 202, @Brush
                       RETURNING "IBrush*", TYPE 9
      *[Class: @IDataTableTool] ClipText
               PROPERTY-GET, 203, @ClipText
                       RETURNING "boolean", TYPE 11
      *[Class: @IDataTableTool] ClipText
               PROPERTY-PUT, 203, @ClipText,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDataTableTool] ColumnPen
               PROPERTY-GET, 204, @ColumnPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IDataTableTool] Font
               PROPERTY-GET, 205, @Font
                       RETURNING "IChartFont*", TYPE 9
      *[Class: @IDataTableTool] Inverted
               PROPERTY-GET, 206, @Inverted
                       RETURNING "boolean", TYPE 11
      *[Class: @IDataTableTool] Inverted
               PROPERTY-PUT, 206, @Inverted,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IDataTableTool] Left
               PROPERTY-GET, 207, @Left
                       RETURNING "long", TYPE 3
      *[Class: @IDataTableTool] Left
               PROPERTY-PUT, 207, @Left,
                   "long (Property_Value)", TYPE 3
      *[Class: @IDataTableTool] Legend
               PROPERTY-GET, 208, @Legend
                       RETURNING "ITableLegend*", TYPE 9
      *[Class: @IDataTableTool] RowPen
               PROPERTY-GET, 209, @RowPen
                       RETURNING "IPen*", TYPE 9
      *[Class: @IDataTableTool] Top
               PROPERTY-GET, 210, @Top
                       RETURNING "long", TYPE 3
      *[Class: @IDataTableTool] Top
               PROPERTY-PUT, 210, @Top,
                   "long (Property_Value)", TYPE 3
           
      * ITableLegend
           CLASS @ITableLegend
               CLSID, E0B8AC26-5872-45E4-90EB-C1579952E89A
               NAME, "ITableLegend"
      *[Class: @ITableLegend] Color
      * Colour for Title background
               PROPERTY-GET, 108, @Color
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITableLegend] Color
      * Colour for Title background
               PROPERTY-PUT, 108, @Color,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITableLegend] Font
      * Font used to draw text
               PROPERTY-GET, 104, @Font
                       RETURNING "ITeeFont*", TYPE 9
      *[Class: @ITableLegend] Gradient
      * Call Gradient characteristics for the shape.
               PROPERTY-GET, 101, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @ITableLegend] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-GET, 1012, @ShadowSize
                       RETURNING "long", TYPE 3
      *[Class: @ITableLegend] ShadowSize
      * Size in pixels of shape's shadowed items.
               PROPERTY-PUT, 1012, @ShadowSize,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITableLegend] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-GET, 102, @ShadowColor
                       RETURNING "OLE_COLOR", TYPE 19
      *[Class: @ITableLegend] ShadowColor
      * Colour of shape's shadowed items.
               PROPERTY-PUT, 102, @ShadowColor,
                   "OLE_COLOR (Property_Value)", TYPE 19
      *[Class: @ITableLegend] Transparent
      * When True, Background not filled
               PROPERTY-GET, 1013, @Transparent
                       RETURNING "boolean", TYPE 11
      *[Class: @ITableLegend] Transparent
      * When True, Background not filled
               PROPERTY-PUT, 1013, @Transparent,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITableLegend] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-GET, 103, @ShapeStyle
                       RETURNING "EChartObjectShapeStyle", TYPE 3
      *[Class: @ITableLegend] ShapeStyle
      * Shape may be rectagular or rounded rectangular in shape.
               PROPERTY-PUT, 103, @ShapeStyle,
                   "EChartObjectShapeStyle (Property_Value)", TYPE 3
      *[Class: @ITableLegend] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-GET, 126, @Transparency
                       RETURNING "long", TYPE 3
      *[Class: @ITableLegend] Transparency
      * Value between 0 and 100 which sets the transparency percentage with 
               PROPERTY-PUT, 126, @Transparency,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITableLegend] ShapeBounds
      * Returns a rectangle defining shape boundery
               PROPERTY-GET, 133, @ShapeBounds
                       RETURNING "ITeeRect*", TYPE 9
      *[Class: @ITableLegend] Bevel
      * Bevel style
               PROPERTY-GET, 313, @Bevel
                       RETURNING "EPanelBevel", TYPE 3
      *[Class: @ITableLegend] Bevel
      * Bevel style
               PROPERTY-PUT, 313, @Bevel,
                   "EPanelBevel (Property_Value)", TYPE 3
      *[Class: @ITableLegend] BevelWidth
      * Bevel size
               PROPERTY-GET, 314, @BevelWidth
                       RETURNING "long", TYPE 3
      *[Class: @ITableLegend] BevelWidth
      * Bevel size
               PROPERTY-PUT, 314, @BevelWidth,
                   "long (Property_Value)", TYPE 3
      *[Class: @ITableLegend] ShowEditorShape
      * Shows a dialog to modify the current shape properties
               METHOD, 201, @ShowEditorShape
      *[Class: @ITableLegend] Shadow
      * Call Shadow characteristics for the shape
               PROPERTY-GET, 202, @Shadow
                       RETURNING "ITeeShadow*", TYPE 9
      *[Class: @ITableLegend] Symbol
               PROPERTY-GET, 308, @Symbol
                       RETURNING "ILegendSymbol*", TYPE 9
      *[Class: @ITableLegend] FontSeriesColor
               PROPERTY-GET, 301, @FontSeriesColor
                       RETURNING "boolean", TYPE 11
      *[Class: @ITableLegend] FontSeriesColor
               PROPERTY-PUT, 301, @FontSeriesColor,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ITableLegend] Otherside
               PROPERTY-GET, 302, @Otherside
                       RETURNING "boolean", TYPE 11
      *[Class: @ITableLegend] Otherside
               PROPERTY-PUT, 302, @Otherside,
                   "boolean (Property_Value)", TYPE 11
           
      * Load Mode for SeriesXMLSource
           
      * ELoadMode
           CLASS @ELoadMode
               CLSID, 594F0014-A76A-458C-B558-D44601350F39
               NAME, "ELoadMode"
      * "long lmClear"
               ENUMERATOR, @lmClear, 0
      * "long lmAppend"
               ENUMERATOR, @lmAppend, 1
           
      * VolumePipe Series
           
      * IVolumePipeSeries
           CLASS @IVolumePipeSeries
               CLSID, 8057E20B-E663-45A4-8BA9-95ADDF1F78F4
               NAME, "IVolumePipeSeries"
      *[Class: @IVolumePipeSeries] ConePercent
               PROPERTY-GET, 202, @ConePercent
                       RETURNING "long", TYPE 3
      *[Class: @IVolumePipeSeries] ConePercent
               PROPERTY-PUT, 202, @ConePercent,
                   "long (Property_Value)", TYPE 3
      *[Class: @IVolumePipeSeries] Gradient
               PROPERTY-GET, 203, @Gradient
                       RETURNING "IGradient*", TYPE 9
      *[Class: @IVolumePipeSeries] LinesPen
               PROPERTY-GET, 204, @LinesPen
                       RETURNING "IPen*", TYPE 9
           
      * ILegendItem
           CLASS @ILegendItem
               CLSID, D2EF0254-D0F2-4119-9C04-842F667C55B2
               NAME, "ILegendItem"
      *[Class: @ILegendItem] SymbolRect
               PROPERTY-GET, 201, @SymbolRect
                       RETURNING "TeeRect", TYPE 0
      *[Class: @ILegendItem] SymbolRect
               PROPERTY-PUT, 201, @SymbolRect,
                   "TeeRect (Property_Value)", TYPE 0
      *[Class: @ILegendItem] Align
               PROPERTY-GET, 202, @Align
                       RETURNING "long", TYPE 3
      *[Class: @ILegendItem] Left
               PROPERTY-GET, 203, @Left
                       RETURNING "long", TYPE 3
      *[Class: @ILegendItem] Text
               PROPERTY-GET, 204, @Text
                       RETURNING "BSTR", TYPE 8
      *[Class: @ILegendItem] Text
               PROPERTY-PUT, 204, @Text,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @ILegendItem] Top
               PROPERTY-GET, 205, @Top
                       RETURNING "long", TYPE 3
           
      * ILegendItems
           CLASS @ILegendItems
               CLSID, C2BA59BF-254E-4C20-9706-450B843FE15F
               NAME, "ILegendItems"
      *[Class: @ILegendItems] Clear
               METHOD, 201, @Clear
      *[Class: @ILegendItems] Custom
               PROPERTY-GET, 202, @Custom
                       RETURNING "boolean", TYPE 11
      *[Class: @ILegendItems] Custom
               PROPERTY-PUT, 202, @Custom,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @ILegendItems] Items
               PROPERTY-GET, 203, @Items,
                   "long" @Index, TYPE 3
                       RETURNING "ILegendItem*", TYPE 9
