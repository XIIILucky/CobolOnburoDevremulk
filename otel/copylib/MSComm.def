      >>IMP(ACU-CBLFLAGS=-Sa)
      * D:\asya\acugt.ytl\otel\Copylib\MSComm.def - ActiveX control definitions 
      * This is a 32-bit control
      * Generated by axdefgen version 9.2.5
      * Generated: Wednesday, November 04, 2020
      * Typelib..: C:\Windows\SysWow64\MSCOMM32.OCX
           
           OBJECT @MSCommLib
           
      * MS Comm Control Handshake Constants
           
      * HandshakingConstants
           CLASS @HandshakingConstants
               CLSID, 4B4B0391-6897-11CF-953F-0020AFC28C3B
               NAME, "HandshakingConstants"
      * "long NoHandshaking"
               ENUMERATOR, @NoHandshaking, 0
      * "long XonXoff"
               ENUMERATOR, @XonXoff, 1
      * "long RtsCts"
               ENUMERATOR, @RtsCts, 2
      * "long XonXoffAndRtsCts"
               ENUMERATOR, @XonXoffAndRtsCts, 3
           
      * MS Comm Control Handshake Constants
           
      * HandshakeConstants
           CLASS @HandshakeConstants
               CLSID, 72F05B40-B530-101B-82B6-000000000014
               NAME, "HandshakeConstants"
      * "long comNone"
               ENUMERATOR, @comNone, 0
      * "long comXOnXoff"
               ENUMERATOR, @comXOnXoff, 1
      * "long comRTS"
               ENUMERATOR, @comRTS, 2
      * "long comRTSXOnXOff"
               ENUMERATOR, @comRTSXOnXOff, 3
           
      * Error Constants
           
      * ErrorConstants
           CLASS @ErrorConstants
               CLSID, 7C4FC790-BE64-11CF-95DA-0020AFC28C3B
               NAME, "ErrorConstants"
      * "long comInvalidPropertyValue"
               ENUMERATOR, @comInvalidPropertyValue, 380
      * "long comGetNotSupported"
               ENUMERATOR, @comGetNotSupported, 394
      * "long comSetNotSupported"
               ENUMERATOR, @comSetNotSupported, 383
      * "long comPortInvalid"
               ENUMERATOR, @comPortInvalid, 8002
      * "long comPortAlreadyOpen"
               ENUMERATOR, @comPortAlreadyOpen, 8005
      * "long comPortOpen"
               ENUMERATOR, @comPortOpen, 8000
      * "long comNoOpen"
               ENUMERATOR, @comNoOpen, 8012
      * "long comSetCommStateFailed"
               ENUMERATOR, @comSetCommStateFailed, 8015
      * "long comPortNotOpen"
               ENUMERATOR, @comPortNotOpen, 8018
      * "long comReadError"
               ENUMERATOR, @comReadError, 8020
      * "long comDCBError"
               ENUMERATOR, @comDCBError, 8021
      * "long comBreak"
               ENUMERATOR, @comBreak, 1001
      * "long comCTSTO"
               ENUMERATOR, @comCTSTO, 1002
      * "long comDSRTO"
               ENUMERATOR, @comDSRTO, 1003
      * "long comFrame"
               ENUMERATOR, @comFrame, 1004
      * "long comOverrun"
               ENUMERATOR, @comOverrun, 1006
      * "long comCDTO"
               ENUMERATOR, @comCDTO, 1007
      * "long comRxOver"
               ENUMERATOR, @comRxOver, 1008
      * "long comRxParity"
               ENUMERATOR, @comRxParity, 1009
      * "long comTxFull"
               ENUMERATOR, @comTxFull, 1010
      * "long comDCB"
               ENUMERATOR, @comDCB, 1011
           
      * Error constants.
           
      * CommEventConstants
           CLASS @CommEventConstants
               CLSID, 8E6EB360-C3B1-11CF-8E6B-00A0C90F26F8
               NAME, "CommEventConstants"
      * "long comEventBreak"
               ENUMERATOR, @comEventBreak, 1001
      * "long comEventCTSTO"
               ENUMERATOR, @comEventCTSTO, 1002
      * "long comEventDSRTO"
               ENUMERATOR, @comEventDSRTO, 1003
      * "long comEventFrame"
               ENUMERATOR, @comEventFrame, 1004
      * "long comEventOverrun"
               ENUMERATOR, @comEventOverrun, 1006
      * "long comEventCDTO"
               ENUMERATOR, @comEventCDTO, 1007
      * "long comEventRxOver"
               ENUMERATOR, @comEventRxOver, 1008
      * "long comEventRxParity"
               ENUMERATOR, @comEventRxParity, 1009
      * "long comEventTxFull"
               ENUMERATOR, @comEventTxFull, 1010
      * "long comEventDCB"
               ENUMERATOR, @comEventDCB, 1011
           
      * OnComm constants.
           
      * OnCommConstants
           CLASS @OnCommConstants
               CLSID, 00000000-0000-0000-0000-000000000000
               NAME, "OnCommConstants"
      * "long comEvSend"
               ENUMERATOR, @comEvSend, 1
      * "long comEvReceive"
               ENUMERATOR, @comEvReceive, 2
      * "long comEvCTS"
               ENUMERATOR, @comEvCTS, 3
      * "long comEvDSR"
               ENUMERATOR, @comEvDSR, 4
      * "long comEvCD"
               ENUMERATOR, @comEvCD, 5
      * "long comEvRing"
               ENUMERATOR, @comEvRing, 6
      * "long comEvEOF"
               ENUMERATOR, @comEvEOF, 7
           
      * InputMode Constants
           
      * InputModeConstants
           CLASS @InputModeConstants
               CLSID, 00000000-0000-0000-0000-000000000000
               NAME, "InputModeConstants"
      * "long comInputModeText"
               ENUMERATOR, @comInputModeText, 0
      * "long comInputModeBinary"
               ENUMERATOR, @comInputModeBinary, 1
           
      * Dispatch interface for Microsoft Comm Control
           
      * IMSComm
           CLASS @IMSComm
               CLSID, E6E17E90-DF38-11CF-8E74-00A0C90F26F8
               NAME, "IMSComm"
      *[Class: @IMSComm] CDHolding
      * Determines whether the carrier is present by querying the state of the 
               PROPERTY-PUT, 1, @CDHolding,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMSComm] CDHolding
      * Determines whether the carrier is present by querying the state of the 
               PROPERTY-GET, 1, @CDHolding
                       RETURNING "boolean", TYPE 11
      *[Class: @IMSComm] CDTimeout
      * Returns/sets the maximum amount of time the control waits for the 
               PROPERTY-PUT, 2, @CDTimeout,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMSComm] CDTimeout
      * Returns/sets the maximum amount of time the control waits for the 
               PROPERTY-GET, 2, @CDTimeout
                       RETURNING "long", TYPE 3
      *[Class: @IMSComm] CommID
      * Returns a handle that identifies the communications device.
               PROPERTY-PUT, 3, @CommID,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMSComm] CommID
      * Returns a handle that identifies the communications device.
               PROPERTY-GET, 3, @CommID
                       RETURNING "long", TYPE 3
      *[Class: @IMSComm] CommPort
      * Returns/sets the communications port number.
               PROPERTY-PUT, 4, @CommPort,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] CommPort
      * Returns/sets the communications port number.
               PROPERTY-GET, 4, @CommPort
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] _CommPort
               PROPERTY-PUT, 0, @_CommPort,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] _CommPort
               PROPERTY-GET, 0, @_CommPort
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] CTSHolding
      * Determines whether you can send data by querying the state of the Clear 
               PROPERTY-PUT, 5, @CTSHolding,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMSComm] CTSHolding
      * Determines whether you can send data by querying the state of the Clear 
               PROPERTY-GET, 5, @CTSHolding
                       RETURNING "boolean", TYPE 11
      *[Class: @IMSComm] CTSTimeout
      * Sets/returns the number of milliseconds to wait for the Clear To Send 
               PROPERTY-PUT, 6, @CTSTimeout,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMSComm] CTSTimeout
      * Sets/returns the number of milliseconds to wait for the Clear To Send 
               PROPERTY-GET, 6, @CTSTimeout
                       RETURNING "long", TYPE 3
      *[Class: @IMSComm] DSRHolding
      * Determines the state of the Data Set Ready line.
               PROPERTY-PUT, 7, @DSRHolding,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMSComm] DSRHolding
      * Determines the state of the Data Set Ready line.
               PROPERTY-GET, 7, @DSRHolding
                       RETURNING "boolean", TYPE 11
      *[Class: @IMSComm] DSRTimeout
      * Sets/returns the number of milliseconds to wait for the Data Set Ready.
               PROPERTY-PUT, 8, @DSRTimeout,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMSComm] DSRTimeout
      * Sets/returns the number of milliseconds to wait for the Data Set Ready.
               PROPERTY-GET, 8, @DSRTimeout
                       RETURNING "long", TYPE 3
      *[Class: @IMSComm] DTREnable
      * Determines whether to enable the Data Terminal Ready line during 
               PROPERTY-PUT, 9, @DTREnable,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMSComm] DTREnable
      * Determines whether to enable the Data Terminal Ready line during 
               PROPERTY-GET, 9, @DTREnable
                       RETURNING "boolean", TYPE 11
      *[Class: @IMSComm] Handshaking
      * Sets/returns the hardware handshaking protocol.
               PROPERTY-PUT, 10, @Handshaking,
                   "HandshakeConstants (Property_Value)", TYPE 3
      *[Class: @IMSComm] Handshaking
      * Sets/returns the hardware handshaking protocol.
               PROPERTY-GET, 10, @Handshaking
                       RETURNING "HandshakeConstants", TYPE 3
      *[Class: @IMSComm] InBufferSize
      * Sets/returns the size of the receive buffer in bytes.
               PROPERTY-PUT, 11, @InBufferSize,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] InBufferSize
      * Sets/returns the size of the receive buffer in bytes.
               PROPERTY-GET, 11, @InBufferSize
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] InBufferCount
      * Returns the number of characters waiting in the receive buffer.
               PROPERTY-PUT, 12, @InBufferCount,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] InBufferCount
      * Returns the number of characters waiting in the receive buffer.
               PROPERTY-GET, 12, @InBufferCount
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] Break
      * Sets or clears the break signal state.
               PROPERTY-PUT, 13, @Break,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMSComm] Break
      * Sets or clears the break signal state.
               PROPERTY-GET, 13, @Break
                       RETURNING "boolean", TYPE 11
      *[Class: @IMSComm] InputLen
      * Sets/returns the number of characters the Input property reads from the 
               PROPERTY-PUT, 14, @InputLen,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] InputLen
      * Sets/returns the number of characters the Input property reads from the 
               PROPERTY-GET, 14, @InputLen
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] Interval
      * Sets the interval, in milliseconds, for polling the hardware port for 
               PROPERTY-PUT, 15, @Interval,
                   "long (Property_Value)", TYPE 3
      *[Class: @IMSComm] Interval
      * Sets the interval, in milliseconds, for polling the hardware port for 
               PROPERTY-GET, 15, @Interval
                       RETURNING "long", TYPE 3
      *[Class: @IMSComm] NullDiscard
      * Determines whether null characters are transferred from the port to the 
               PROPERTY-PUT, 16, @NullDiscard,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMSComm] NullDiscard
      * Determines whether null characters are transferred from the port to the 
               PROPERTY-GET, 16, @NullDiscard
                       RETURNING "boolean", TYPE 11
      *[Class: @IMSComm] OutBufferSize
      * Sets/returns the size, in characters, of the transmit buffer.
               PROPERTY-PUT, 17, @OutBufferSize,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] OutBufferSize
      * Sets/returns the size, in characters, of the transmit buffer.
               PROPERTY-GET, 17, @OutBufferSize
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] OutBufferCount
      * Returns the number of characters waiting in the transmit buffer.
               PROPERTY-PUT, 18, @OutBufferCount,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] OutBufferCount
      * Returns the number of characters waiting in the transmit buffer.
               PROPERTY-GET, 18, @OutBufferCount
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] ParityReplace
      * Sets/returns the character that replaces an invalid character in the 
               PROPERTY-PUT, 19, @ParityReplace,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IMSComm] ParityReplace
      * Sets/returns the character that replaces an invalid character in the 
               PROPERTY-GET, 19, @ParityReplace
                       RETURNING "BSTR", TYPE 8
      *[Class: @IMSComm] PortOpen
      * Sets/returns the state of the communications port (open or closed).
               PROPERTY-PUT, 20, @PortOpen,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMSComm] PortOpen
      * Sets/returns the state of the communications port (open or closed).
               PROPERTY-GET, 20, @PortOpen
                       RETURNING "boolean", TYPE 11
      *[Class: @IMSComm] RThreshold
      * Sets/returns the number of characters to receive.
               PROPERTY-PUT, 21, @RThreshold,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] RThreshold
      * Sets/returns the number of characters to receive.
               PROPERTY-GET, 21, @RThreshold
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] RTSEnable
      * Determines whether to enable the Request To Send line.
               PROPERTY-PUT, 22, @RTSEnable,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMSComm] RTSEnable
      * Determines whether to enable the Request To Send line.
               PROPERTY-GET, 22, @RTSEnable
                       RETURNING "boolean", TYPE 11
      *[Class: @IMSComm] Settings
      * Sets/returns the baud rate, parity, data bit, and stop bit parameters.
               PROPERTY-PUT, 23, @Settings,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @IMSComm] Settings
      * Sets/returns the baud rate, parity, data bit, and stop bit parameters.
               PROPERTY-GET, 23, @Settings
                       RETURNING "BSTR", TYPE 8
      *[Class: @IMSComm] SThreshold
      * Sets/returns the minimum number of characters allowable in the 
               PROPERTY-PUT, 24, @SThreshold,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] SThreshold
      * Sets/returns the minimum number of characters allowable in the 
               PROPERTY-GET, 24, @SThreshold
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] Output
      * Writes a string of characters to the transmit buffer.
               PROPERTY-PUT, 25, @Output,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IMSComm] Output
      * Writes a string of characters to the transmit buffer.
               PROPERTY-GET, 25, @Output
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IMSComm] Input
      * Returns and removes a string of characters from the receive buffer.
               PROPERTY-PUT, 26, @Input,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @IMSComm] Input
      * Returns and removes a string of characters from the receive buffer.
               PROPERTY-GET, 26, @Input
                       RETURNING "VARIANT", TYPE 12
      *[Class: @IMSComm] CommEvent
      * Returns the most recent communication event or error.
               PROPERTY-PUT, 27, @CommEvent,
                   "short (Property_Value)", TYPE 2
      *[Class: @IMSComm] CommEvent
      * Returns the most recent communication event or error.
               PROPERTY-GET, 27, @CommEvent
                       RETURNING "short", TYPE 2
      *[Class: @IMSComm] EOFEnable
      * Sets/returns the whether to search for the EOF character.
               PROPERTY-PUT, 28, @EOFEnable,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @IMSComm] EOFEnable
      * Sets/returns the whether to search for the EOF character.
               PROPERTY-GET, 28, @EOFEnable
                       RETURNING "boolean", TYPE 11
      *[Class: @IMSComm] InputMode
      * Sets/returns the type of data retrieved by the Input property.
               PROPERTY-PUT, 29, @InputMode,
                   "InputModeConstants (Property_Value)", TYPE 3
      *[Class: @IMSComm] InputMode
      * Sets/returns the type of data retrieved by the Input property.
               PROPERTY-GET, 29, @InputMode
                       RETURNING "InputModeConstants", TYPE 3
      *[Class: @IMSComm] AboutBox
               METHOD, -552, @AboutBox
           
      * Event interface for MSComm Control
           
      * DMSCommEvents
           CLASS @DMSCommEvents
               CLSID, 648A5602-2C6E-101B-82B6-000000000014
               NAME, "DMSCommEvents"
      *[Class: @DMSCommEvents] OnComm
      * Occurs whenever the value of the CommEvent property changes.
               METHOD, 1, @OnComm
           
      * Microsoft Comm Control 6.0
           
      *** Primary Interface ***
           
      * MSComm
           CLASS @MSComm
               CLSID, 648A5600-2C6E-101B-82B6-000000000014
               NAME, "MSComm"
               PRIMARY-INTERFACE
               ACTIVE-X-CONTROL
               DEFAULT-INTERFACE, "IMSComm"
               DEFAULT-SOURCE, "648A5602-2C6E-101B-82B6-000000000014"
      *[Class: @MSComm] CDHolding
      * Determines whether the carrier is present by querying the state of the 
               PROPERTY-PUT, 1, @CDHolding,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @MSComm] CDHolding
      * Determines whether the carrier is present by querying the state of the 
               PROPERTY-GET, 1, @CDHolding
                       RETURNING "boolean", TYPE 11
      *[Class: @MSComm] CDTimeout
      * Returns/sets the maximum amount of time the control waits for the 
               PROPERTY-PUT, 2, @CDTimeout,
                   "long (Property_Value)", TYPE 3
      *[Class: @MSComm] CDTimeout
      * Returns/sets the maximum amount of time the control waits for the 
               PROPERTY-GET, 2, @CDTimeout
                       RETURNING "long", TYPE 3
      *[Class: @MSComm] CommID
      * Returns a handle that identifies the communications device.
               PROPERTY-PUT, 3, @CommID,
                   "long (Property_Value)", TYPE 3
      *[Class: @MSComm] CommID
      * Returns a handle that identifies the communications device.
               PROPERTY-GET, 3, @CommID
                       RETURNING "long", TYPE 3
      *[Class: @MSComm] CommPort
      * Returns/sets the communications port number.
               PROPERTY-PUT, 4, @CommPort,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] CommPort
      * Returns/sets the communications port number.
               PROPERTY-GET, 4, @CommPort
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] _CommPort
               PROPERTY-PUT, 0, @_CommPort,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] _CommPort
               PROPERTY-GET, 0, @_CommPort
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] CTSHolding
      * Determines whether you can send data by querying the state of the Clear 
               PROPERTY-PUT, 5, @CTSHolding,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @MSComm] CTSHolding
      * Determines whether you can send data by querying the state of the Clear 
               PROPERTY-GET, 5, @CTSHolding
                       RETURNING "boolean", TYPE 11
      *[Class: @MSComm] CTSTimeout
      * Sets/returns the number of milliseconds to wait for the Clear To Send 
               PROPERTY-PUT, 6, @CTSTimeout,
                   "long (Property_Value)", TYPE 3
      *[Class: @MSComm] CTSTimeout
      * Sets/returns the number of milliseconds to wait for the Clear To Send 
               PROPERTY-GET, 6, @CTSTimeout
                       RETURNING "long", TYPE 3
      *[Class: @MSComm] DSRHolding
      * Determines the state of the Data Set Ready line.
               PROPERTY-PUT, 7, @DSRHolding,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @MSComm] DSRHolding
      * Determines the state of the Data Set Ready line.
               PROPERTY-GET, 7, @DSRHolding
                       RETURNING "boolean", TYPE 11
      *[Class: @MSComm] DSRTimeout
      * Sets/returns the number of milliseconds to wait for the Data Set Ready.
               PROPERTY-PUT, 8, @DSRTimeout,
                   "long (Property_Value)", TYPE 3
      *[Class: @MSComm] DSRTimeout
      * Sets/returns the number of milliseconds to wait for the Data Set Ready.
               PROPERTY-GET, 8, @DSRTimeout
                       RETURNING "long", TYPE 3
      *[Class: @MSComm] DTREnable
      * Determines whether to enable the Data Terminal Ready line during 
               PROPERTY-PUT, 9, @DTREnable,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @MSComm] DTREnable
      * Determines whether to enable the Data Terminal Ready line during 
               PROPERTY-GET, 9, @DTREnable
                       RETURNING "boolean", TYPE 11
      *[Class: @MSComm] Handshaking
      * Sets/returns the hardware handshaking protocol.
               PROPERTY-PUT, 10, @Handshaking,
                   "HandshakeConstants (Property_Value)", TYPE 3
      *[Class: @MSComm] Handshaking
      * Sets/returns the hardware handshaking protocol.
               PROPERTY-GET, 10, @Handshaking
                       RETURNING "HandshakeConstants", TYPE 3
      *[Class: @MSComm] InBufferSize
      * Sets/returns the size of the receive buffer in bytes.
               PROPERTY-PUT, 11, @InBufferSize,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] InBufferSize
      * Sets/returns the size of the receive buffer in bytes.
               PROPERTY-GET, 11, @InBufferSize
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] InBufferCount
      * Returns the number of characters waiting in the receive buffer.
               PROPERTY-PUT, 12, @InBufferCount,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] InBufferCount
      * Returns the number of characters waiting in the receive buffer.
               PROPERTY-GET, 12, @InBufferCount
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] Break
      * Sets or clears the break signal state.
               PROPERTY-PUT, 13, @Break,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @MSComm] Break
      * Sets or clears the break signal state.
               PROPERTY-GET, 13, @Break
                       RETURNING "boolean", TYPE 11
      *[Class: @MSComm] InputLen
      * Sets/returns the number of characters the Input property reads from the 
               PROPERTY-PUT, 14, @InputLen,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] InputLen
      * Sets/returns the number of characters the Input property reads from the 
               PROPERTY-GET, 14, @InputLen
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] Interval
      * Sets the interval, in milliseconds, for polling the hardware port for 
               PROPERTY-PUT, 15, @Interval,
                   "long (Property_Value)", TYPE 3
      *[Class: @MSComm] Interval
      * Sets the interval, in milliseconds, for polling the hardware port for 
               PROPERTY-GET, 15, @Interval
                       RETURNING "long", TYPE 3
      *[Class: @MSComm] NullDiscard
      * Determines whether null characters are transferred from the port to the 
               PROPERTY-PUT, 16, @NullDiscard,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @MSComm] NullDiscard
      * Determines whether null characters are transferred from the port to the 
               PROPERTY-GET, 16, @NullDiscard
                       RETURNING "boolean", TYPE 11
      *[Class: @MSComm] OutBufferSize
      * Sets/returns the size, in characters, of the transmit buffer.
               PROPERTY-PUT, 17, @OutBufferSize,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] OutBufferSize
      * Sets/returns the size, in characters, of the transmit buffer.
               PROPERTY-GET, 17, @OutBufferSize
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] OutBufferCount
      * Returns the number of characters waiting in the transmit buffer.
               PROPERTY-PUT, 18, @OutBufferCount,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] OutBufferCount
      * Returns the number of characters waiting in the transmit buffer.
               PROPERTY-GET, 18, @OutBufferCount
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] ParityReplace
      * Sets/returns the character that replaces an invalid character in the 
               PROPERTY-PUT, 19, @ParityReplace,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @MSComm] ParityReplace
      * Sets/returns the character that replaces an invalid character in the 
               PROPERTY-GET, 19, @ParityReplace
                       RETURNING "BSTR", TYPE 8
      *[Class: @MSComm] PortOpen
      * Sets/returns the state of the communications port (open or closed).
               PROPERTY-PUT, 20, @PortOpen,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @MSComm] PortOpen
      * Sets/returns the state of the communications port (open or closed).
               PROPERTY-GET, 20, @PortOpen
                       RETURNING "boolean", TYPE 11
      *[Class: @MSComm] RThreshold
      * Sets/returns the number of characters to receive.
               PROPERTY-PUT, 21, @RThreshold,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] RThreshold
      * Sets/returns the number of characters to receive.
               PROPERTY-GET, 21, @RThreshold
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] RTSEnable
      * Determines whether to enable the Request To Send line.
               PROPERTY-PUT, 22, @RTSEnable,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @MSComm] RTSEnable
      * Determines whether to enable the Request To Send line.
               PROPERTY-GET, 22, @RTSEnable
                       RETURNING "boolean", TYPE 11
      *[Class: @MSComm] Settings
      * Sets/returns the baud rate, parity, data bit, and stop bit parameters.
               PROPERTY-PUT, 23, @Settings,
                   "BSTR (Property_Value)", TYPE 8
      *[Class: @MSComm] Settings
      * Sets/returns the baud rate, parity, data bit, and stop bit parameters.
               PROPERTY-GET, 23, @Settings
                       RETURNING "BSTR", TYPE 8
      *[Class: @MSComm] SThreshold
      * Sets/returns the minimum number of characters allowable in the 
               PROPERTY-PUT, 24, @SThreshold,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] SThreshold
      * Sets/returns the minimum number of characters allowable in the 
               PROPERTY-GET, 24, @SThreshold
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] Output
      * Writes a string of characters to the transmit buffer.
               PROPERTY-PUT, 25, @Output,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @MSComm] Output
      * Writes a string of characters to the transmit buffer.
               PROPERTY-GET, 25, @Output
                       RETURNING "VARIANT", TYPE 12
      *[Class: @MSComm] Input
      * Returns and removes a string of characters from the receive buffer.
               PROPERTY-PUT, 26, @Input,
                   "VARIANT (Property_Value)", TYPE 12
      *[Class: @MSComm] Input
      * Returns and removes a string of characters from the receive buffer.
               PROPERTY-GET, 26, @Input
                       RETURNING "VARIANT", TYPE 12
      *[Class: @MSComm] CommEvent
      * Returns the most recent communication event or error.
               PROPERTY-PUT, 27, @CommEvent,
                   "short (Property_Value)", TYPE 2
      *[Class: @MSComm] CommEvent
      * Returns the most recent communication event or error.
               PROPERTY-GET, 27, @CommEvent
                       RETURNING "short", TYPE 2
      *[Class: @MSComm] EOFEnable
      * Sets/returns the whether to search for the EOF character.
               PROPERTY-PUT, 28, @EOFEnable,
                   "boolean (Property_Value)", TYPE 11
      *[Class: @MSComm] EOFEnable
      * Sets/returns the whether to search for the EOF character.
               PROPERTY-GET, 28, @EOFEnable
                       RETURNING "boolean", TYPE 11
      *[Class: @MSComm] InputMode
      * Sets/returns the type of data retrieved by the Input property.
               PROPERTY-PUT, 29, @InputMode,
                   "InputModeConstants (Property_Value)", TYPE 3
      *[Class: @MSComm] InputMode
      * Sets/returns the type of data retrieved by the Input property.
               PROPERTY-GET, 29, @InputMode
                       RETURNING "InputModeConstants", TYPE 3
      *[Class: @MSComm] AboutBox
               METHOD, -552, @AboutBox
      *[Class: @MSComm] OnComm
      * Occurs whenever the value of the CommEvent property changes.
               EVENT, 1, @MSCommOnComm
      *            No Parameters
